/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/curtainsjs/src/camera/Camera.js":
/*!*******************************************************!*\
  !*** ../node_modules/curtainsjs/src/camera/Camera.js ***!
  \*******************************************************/
/*! exports provided: Camera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Camera\", function() { return Camera; });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"../node_modules/curtainsjs/src/math/Vec3.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Mat4.js */ \"../node_modules/curtainsjs/src/math/Mat4.js\");\n\r\n\r\n\r\n\r\n/***\r\n Here we create our Camera object\r\n Creates a perspective camera and its projection matrix (which is used by Plane's class objects)\r\n Uses a dirty _shouldUpdate flag used to determine if we should update the matrix\r\n\r\n params:\r\n @fov (float, optional): the perspective field of view. Should be greater than 0 and lower than 180. Default to 50.\r\n @near (float, optional): near plane, the closest point where a mesh vertex is drawn. Default to 0.1.\r\n @far (float, optional): far plane, farthest point where a mesh vertex is drawn. Default to 150.\r\n @width (float, optional): width used to calculate the camera aspect ratio. Default to the renderer container's width.\r\n @height (float, optional): height used to calculate the camera aspect ratio. Default to the renderer container's height.\r\n @pixelRatio (float, optional): pixel ratio used to calculate the camera aspect ratio. Default to the renderer's pixel ratio.\r\n\r\n returns:\r\n @this: our Mesh element\r\n ***/\r\nclass Camera {\r\n    constructor({\r\n        fov = 50,\r\n        near = 0.1,\r\n        far = 150,\r\n        width,\r\n        height,\r\n        pixelRatio = 1,\r\n    } = {}) {\r\n\r\n        this.position = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__[\"Vec3\"]();\r\n        this.projectionMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__[\"Mat4\"]();\r\n\r\n        this.worldMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__[\"Mat4\"]();\r\n        this.viewMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__[\"Mat4\"]();\r\n\r\n        this._shouldUpdate = false;\r\n\r\n        this.setSize();\r\n        this.setPerspective(fov, near, far, width, height, pixelRatio);\r\n    }\r\n\r\n    /***\r\n     Sets the camera field of view\r\n     Update the camera projection matrix only if the fov actually changed\r\n\r\n     params:\r\n     @fov (float, optional): field of view to use\r\n     ***/\r\n    setFov(fov) {\r\n        fov = isNaN(fov) ? this.fov : parseFloat(fov);\r\n\r\n        // clamp between 1 and 179\r\n        fov = Math.max(1, Math.min(fov, 179));\r\n\r\n        if(fov !== this.fov) {\r\n            this.fov = fov;\r\n            this.setPosition();\r\n            this.setCSSPerspective();\r\n\r\n            this._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the camera near plane value\r\n     Update the camera projection matrix only if the near plane actually changed\r\n\r\n     params:\r\n     @near (float, optional): near plane value to use\r\n     ***/\r\n    setNear(near) {\r\n        near = isNaN(near) ? this.near : parseFloat(near);\r\n        near = Math.max(near, 0.01);\r\n\r\n        if(near !== this.near) {\r\n            this.near = near;\r\n            this._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the camera far plane value\r\n     Update the camera projection matrix only if the far plane actually changed\r\n\r\n     params:\r\n     @far (float, optional): far plane value to use\r\n     ***/\r\n    setFar(far) {\r\n        far = isNaN(far) ? this.far : parseFloat(far);\r\n        far = Math.max(far, 50);\r\n\r\n        if(far !== this.far) {\r\n            this.far = far;\r\n            this._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the camera pixel ratio value\r\n     Update the camera projection matrix only if the pixel ratio actually changed\r\n\r\n     params:\r\n     @pixelRatio (float, optional): pixelRatio value to use\r\n     ***/\r\n    setPixelRatio(pixelRatio) {\r\n        if(pixelRatio !== this.pixelRatio) {\r\n            this._shouldUpdate = true;\r\n        }\r\n\r\n        this.pixelRatio = pixelRatio;\r\n    }\r\n\r\n    /***\r\n     Sets the camera width and height\r\n     Update the camera projection matrix only if the width or height actually changed\r\n\r\n     params:\r\n     @width (float, optional): width value to use\r\n     @height (float, optional): height value to use\r\n     ***/\r\n    setSize(width, height) {\r\n        if(width !== this.width || height !== this.height) {\r\n            this._shouldUpdate = true;\r\n        }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the camera perspective\r\n     Update the camera projection matrix if our _shouldUpdate flag is true\r\n\r\n     params:\r\n     @fov (float, optional): field of view to use\r\n     @near (float, optional): near plane value to use\r\n     @far (float, optional): far plane value to use\r\n     @width (float, optional): width value to use\r\n     @height (float, optional): height value to use\r\n     @pixelRatio (float, optional): pixelRatio value to use\r\n     ***/\r\n    setPerspective(fov, near, far, width, height, pixelRatio) {\r\n        this.setPixelRatio(pixelRatio);\r\n        this.setSize(width, height);\r\n        this.setFov(fov);\r\n        this.setNear(near);\r\n        this.setFar(far);\r\n\r\n        if(this._shouldUpdate) {\r\n            this.updateProjectionMatrix();\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the camera position based on its fov\r\n     Used by the Plane class objects to scale the planes with the right amount\r\n     ***/\r\n    setPosition() {\r\n        this.position.set(0, 0, Math.tan((Math.PI / 180) * 0.5 * this.fov) * 2.0);\r\n\r\n        // update matrices\r\n        this.worldMatrix.setFromArray([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            this.position.x, this.position.y, this.position.z, 1\r\n        ]);\r\n\r\n        this.viewMatrix = this.viewMatrix.copy(this.worldMatrix).getInverse();\r\n    }\r\n\r\n    /***\r\n     Sets a CSSPerspective property based on width, height, pixelRatio and fov\r\n     Used to translate planes along the Z axis using pixel units as CSS would do\r\n     ***/\r\n    setCSSPerspective() {\r\n        this.CSSPerspective = Math.pow(Math.pow(this.width / (2 * this.pixelRatio), 2) + Math.pow(this.height / (2 * this.pixelRatio), 2), 0.5) / (this.position.z * 0.5);\r\n    }\r\n\r\n    /***\r\n     Updates the camera projection matrix\r\n     ***/\r\n    updateProjectionMatrix() {\r\n        const aspect = this.width / this.height;\r\n\r\n        const top = this.near * Math.tan((Math.PI / 180) * 0.5 * this.fov);\r\n        const height = 2 * top;\r\n        const width = aspect * height;\r\n        const left = -0.5 * width;\r\n\r\n        const right = left + width;\r\n        const bottom = top - height;\r\n\r\n\r\n        const x = 2 * this.near / (right - left);\r\n        const y = 2 * this.near / (top - bottom);\r\n\r\n        const a = (right + left) / (right - left);\r\n        const b = (top + bottom) / (top - bottom);\r\n        const c = -(this.far + this.near) / (this.far - this.near);\r\n        const d = -2 * this.far * this.near / (this.far - this.near);\r\n\r\n        this.projectionMatrix.setFromArray([\r\n            x, 0, 0, 0,\r\n            0, y, 0, 0,\r\n            a, b, c, -1,\r\n            0, 0, d, 0\r\n        ]);\r\n    }\r\n\r\n\r\n    /***\r\n     Force the projection matrix to update (used in Plane class objects context restoration)\r\n     ***/\r\n    forceUpdate() {\r\n        this._shouldUpdate = true;\r\n    }\r\n\r\n\r\n    /***\r\n     Cancel the projection matrix update (used in Plane class objects after the projection matrix has been updated)\r\n     ***/\r\n    cancelUpdate() {\r\n        this._shouldUpdate = false;\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/camera/Camera.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/Curtains.js":
/*!*******************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/Curtains.js ***!
  \*******************************************************/
/*! exports provided: Curtains */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Curtains\", function() { return Curtains; });\n/* harmony import */ var _Renderer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Renderer.js */ \"../node_modules/curtainsjs/src/core/Renderer.js\");\n/* harmony import */ var _utils_ScrollManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ScrollManager.js */ \"../node_modules/curtainsjs/src/utils/ScrollManager.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n\r\n\r\n\r\n/***\r\n Here we create our Curtains object\r\n\r\n\r\n params:\r\n @container (HTML element or string, optional): the container HTML element or ID that will hold our canvas. Could be set later if not passed as parameter here\r\n\r\n (WebGL context parameters)\r\n @alpha (bool, optional): whether the WebGL context should handle transparency. Default to true.\r\n @premultipliedAlpha (bool, optional): whether the WebGL context should handle premultiplied alpha. Default to false.\r\n @antialias (bool, optional): whether the WebGL context should use the default antialiasing. When using render targets, WebGL disables antialiasing, so you can safely set this to false to improve the performance. Default to true.\r\n @depth (bool, optional): whether the WebGL context should handle depth. Default to true.\r\n @failIfMajorPerformanceCaveat (bool, optional): whether the WebGL context creation should fail in case of major performance caveat. Default to true.\r\n @preserveDrawingBuffer (bool, optional): whether the WebGL context should preserve the drawing buffer. Default to false.\r\n @stencil (bool, optional): whether the WebGL context should handle stencil. Default to false.\r\n\r\n @autoResize (bool, optional): Whether the library should listen to the window resize event and actually resize the scene. Set it to false if you want to handle this by yourself using the resize() method. Default to true.\r\n @autoRender (bool, optional): Whether the library should create a request animation frame loop to render the scene. Set it to false if you want to handle this by yourself using the render() method. Default to true.\r\n @watchScroll (bool, optional): Whether the library should listen to the window scroll event. Set it to false if you want to handle this by yourself. Default to true.\r\n\r\n @pixelRatio (float, optional): Defines the pixel ratio value. Use it to limit it on init to increase performance. Default to window.devicePixelRatio.\r\n @renderingScale (float, optional): Use it to downscale your rendering canvas. May improve performance but will decrease quality. Default to 1 (minimum: 0.25, maximum: 1).\r\n\r\n @production (bool, optional): Whether the library should throw useful console warnings and errors and check shaders and programs compilation status. Default to false.\r\n\r\n returns :\r\n @this: our Renderer\r\n ***/\r\nclass Curtains {\r\n    constructor({\r\n        // renderer container\r\n        container,\r\n\r\n        // webgl params\r\n        alpha = true,\r\n        premultipliedAlpha = false,\r\n        antialias = true,\r\n        depth = true,\r\n        failIfMajorPerformanceCaveat = true,\r\n        preserveDrawingBuffer = false,\r\n        stencil = false,\r\n\r\n        autoResize = true,\r\n        autoRender = true,\r\n        watchScroll = true,\r\n\r\n        pixelRatio = window.devicePixelRatio || 1,\r\n        renderingScale = 1,\r\n\r\n        production = false,\r\n    } = {}) {\r\n        this.type = \"Curtains\";\r\n\r\n        // if we should use auto resize (default to true)\r\n        this._autoResize = autoResize;\r\n        // if we should use auto render (default to true)\r\n        this._autoRender = autoRender;\r\n        // if we should watch the scroll (default to true)\r\n        this._watchScroll = watchScroll;\r\n\r\n        // pixel ratio and rendering scale\r\n        this.pixelRatio = pixelRatio;\r\n        // rendering scale\r\n        renderingScale = isNaN(renderingScale) ? 1 : parseFloat(renderingScale);\r\n        this._renderingScale = Math.max(0.25, Math.min(1, renderingScale));\r\n\r\n        // webgl context parameters\r\n        this.premultipliedAlpha = premultipliedAlpha;\r\n        this.alpha = alpha;\r\n        this.antialias = antialias;\r\n        this.depth = depth;\r\n        this.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;\r\n        this.preserveDrawingBuffer = preserveDrawingBuffer;\r\n        this.stencil = stencil;\r\n\r\n        this.production = production;\r\n\r\n        this.errors = false;\r\n\r\n        // if a container has been provided, proceed to init\r\n        if(container) {\r\n            this.setContainer(container);\r\n        }\r\n        else if(!this.production) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__[\"throwWarning\"])(this.type + \": no container provided in the initial parameters. Use setContainer() method to set one later and initialize the WebGL context\")\r\n        }\r\n    }\r\n\r\n    /***\r\n     Set up our Curtains container and start initializing everything\r\n     Called on Curtains instancing if a params container has been provided, could be call afterwards else\r\n     Useful with JS frameworks to init our Curtains class globally and then set the container in a canvas component afterwards to fully instantiate everything\r\n\r\n     params:\r\n     @container (HTML element or string): the container HTML element or ID that will hold our canvas\r\n     ***/\r\n    setContainer(container) {\r\n        if(!container) {\r\n            let container = document.createElement(\"div\");\r\n            container.setAttribute(\"id\", \"curtains-canvas\");\r\n            document.body.appendChild(container);\r\n            this.container = container;\r\n            if(!this.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__[\"throwWarning\"])('Curtains: no valid container HTML element or ID provided, created a div with \"curtains-canvas\" ID instead');\r\n        }\r\n        else {\r\n            if(typeof container === \"string\") {\r\n                container = document.getElementById(container);\r\n\r\n                if(!container) {\r\n                    let container = document.createElement(\"div\");\r\n                    container.setAttribute(\"id\", \"curtains-canvas\");\r\n                    document.body.appendChild(container);\r\n                    this.container = container;\r\n                    if(!this.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__[\"throwWarning\"])('Curtains: no valid container HTML element or ID provided, created a div with \"curtains-canvas\" ID instead');\r\n                }\r\n                else {\r\n                    this.container = container;\r\n                }\r\n            }\r\n            else if(container instanceof Element) {\r\n                this.container = container;\r\n            }\r\n        }\r\n\r\n        this._initCurtains();\r\n    }\r\n\r\n\r\n    /***\r\n     Initialize everything that the class will need: WebGL renderer, scroll manager, sizes, listeners\r\n     Then starts our animation frame loop if needed\r\n     ***/\r\n    _initCurtains() {\r\n        this.planes = [];\r\n        this.renderTargets = [];\r\n        this.shaderPasses = [];\r\n\r\n        // init webgl context\r\n        this._initRenderer();\r\n\r\n        if(!this.gl) return;\r\n\r\n        // scroll\r\n        this._initScroll();\r\n\r\n        // sizes\r\n        this._setSize();\r\n\r\n        // event listeners\r\n        this._addListeners();\r\n\r\n        // we are ready to go\r\n        this.container.appendChild(this.canvas);\r\n\r\n        // watermark\r\n        console.log(\"curtains.js - v7.3\");\r\n\r\n        // start rendering\r\n        this._animationFrameID = null;\r\n        if(this._autoRender) {\r\n            this._animate();\r\n        }\r\n    }\r\n\r\n\r\n    /*** WEBGL CONTEXT ***/\r\n\r\n    /***\r\n     Initialize the Renderer class object\r\n     ***/\r\n    _initRenderer() {\r\n        this.renderer = new _Renderer_js__WEBPACK_IMPORTED_MODULE_0__[\"Renderer\"]({\r\n            alpha: this.alpha,\r\n            antialias: this.antialias,\r\n            premultipliedAlpha: this.premultipliedAlpha,\r\n            depth: this.depth,\r\n            failIfMajorPerformanceCaveat: this.failIfMajorPerformanceCaveat,\r\n            preserveDrawingBuffer: this.preserveDrawingBuffer,\r\n            stencil: this.stencil,\r\n\r\n            container: this.container,\r\n            pixelRatio: this.pixelRatio,\r\n            renderingScale: this._renderingScale,\r\n\r\n            production: this.production,\r\n\r\n            onError: () => this._onRendererError(),\r\n            onContextLost: () => this._onRendererContextLost(),\r\n            onContextRestored: () => this._onRendererContextRestored(),\r\n            onDisposed: () => this._onRendererDisposed(),\r\n            // keep sync between renderer planes, shader passes and render targets arrays and the Curtains ones\r\n            onSceneChange: () => this._keepSync(),\r\n        });\r\n\r\n        this.gl = this.renderer.gl;\r\n        this.canvas = this.renderer.canvas;\r\n    }\r\n\r\n\r\n    /***\r\n     Force our renderer to restore the WebGL context\r\n     ***/\r\n    restoreContext() {\r\n        this.renderer.restoreContext();\r\n    }\r\n\r\n\r\n    /***\r\n     This just handles our drawing animation frame\r\n     ***/\r\n    _animate() {\r\n        this.render();\r\n        this._animationFrameID = window.requestAnimationFrame(this._animate.bind(this));\r\n    }\r\n\r\n\r\n    /*** RENDERING ***/\r\n\r\n    /***\r\n     Enables rendering\r\n     ***/\r\n    enableDrawing() {\r\n        this.renderer.enableDrawing();\r\n    }\r\n\r\n    /***\r\n     Disables rendering\r\n     ***/\r\n    disableDrawing() {\r\n        this.renderer.disableDrawing();\r\n    }\r\n\r\n    /***\r\n     Forces the rendering of the next frame, even if disabled\r\n     ***/\r\n    needRender() {\r\n        this.renderer.needRender();\r\n    }\r\n\r\n    /***\r\n     Executes a callback on next frame\r\n\r\n     params:\r\n     @callback (function): callback to execute on next frame\r\n     ***/\r\n    nextRender(callback) {\r\n        this.renderer.nextRender.add(callback);\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL renderer colors and depth buffers\r\n     ***/\r\n    clear() {\r\n        this.renderer && this.renderer.clear();\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL renderer depth buffer\r\n     ***/\r\n    clearDepth() {\r\n        this.renderer && this.renderer.clearDepth();\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL renderer color buffer\r\n     ***/\r\n    clearColor() {\r\n        this.renderer && this.renderer.clearColor();\r\n    }\r\n\r\n\r\n    /***\r\n     Check whether the created context is WebGL2\r\n\r\n     return:\r\n     @isWebGL2 (bool): whether the created WebGL context is 2.0 or not\r\n     ***/\r\n    isWebGL2() {\r\n        return this.gl ? this.renderer._isWebGL2 : false;\r\n    }\r\n\r\n\r\n    /***\r\n     Tells our renderer to render the scene if the drawing is enabled\r\n     ***/\r\n    render() {\r\n        // always execute callback queue\r\n        this.renderer.nextRender.execute();\r\n\r\n        // If forceRender is true, force rendering this frame even if drawing is not enabled.\r\n        // If not, only render if enabled.\r\n        if(!this.renderer.state.drawingEnabled && !this.renderer.state.forceRender) {\r\n            return;\r\n        }\r\n\r\n        // reset forceRender\r\n        if(this.renderer.state.forceRender) {\r\n            this.renderer.state.forceRender = false;\r\n        }\r\n\r\n        // Curtains onRender callback\r\n        if(this._onRenderCallback) {\r\n            this._onRenderCallback();\r\n        }\r\n\r\n        this.renderer.render();\r\n    }\r\n\r\n\r\n    /*** LISTENERS ***/\r\n\r\n    /***\r\n     Adds our resize event listener if needed\r\n     ***/\r\n    _addListeners() {\r\n        // handling window resize event\r\n        this._resizeHandler = null;\r\n        if(this._autoResize) {\r\n            this._resizeHandler = this.resize.bind(this, true);\r\n            window.addEventListener(\"resize\", this._resizeHandler, false);\r\n        }\r\n    }\r\n\r\n\r\n    /*** SIZING ***/\r\n\r\n    /***\r\n     Set the pixel ratio property and update everything by calling the resize() method\r\n     ***/\r\n    setPixelRatio(pixelRatio, triggerCallback) {\r\n        this.pixelRatio = parseFloat(Math.max(pixelRatio, 1)) || 1;\r\n        this.renderer.setPixelRatio(pixelRatio);\r\n        // apply new pixel ratio to all our elements but don't trigger onAfterResize callback\r\n        this.resize(triggerCallback);\r\n    }\r\n\r\n\r\n    /***\r\n     Set our renderer container and canvas sizes and update the scroll values\r\n     ***/\r\n    _setSize() {\r\n        this.renderer.setSize();\r\n\r\n        // update scroll values ass well\r\n        if(this._scrollManager.shouldWatch) {\r\n            this._scrollManager.xOffset = window.pageXOffset;\r\n            this._scrollManager.yOffset = window.pageYOffset;\r\n        }\r\n    }\r\n\r\n    /***\r\n     Useful to get our container bounding rectangle without triggering a reflow/layout\r\n\r\n     returns :\r\n     @boundingRectangle (object): an object containing our container bounding rectangle (width, height, top and left properties)\r\n     ***/\r\n    getBoundingRect() {\r\n        return this.renderer._boundingRect;\r\n    }\r\n\r\n\r\n    /***\r\n     Resize our container and the renderer\r\n\r\n     params:\r\n     @triggerCallback (bool): Whether we should trigger onAfterResize callback\r\n     ***/\r\n    resize(triggerCallback) {\r\n        if(!this.gl) return;\r\n\r\n        this._setSize();\r\n\r\n        this.renderer.resize();\r\n\r\n        this.nextRender(() => {\r\n            if(this._onAfterResizeCallback && triggerCallback) {\r\n                this._onAfterResizeCallback();\r\n            }\r\n        });\r\n    }\r\n\r\n    /*** SCROLL ***/\r\n\r\n    /***\r\n     Init our ScrollManager class object\r\n     ***/\r\n    _initScroll() {\r\n        this._scrollManager = new _utils_ScrollManager_js__WEBPACK_IMPORTED_MODULE_1__[\"ScrollManager\"]({\r\n            // init values\r\n            xOffset: window.pageXOffset,\r\n            yOffset: window.pageYOffset,\r\n            lastXDelta: 0,\r\n            lastYDelta: 0,\r\n            shouldWatch: this._watchScroll,\r\n\r\n            onScroll: (lastXDelta, lastYDelta) => this._updateScroll(lastXDelta, lastYDelta),\r\n        });\r\n    }\r\n\r\n    /***\r\n     Handles the different values associated with a scroll event (scroll and delta values)\r\n     If no plane watch the scroll then those values won't be retrieved to avoid unnecessary reflow calls\r\n     If at least a plane is watching, update all watching planes positions based on the scroll values\r\n     And force render for at least one frame to actually update the scene\r\n     ***/\r\n    _updateScroll(lastXDelta, lastYDelta) {\r\n        for(let i = 0; i < this.planes.length; i++) {\r\n            // if our plane is watching the scroll, update its position\r\n            if(this.planes[i].watchScroll) {\r\n                this.planes[i].updateScrollPosition(lastXDelta, lastYDelta);\r\n            }\r\n        }\r\n\r\n        // be sure we'll update the scene even if drawing is disabled\r\n        this.renderer.needRender();\r\n\r\n        this._onScrollCallback && this._onScrollCallback();\r\n    }\r\n\r\n\r\n    /***\r\n     Updates the scroll manager X and Y scroll values as well as last X and Y deltas\r\n     Internally called by the scroll handler if at least one plane is watching the scroll\r\n     Could be called externally as well if the user wants to handle the scroll by himself\r\n\r\n     params:\r\n     @x (float): scroll value along X axis\r\n     @y (float): scroll value along Y axis\r\n     ***/\r\n    updateScrollValues(x, y) {\r\n        this._scrollManager.updateScrollValues(x, y);\r\n    }\r\n\r\n\r\n    /***\r\n     Returns last delta scroll values\r\n\r\n     returns:\r\n     @delta (object): an object containing X and Y last delta values\r\n     ***/\r\n    getScrollDeltas() {\r\n        return {\r\n            x: this._scrollManager.lastXDelta,\r\n            y: this._scrollManager.lastYDelta,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Returns last window scroll values\r\n\r\n     returns:\r\n     @scrollValues (object): an object containing X and Y last scroll values\r\n     ***/\r\n    getScrollValues() {\r\n        return {\r\n            x: this._scrollManager.xOffset,\r\n            y: this._scrollManager.yOffset,\r\n        };\r\n    }\r\n\r\n    /*** ADDING / REMOVING OBJECTS TO THE RENDERER ***/\r\n\r\n    /***\r\n     Always keep sync between renderer and Curtains scene objects when adding/removing objects\r\n     ***/\r\n    _keepSync() {\r\n        this.planes = this.renderer.planes;\r\n        this.shaderPasses = this.renderer.shaderPasses;\r\n        this.renderTargets = this.renderer.renderTargets;\r\n    }\r\n\r\n\r\n    /*** UTILS ***/\r\n\r\n    /***\r\n     Linear interpolation helper defined in utils\r\n     ***/\r\n    lerp(start, end, amount) {\r\n        return Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__[\"lerp\"])(start, end, amount);\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n\r\n    /***\r\n     This is called each time our container has been resized\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onAfterResize(callback) {\r\n        if(callback) {\r\n            this._onAfterResizeCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This is called when an error has been detected\r\n\r\n     params:\r\n     @callback (function): a function to execute\r\n\r\n     returns:\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onError(callback) {\r\n        if(callback) {\r\n            this._onErrorCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This triggers the onError callback and is called by the renderer when an error has been detected\r\n     ***/\r\n    _onRendererError() {\r\n        // be sure that the callback has been registered and only call the global error callback once\r\n        setTimeout(() => {\r\n            if(this._onErrorCallback && !this.errors) {\r\n                this._onErrorCallback();\r\n            }\r\n            this.errors = true;\r\n        }, 0);\r\n    }\r\n\r\n\r\n    /***\r\n     This is called once our context has been lost\r\n\r\n     params:\r\n     @callback (function): a function to execute\r\n\r\n     returns:\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onContextLost(callback) {\r\n        if(callback) {\r\n            this._onContextLostCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This triggers the onContextLost callback and is called by the renderer when the context has been lost\r\n     ***/\r\n    _onRendererContextLost() {\r\n        this._onContextLostCallback && this._onContextLostCallback();\r\n    }\r\n\r\n\r\n    /***\r\n     This is called once our context has been restored\r\n\r\n     params:\r\n     @callback (function): a function to execute\r\n\r\n     returns:\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onContextRestored(callback) {\r\n        if(callback) {\r\n            this._onContextRestoredCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This triggers the onContextRestored callback and is called by the renderer when the context has been restored\r\n     ***/\r\n    _onRendererContextRestored() {\r\n        this._onContextRestoredCallback && this._onContextRestoredCallback();\r\n    }\r\n\r\n\r\n    /***\r\n     This is called once at each request animation frame call\r\n\r\n     params:\r\n     @callback (function): a function to execute\r\n\r\n     returns:\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onRender(callback) {\r\n        if(callback) {\r\n            this._onRenderCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     This is called each time window is scrolled and if our scrollManager is active\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onScroll(callback) {\r\n        if(callback) {\r\n            this._onScrollCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /*** DESTROYING ***/\r\n\r\n    /***\r\n     Dispose everything\r\n     ***/\r\n    dispose() {\r\n        this.renderer.dispose();\r\n    }\r\n\r\n\r\n    /***\r\n     This is called when the renderer has finished disposing all the WebGL stuff\r\n     ***/\r\n    _onRendererDisposed() {\r\n        // cancel animation frame\r\n        this._animationFrameID && window.cancelAnimationFrame(this._animationFrameID);\r\n\r\n        // remove event listeners\r\n        this._resizeHandler && window.removeEventListener(\"resize\", this._resizeHandler, false);\r\n        this._scrollManager && this._scrollManager.dispose();\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/Curtains.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/DOMMesh.js":
/*!******************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/DOMMesh.js ***!
  \******************************************************/
/*! exports provided: DOMMesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMMesh\", function() { return DOMMesh; });\n/* harmony import */ var _Mesh_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mesh.js */ \"../node_modules/curtainsjs/src/core/Mesh.js\");\n/* harmony import */ var _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vec2.js */ \"../node_modules/curtainsjs/src/math/Vec2.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n\r\n\r\n/***\r\n Here we create our DOMGLObject object\r\n We will extend our Mesh class object by adding HTML sizes helpers (bounding boxes getter/setter and mouse to mesh positioning)\r\n\r\n params:\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n @plane (html element): the html element that we will use for our DOMMesh object\r\n @type (string): Object type (should be either \"Plane\" or \"ShaderPass\")\r\n @Meshparams (object): see Mesh class object\r\n \r\n returns:\r\n @this: our BasePlane element\r\n ***/\r\n\r\n// TODO raycasting inside mouseToPlaneCoords for Plane objects when transformed\r\n\r\nclass DOMMesh extends _Mesh_js__WEBPACK_IMPORTED_MODULE_0__[\"Mesh\"] {\r\n    constructor(renderer, htmlElement, type = \"DOMMesh\", {\r\n        // Mesh params\r\n        shareProgram,\r\n        widthSegments,\r\n        heightSegments,\r\n        renderOrder,\r\n        depthTest,\r\n        cullFace,\r\n        uniforms,\r\n        vertexShaderID,\r\n        fragmentShaderID,\r\n        vertexShader,\r\n        fragmentShader,\r\n        texturesOptions,\r\n        crossOrigin,\r\n    } = {}) {\r\n        // handling HTML shaders scripts\r\n        vertexShaderID = vertexShaderID || htmlElement && htmlElement.getAttribute(\"data-vs-id\");\r\n        fragmentShaderID = fragmentShaderID || htmlElement && htmlElement.getAttribute(\"data-fs-id\");\r\n\r\n        super(renderer, type, {\r\n            shareProgram,\r\n            widthSegments,\r\n            heightSegments,\r\n            renderOrder,\r\n            depthTest,\r\n            cullFace,\r\n            uniforms,\r\n            vertexShaderID,\r\n            fragmentShaderID,\r\n            vertexShader,\r\n            fragmentShader,\r\n            texturesOptions,\r\n            crossOrigin,\r\n        });\r\n\r\n        // our HTML element\r\n        this.htmlElement = htmlElement;\r\n\r\n        if(!this.htmlElement || this.htmlElement.length === 0) {\r\n            if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__[\"throwWarning\"])(this.type + \": The HTML element you specified does not currently exists in the DOM\");\r\n        }\r\n\r\n        // set plane sizes\r\n        this._setDocumentSizes();\r\n    }\r\n\r\n\r\n    /*** PLANE SIZES ***/\r\n\r\n    /***\r\n     Set our plane dimensions and positions relative to document\r\n     Triggers reflow!\r\n     ***/\r\n    _setDocumentSizes() {\r\n        // set our basic initial infos\r\n        let planeBoundingRect = this.htmlElement.getBoundingClientRect();\r\n\r\n        if(!this._boundingRect) this._boundingRect = {};\r\n\r\n        // set plane dimensions in document space\r\n        this._boundingRect.document = {\r\n            width: planeBoundingRect.width * this.renderer.pixelRatio,\r\n            height: planeBoundingRect.height * this.renderer.pixelRatio,\r\n            top: planeBoundingRect.top * this.renderer.pixelRatio,\r\n            left: planeBoundingRect.left * this.renderer.pixelRatio,\r\n        };\r\n    };\r\n\r\n\r\n    /*** BOUNDING BOXES GETTERS ***/\r\n\r\n    /***\r\n     Useful to get our plane HTML element bounding rectangle without triggering a reflow/layout\r\n\r\n     returns :\r\n     @boundingRectangle (obj): an object containing our plane HTML element bounding rectangle (width, height, top, bottom, right and left properties)\r\n     ***/\r\n    getBoundingRect() {\r\n        return {\r\n            width: this._boundingRect.document.width,\r\n            height: this._boundingRect.document.height,\r\n            top: this._boundingRect.document.top,\r\n            left: this._boundingRect.document.left,\r\n\r\n            // right = left + width, bottom = top + height\r\n            right: this._boundingRect.document.left + this._boundingRect.document.width,\r\n            bottom: this._boundingRect.document.top + this._boundingRect.document.height,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Handles each plane resizing\r\n     used internally when our container is resized\r\n     ***/\r\n    resize() {\r\n        // reset plane dimensions\r\n        this._setDocumentSizes();\r\n\r\n        // if this is a Plane object we need to update its perspective and positions\r\n        if(this.type === \"Plane\") {\r\n            // reset perspective\r\n            this.setPerspective(this.camera.fov, this.camera.near, this.camera.far);\r\n\r\n            // apply new position\r\n            this._applyWorldPositions();\r\n        }\r\n\r\n        // resize all textures\r\n        for(let i = 0; i < this.textures.length; i++) {\r\n            this.textures[i].resize();\r\n        }\r\n\r\n        // handle our after resize event\r\n        this.renderer.nextRender.add(() => this._onAfterResizeCallback && this._onAfterResizeCallback());\r\n    }\r\n\r\n\r\n\r\n    /*** INTERACTION ***/\r\n\r\n    /***\r\n     This function takes the mouse position relative to the document and returns it relative to our plane\r\n     It ranges from -1 to 1 on both axis\r\n\r\n     params :\r\n     @mouseCoordinates (Vec2 object): coordinates of the mouse\r\n\r\n     returns :\r\n     @mousePosition (Vec2 object): the mouse position relative to our plane in WebGL space coordinates\r\n     ***/\r\n    mouseToPlaneCoords(mouseCoordinates) {\r\n        // remember our ShaderPass objects don't have a scale property\r\n        const scale = this.scale ? this.scale : new _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__[\"Vec2\"](1, 1);\r\n\r\n        // we need to adjust our plane document bounding rect to it's webgl scale\r\n        const scaleAdjustment = new _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__[\"Vec2\"](\r\n            (this._boundingRect.document.width - this._boundingRect.document.width * scale.x) / 2,\r\n            (this._boundingRect.document.height - this._boundingRect.document.height * scale.y) / 2,\r\n        );\r\n\r\n        // also we need to divide by pixel ratio\r\n        const planeBoundingRect = {\r\n            width: (this._boundingRect.document.width * scale.x) / this.renderer.pixelRatio,\r\n            height: (this._boundingRect.document.height * scale.y) / this.renderer.pixelRatio,\r\n            top: (this._boundingRect.document.top + scaleAdjustment.y) / this.renderer.pixelRatio,\r\n            left: (this._boundingRect.document.left + scaleAdjustment.x) / this.renderer.pixelRatio,\r\n        };\r\n\r\n        // mouse position conversion from document to plane space\r\n        return new _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__[\"Vec2\"](\r\n            (((mouseCoordinates.x - planeBoundingRect.left) / planeBoundingRect.width) * 2) - 1,\r\n            1 - (((mouseCoordinates.y - planeBoundingRect.top) / planeBoundingRect.height) * 2)\r\n        );\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n\r\n\r\n    /***\r\n     This is called each time a plane has been resized\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onAfterResize(callback) {\r\n        if(callback) {\r\n            this._onAfterResizeCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/DOMMesh.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/Geometry.js":
/*!*******************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/Geometry.js ***!
  \*******************************************************/
/*! exports provided: Geometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Geometry\", function() { return Geometry; });\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n/***\r\n Geometry class handles attributes, VertexArrayObjects (if available) and vertices/UVs set up\r\n\r\n params:\r\n @renderer (Renderer class object): our renderer class object\r\n\r\n @program (object): our mesh's Program (see Program class object)\r\n @width (int): number of vertices along width\r\n @height (int): number of vertices along height\r\n @id (int): an integer based on geometry's width and height and used to avoid redundant buffer binding calls\r\n\r\n returns:\r\n @this: our newly created Geometry\r\n ***/\r\nclass Geometry {\r\n    constructor(renderer, {\r\n        program = null,\r\n        width = 1,\r\n        height = 1,\r\n    } = {}) {\r\n        this.type = \"Geometry\";\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwError\"])(this.type + \": Renderer not passed as first argument\", renderer);\r\n        }\r\n        else if(!renderer.gl) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwError\"])(this.type + \": Renderer WebGL context is undefined\", renderer);\r\n        }\r\n        this.renderer = renderer;\r\n        this.gl = this.renderer.gl;\r\n\r\n        // unique plane buffers id based on width and height\r\n        // used to get a geometry from cache\r\n        this.definition = {\r\n            id: width * height + width,\r\n            width: width,\r\n            height: height,\r\n        };\r\n\r\n        this.setDefaultAttributes();\r\n        this.setVerticesUVs();\r\n    }\r\n\r\n\r\n    /*** CONTEXT RESTORATION ***/\r\n\r\n    /***\r\n     Used internally to handle context restoration after the program has been successfully compiled again\r\n     Reset the default attributes, the vertices and UVs and the program\r\n     ***/\r\n    restoreContext(program) {\r\n        this.program = null;\r\n        this.setDefaultAttributes();\r\n        this.setVerticesUVs();\r\n\r\n        this.setProgram(program);\r\n    }\r\n\r\n\r\n    /*** SET DEFAULT ATTRIBUTES ***/\r\n\r\n    /***\r\n     Our geometry default attributes that will handle the buffers\r\n     We're just using vertices positions and texture coordinates\r\n     ***/\r\n    setDefaultAttributes() {\r\n        // our plane default attributes\r\n        // if we'd want to introduce custom attributes we'd merge them with those\r\n        this.attributes = {\r\n            vertexPosition: {\r\n                name: \"aVertexPosition\",\r\n                size: 3,\r\n            },\r\n            textureCoord: {\r\n                name: \"aTextureCoord\",\r\n                size: 3,\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Set our vertices and texture coordinates array\r\n     Get them from the cache if possible\r\n     ***/\r\n    setVerticesUVs() {\r\n        // we need to create our geometry and material objects\r\n        const cachedGeometry = this.renderer.cache.getGeometryFromID(this.definition.id);\r\n\r\n        if(cachedGeometry) {\r\n            this.attributes.vertexPosition.array = cachedGeometry.vertices;\r\n            this.attributes.textureCoord.array = cachedGeometry.uvs;\r\n        }\r\n        else {\r\n            this.computeVerticesUVs();\r\n            // TODO better caching? We could pass all attributes to cache and handle arrays in there\r\n            this.renderer.cache.addGeometry(this.definition.id, this.attributes.vertexPosition.array, this.attributes.textureCoord.array);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Called on init and on context restoration to set up the attribute buffers\r\n     Use VertexArrayObjects whenever possible\r\n     ***/\r\n    setProgram(program) {\r\n        this.program = program.program;\r\n        this.initAttributes();\r\n\r\n        // use vertex array objects if available\r\n        if(this.renderer._isWebGL2) {\r\n            this._vao = this.gl.createVertexArray();\r\n            this.gl.bindVertexArray(this._vao);\r\n        }\r\n        else if(this.renderer.extensions['OES_vertex_array_object']) {\r\n            this._vao = this.renderer.extensions['OES_vertex_array_object'].createVertexArrayOES();\r\n            this.renderer.extensions['OES_vertex_array_object'].bindVertexArrayOES(this._vao);\r\n        }\r\n\r\n        this.initializeBuffers();\r\n    }\r\n\r\n    /***\r\n     This creates our mesh attributes and buffers by looping over it\r\n     ***/\r\n    initAttributes() {\r\n        // loop through our attributes and create buffers and attributes locations\r\n        for(const key in this.attributes) {\r\n            this.attributes[key].location = this.gl.getAttribLocation(this.program, this.attributes[key].name);\r\n            this.attributes[key].buffer = this.gl.createBuffer();\r\n            this.attributes[key].numberOfItems = this.definition.width * this.definition.height * this.attributes[key].size * 2;\r\n        }\r\n    }\r\n\r\n    /***\r\n     This method is used internally to create our vertices coordinates and texture UVs\r\n     we first create our UVs on a grid from [0, 0, 0] to [1, 1, 0]\r\n     then we use the UVs to create our vertices coords\r\n     ***/\r\n    computeVerticesUVs() {\r\n        // geometry vertices and UVs\r\n        this.attributes.vertexPosition.array = [];\r\n        this.attributes.textureCoord.array = [];\r\n\r\n        const vertices = this.attributes.vertexPosition.array;\r\n        const uvs = this.attributes.textureCoord.array;\r\n\r\n        for(let y = 0; y < this.definition.height; y++) {\r\n            const v = y / this.definition.height;\r\n\r\n            for(let x = 0; x < this.definition.width; x++) {\r\n                const u = x / this.definition.width;\r\n\r\n                // uvs and vertices\r\n                // our uvs are ranging from 0 to 1, our vertices range from -1 to 1\r\n\r\n                // first triangle\r\n                uvs.push(u);\r\n                uvs.push(v);\r\n                uvs.push(0);\r\n\r\n                vertices.push((u - 0.5) * 2);\r\n                vertices.push((v - 0.5) * 2);\r\n                vertices.push(0);\r\n\r\n                uvs.push(u + (1 / this.definition.width));\r\n                uvs.push(v);\r\n                uvs.push(0);\r\n\r\n                vertices.push(((u + (1 / this.definition.width)) - 0.5) * 2);\r\n                vertices.push((v - 0.5) * 2);\r\n                vertices.push(0);\r\n\r\n                uvs.push(u);\r\n                uvs.push(v + (1 / this.definition.height));\r\n                uvs.push(0);\r\n\r\n                vertices.push((u - 0.5) * 2);\r\n                vertices.push(((v + (1 / this.definition.height)) - 0.5) * 2);\r\n                vertices.push(0);\r\n\r\n                // second triangle\r\n                uvs.push(u);\r\n                uvs.push(v + (1 / this.definition.height));\r\n                uvs.push(0);\r\n\r\n                vertices.push((u - 0.5) * 2);\r\n                vertices.push(((v + (1 / this.definition.height)) - 0.5) * 2);\r\n                vertices.push(0);\r\n\r\n                uvs.push(u + (1 / this.definition.width));\r\n                uvs.push(v);\r\n                uvs.push(0);\r\n\r\n                vertices.push(((u + (1 / this.definition.width)) - 0.5) * 2);\r\n                vertices.push((v - 0.5) * 2);\r\n                vertices.push(0);\r\n\r\n                uvs.push(u + (1 / this.definition.width));\r\n                uvs.push(v + (1 / this.definition.height));\r\n                uvs.push(0);\r\n\r\n                vertices.push(((u + (1 / this.definition.width)) - 0.5) * 2);\r\n                vertices.push(((v + (1 / this.definition.height)) - 0.5) * 2);\r\n                vertices.push(0);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This method enables and binds our attributes buffers\r\n     ***/\r\n    initializeBuffers() {\r\n        if(!this.attributes) return;\r\n\r\n        // loop through our attributes\r\n        for(const key in this.attributes) {\r\n            // bind attribute buffer\r\n            this.gl.enableVertexAttribArray(this.attributes[key].location);\r\n\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.attributes[key].buffer);\r\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.attributes[key].array), this.gl.STATIC_DRAW);\r\n\r\n            // set where the attribute gets its data\r\n            this.gl.vertexAttribPointer(this.attributes[key].location, this.attributes[key].size, this.gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // update current buffers ID\r\n        this.renderer.state.currentGeometryID = this.definition.id;\r\n    }\r\n\r\n\r\n    /***\r\n     Used inside our draw call to set the correct plane buffers before drawing it\r\n     ***/\r\n    bindBuffers() {\r\n        if(this._vao) {\r\n            if(this.renderer._isWebGL2) {\r\n                this.gl.bindVertexArray(this._vao);\r\n            }\r\n            else {\r\n                this.renderer.extensions['OES_vertex_array_object'].bindVertexArrayOES(this._vao);\r\n            }\r\n        }\r\n        else {\r\n            // loop through our attributes to bind the buffers and set the attribute pointer\r\n            for(const key in this.attributes) {\r\n                this.gl.enableVertexAttribArray(this.attributes[key].location);\r\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.attributes[key].buffer);\r\n                this.gl.vertexAttribPointer(this.attributes[key].location, this.attributes[key].size, this.gl.FLOAT, false, 0, 0);\r\n            }\r\n        }\r\n\r\n        // update current buffers ID\r\n        this.renderer.state.currentGeometryID = this.definition.id;\r\n    }\r\n\r\n\r\n    /***\r\n     Draw a geometry\r\n     ***/\r\n    draw() {\r\n        this.gl.drawArrays(this.gl.TRIANGLES, 0, this.attributes.vertexPosition.numberOfItems);\r\n    }\r\n\r\n\r\n    /***\r\n     Dispose a geometry (ie delete its vertex array objects and buffers)\r\n     ***/\r\n    dispose() {\r\n        // delete buffers\r\n        // each time we check for existing properties to avoid errors\r\n        if(this._vao) {\r\n            if(this.renderer._isWebGL2) {\r\n                this.gl.deleteVertexArray(this._vao);\r\n            }\r\n            else {\r\n                this.renderer.extensions['OES_vertex_array_object'].deleteVertexArrayOES(this._vao);\r\n            }\r\n        }\r\n\r\n        for(const key in this.attributes) {\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.attributes[key].buffer);\r\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, 1, this.gl.STATIC_DRAW);\r\n            this.gl.deleteBuffer(this.attributes[key].buffer);\r\n        }\r\n\r\n        this.attributes = null;\r\n\r\n        // update current buffers ID\r\n        this.renderer.state.currentGeometryID = null;\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/Geometry.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/Mesh.js":
/*!***************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/Mesh.js ***!
  \***************************************************/
/*! exports provided: Mesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mesh\", function() { return Mesh; });\n/* harmony import */ var _Program_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Program.js */ \"../node_modules/curtainsjs/src/core/Program.js\");\n/* harmony import */ var _Geometry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Geometry.js */ \"../node_modules/curtainsjs/src/core/Geometry.js\");\n/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Texture.js */ \"../node_modules/curtainsjs/src/core/Texture.js\");\n/* harmony import */ var _loaders_PlaneTextureLoader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../loaders/PlaneTextureLoader.js */ \"../node_modules/curtainsjs/src/loaders/PlaneTextureLoader.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/***\r\n Here we create our Mesh object\r\n We will create an object containing the program that handles shaders and uniforms, a geometry that handles attributes\r\n Also handles anything that relates to textures creation and basic drawing operations\r\n\r\n params:\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n @type (string): Object type (should be either \"Plane\" or \"ShaderPass\")\r\n\r\n @shareProgram (bool): Whether the mesh should share its program with other meshes. Results in only one program compilation for multiple meshes, but all their uniforms need to be updated at runtime\r\n @vertexShaderID (string, optional): the vertex shader script ID. If not specified, will look for a data attribute data-vs-id on the plane HTML element.\r\n @fragmentShaderID (string, optional): the fragment shader script ID. If not specified, will look for a data attribute data-fs-id on the plane HTML element.\r\n @vertexShader (string, optional): the vertex shader as a string. Will look for a vertexShaderID if not specified.\r\n @fragmentShader (string, optional): the fragment shader as a string. Will look for a fragmentShaderID if not specified.\r\n @uniforms (object, optional): the uniforms that will be passed to the shaders.\r\n @widthSegments (int, optional): mesh definition along the X axis (1 by default)\r\n @heightSegments (int, optional): mesh definition along the Y axis (1 by default)\r\n @renderOrder (int, optional): mesh render order in the scene draw stacks (0 by default)\r\n @depthTest (bool, optional): if the mesh should enable or disable the depth test. Default to true.\r\n @cullFace (string, optional): which face of the mesh should be culled. Could either be \"back\", \"front\" or \"none\". Default to \"back\".\r\n @texturesOptions (object, optional): options and parameters to apply to the textures loaded by the mesh's loader. See the Texture class object.\r\n @crossorigin (string, optional): defines the crossOrigin process to load images if any (default to \"anonymous\").\r\n\r\n returns:\r\n @this: our Mesh element\r\n ***/\r\nclass Mesh {\r\n    constructor(renderer, type = \"Mesh\", {\r\n        // program\r\n        shareProgram = false,\r\n        vertexShaderID,\r\n        fragmentShaderID,\r\n        vertexShader,\r\n        fragmentShader,\r\n        uniforms = {},\r\n\r\n        // geometry\r\n        widthSegments = 1,\r\n        heightSegments = 1,\r\n\r\n        // render order\r\n        renderOrder,\r\n\r\n        // drawing\r\n        depthTest = true,\r\n        cullFace = \"back\",\r\n\r\n        // textures\r\n        texturesOptions = {},\r\n        crossOrigin = \"anonymous\"\r\n    } = {}) {\r\n        this.type = type;\r\n\r\n        // we could pass our curtains object OR our curtains renderer object\r\n        renderer = renderer && renderer.renderer || renderer;\r\n\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"throwError\"])(this.type + \": Curtains not passed as first argument or Curtains Renderer is missing\", renderer);\r\n            // no renderer, we can't use the renderer nextRender method\r\n            setTimeout(() => {\r\n                if(this._onErrorCallback) {\r\n                    this._onErrorCallback();\r\n                }\r\n            }, 0);\r\n        }\r\n        this.renderer = renderer;\r\n        this.gl = this.renderer.gl;\r\n\r\n        if(!this.gl) {\r\n            if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"throwError\"])(this.type + \": Unable to create a \" + this.type + \" because the Renderer WebGl context is not defined\");\r\n\r\n            // we should assume there's still no renderer here, so no nextRender method\r\n            setTimeout(() => {\r\n                if(this._onErrorCallback) {\r\n                    this._onErrorCallback();\r\n                }\r\n            }, 0);\r\n        }\r\n\r\n        this._canDraw = false;\r\n        this.renderOrder = renderOrder;\r\n\r\n        // whether to share programs or not (could enhance performance if a lot of planes use the same shaders)\r\n        this.shareProgram = shareProgram;\r\n\r\n        // depth test\r\n        this._depthTest = depthTest;\r\n        // face culling\r\n        this.cullFace = cullFace;\r\n        if(\r\n            this.cullFace !== \"back\"\r\n            && this.cullFace !== \"front\"\r\n            && this.cullFace !== \"none\"\r\n        ) {\r\n            this.cullFace = \"back\";\r\n        }\r\n\r\n        // textures\r\n        this.textures = [];\r\n        // default textures options depends on the type of Mesh and WebGL context\r\n        texturesOptions = Object.assign({\r\n            premultiplyAlpha: false,\r\n            anisotropy: 1,\r\n\r\n            floatingPoint: \"none\", // accepts \"none\", \"half-float\" or \"float\"\r\n\r\n            wrapS: this.gl.CLAMP_TO_EDGE,\r\n            wrapT: this.gl.CLAMP_TO_EDGE,\r\n\r\n            minFilter: this.gl.LINEAR,\r\n            magFilter: this.gl.LINEAR,\r\n        }, texturesOptions);\r\n\r\n        this._texturesOptions = texturesOptions;\r\n        this.crossOrigin = crossOrigin;\r\n\r\n        // handling shaders\r\n        if(!vertexShader && vertexShaderID && document.getElementById(vertexShaderID)) {\r\n            vertexShader = document.getElementById(vertexShaderID).innerHTML;\r\n        }\r\n\r\n        if(!fragmentShader && fragmentShaderID && document.getElementById(fragmentShaderID)) {\r\n            fragmentShader = document.getElementById(fragmentShaderID).innerHTML;\r\n        }\r\n\r\n        // init sizes and loader\r\n        this._initMesh();\r\n\r\n        // geometry\r\n        // set plane attributes\r\n        widthSegments = parseInt(widthSegments);\r\n        heightSegments = parseInt(heightSegments);\r\n        this._geometry = new _Geometry_js__WEBPACK_IMPORTED_MODULE_1__[\"Geometry\"](this.renderer, {\r\n            width: widthSegments,\r\n            height: heightSegments,\r\n            // using a special ID for shader passes to avoid weird buffer binding bugs on mac devices\r\n            //id: this.type === \"ShaderPass\" ? 1 : widthSegments * heightSegments + widthSegments\r\n        });\r\n\r\n        this._program = new _Program_js__WEBPACK_IMPORTED_MODULE_0__[\"Program\"](this.renderer, {\r\n            parent: this,\r\n            vertexShader: vertexShader,\r\n            fragmentShader: fragmentShader,\r\n        });\r\n\r\n        if(this._program.compiled) {\r\n            // create and set program uniforms\r\n            this._program.createUniforms(uniforms);\r\n\r\n            // make uniforms accessible directly\r\n            this.uniforms = this._program.uniformsManager.uniforms;\r\n\r\n            // geometry\r\n            // set plane attributes\r\n            this._geometry.setProgram(this._program);\r\n\r\n            // we've added a new object, keep Curtains class in sync with our renderer\r\n            this.renderer.onSceneChange();\r\n        }\r\n        else {\r\n            this.renderer.nextRender.add(() => this._onErrorCallback && this._onErrorCallback());\r\n        }\r\n    }\r\n\r\n    _initMesh() {\r\n        this.uuid = Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"generateUUID\"])();\r\n\r\n        // our Loader Class that will handle all medias loading process\r\n        this.loader = new _loaders_PlaneTextureLoader_js__WEBPACK_IMPORTED_MODULE_3__[\"PlaneTextureLoader\"](this.renderer, this, {\r\n            sourcesLoaded: 0,\r\n            initSourcesToLoad: 0, // will change if there's any texture to load on init\r\n            complete: false,\r\n            onComplete: () => {\r\n                this._onReadyCallback && this._onReadyCallback();\r\n\r\n                this.renderer.needRender();\r\n            }\r\n        });\r\n\r\n        this.images = [];\r\n        this.videos = [];\r\n        this.canvases = [];\r\n\r\n\r\n        // allow the user to add custom data to the plane\r\n        this.userData = {};\r\n\r\n        this._canDraw = true;\r\n    }\r\n\r\n\r\n    /*** RESTORING CONTEXT ***/\r\n\r\n    /***\r\n     Used internally to handle context restoration\r\n     ***/\r\n    _restoreContext() {\r\n        this._canDraw = false;\r\n\r\n        if(this._matrices) {\r\n            this._matrices = null;\r\n        }\r\n\r\n        // reset the used program based on our previous shaders code strings\r\n        this._program = new _Program_js__WEBPACK_IMPORTED_MODULE_0__[\"Program\"](this.renderer, {\r\n            parent: this,\r\n            vertexShader: this._program.vsCode,\r\n            fragmentShader: this._program.fsCode\r\n        });\r\n\r\n        if(this._program.compiled) {\r\n            // reset geometry\r\n            this._geometry.restoreContext(this._program);\r\n\r\n            // create and set program uniforms\r\n            this._program.createUniforms(this.uniforms);\r\n\r\n            // make uniforms accessible directly\r\n            this.uniforms = this._program.uniformsManager.uniforms;\r\n\r\n            // program restored callback of Planes and ShaderPasses\r\n            this._programRestored();\r\n        }\r\n    }\r\n\r\n    /***\r\n     This function adds a render target to a mesh\r\n\r\n     params :\r\n     @renderTarger (RenderTarget): the render target to add to that mesh\r\n     ***/\r\n    setRenderTarget(renderTarget) {\r\n        if(!renderTarget || renderTarget.type !== \"RenderTarget\") {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"throwWarning\"])(this.type + \": Could not set the render target because the argument passed is not a RenderTarget class object\", renderTarget);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if(this.type === \"Plane\") {\r\n            // remove from scene stacks\r\n            this.renderer.scene.removePlane(this);\r\n        }\r\n\r\n        this.target = renderTarget;\r\n\r\n        if(this.type === \"Plane\") {\r\n            // add to scene stacks again\r\n            this.renderer.scene.addPlane(this);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Set the mesh render order to draw it above or behind other meshes\r\n\r\n     params :\r\n     @renderOrder (int): new render order to apply: higher number means a mesh is drawn on top of others\r\n     ***/\r\n    setRenderOrder(renderOrder = 0) {\r\n        renderOrder = isNaN(renderOrder) ? this.renderOrder : parseInt(renderOrder);\r\n\r\n        if(renderOrder !== this.renderOrder) {\r\n            this.renderOrder = renderOrder;\r\n            this.renderer.scene.setPlaneRenderOrder(this);\r\n        }\r\n    }\r\n\r\n\r\n    /*** IMAGES, VIDEOS AND CANVASES LOADING ***/\r\n\r\n    /***\r\n     This method creates a new Texture and adds it to the mesh\r\n\r\n     params :\r\n     @textureOptions (object, optional) : Parameters to apply to that texture (see Texture class). Will be merged with the mesh default textures options\r\n\r\n     returns :\r\n     @texture: our newly created texture\r\n     ***/\r\n    createTexture(textureOptions = {}) {\r\n        // create a new texture with the specified options\r\n        const texture = new _Texture_js__WEBPACK_IMPORTED_MODULE_2__[\"Texture\"](this.renderer, Object.assign(this._texturesOptions, textureOptions));\r\n        // add the texture to the mesh\r\n        texture.addParent(this);\r\n\r\n        return texture;\r\n    }\r\n\r\n\r\n    /***\r\n     Shortcut for addParent() Texture class method\r\n     ***/\r\n    addTexture(texture) {\r\n        if(!texture || texture.type !== \"Texture\") {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"throwWarning\"])(this.type + \": cannot add \", texture, \" to this \" + this.type + \" because it is not a valid texture\");\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        texture.addParent(this);\r\n    }\r\n\r\n\r\n    /***\r\n     This method handles the sources loading process\r\n\r\n     params :\r\n     @sourcesArray (array): array of html images, videos or canvases elements\r\n     @texturesOptions (object, optional) : Parameters to apply to those textures (see Texture class). Will be merged with the mesh default textures options\r\n     @successCallback (function): callback to execute on source loading success\r\n     @errorCallback (function): callback to execute on source loading error\r\n     ***/\r\n    loadSources(sourcesArray, texturesOptions = {}, successCallback, errorCallback) {\r\n        for(let i = 0; i < sourcesArray.length; i++) {\r\n            this.loadSource(sourcesArray[i], texturesOptions, successCallback, errorCallback);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads one source using our mesh loader (see PlaneTextureLoader class)\r\n\r\n     params :\r\n     @source (html element) : html image, video or canvas element\r\n     @textureOptions (object, optional) : Parameters to apply to that texture (see Texture class). Will be merged with the mesh default textures options\r\n     @successCallback (function): callback to execute on source loading success\r\n     @errorCallback (function): callback to execute on source loading error\r\n     ***/\r\n    loadSource(source, textureOptions = {}, successCallback, errorCallback) {\r\n        this.loader.loadSource(source, Object.assign(this._texturesOptions, textureOptions), (texture) => {\r\n            successCallback && successCallback(texture);\r\n        }, (source, error) => {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"throwWarning\"])(this.type + \": this HTML tag could not be converted into a texture:\", source.tagName);\r\n            }\r\n\r\n            errorCallback && errorCallback(source, error);\r\n        });\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads an image using our mesh loader (see PlaneTextureLoader class)\r\n\r\n     params :\r\n     @source (image) : html image element\r\n     @textureOptions (object, optional) : Parameters to apply to that texture (see Texture class). Will be merged with the mesh default textures options\r\n     @successCallback (function): callback to execute on source loading success\r\n     @errorCallback (function): callback to execute on source loading error\r\n     ***/\r\n    loadImage(source, textureOptions = {}, successCallback, errorCallback) {\r\n        this.loader.loadImage(source, Object.assign(this._texturesOptions, textureOptions), (texture) => {\r\n            successCallback && successCallback(texture);\r\n        }, (source, error) => {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"throwWarning\"])(this.type + \": There has been an error:\\n\", error, \"\\nwhile loading this image:\\n\", source);\r\n            }\r\n\r\n            errorCallback && errorCallback(source, error);\r\n        });\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads a video using the mesh loader (see PlaneTextureLoader class)\r\n\r\n     params :\r\n     @source (video) : html video element\r\n     @textureOptions (object, optional) : Parameters to apply to that texture (see Texture class). Will be merged with the mesh default textures options\r\n     @successCallback (function): callback to execute on source loading success\r\n     @errorCallback (function): callback to execute on source loading error\r\n     ***/\r\n    loadVideo(source, textureOptions = {}, successCallback, errorCallback) {\r\n        this.loader.loadVideo(source, Object.assign(this._texturesOptions, textureOptions), (texture) => {\r\n            successCallback && successCallback(texture);\r\n        }, (source, error) => {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"throwWarning\"])(this.type + \": There has been an error:\\n\", error, \"\\nwhile loading this video:\\n\", source);\r\n            }\r\n\r\n            errorCallback && errorCallback(source, error);\r\n        });\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads a canvas using the mesh loader (see PlaneTextureLoader class)\r\n\r\n     params :\r\n     @source (canvas) : html canvas element\r\n     @textureOptions (object, optional) : Parameters to apply to that texture (see Texture class). Will be merged with the mesh default textures options\r\n     @successCallback (function): callback to execute on source loading success\r\n     ***/\r\n    loadCanvas(source, textureOptions = {}, successCallback) {\r\n        this.loader.loadCanvas(source, Object.assign(this._texturesOptions, textureOptions), (texture) => {\r\n            successCallback && successCallback(texture);\r\n        });\r\n    }\r\n\r\n\r\n    /*** LOAD ARRAYS ***/\r\n\r\n    /***\r\n     Loads an array of images\r\n\r\n     params :\r\n     @imagesArray (array) : array of html image elements\r\n     @texturesOptions (object, optional) : Parameters to apply to those textures (see Texture class). Will be merged with the mesh default textures options\r\n     @successCallback (function): callback to execute on source loading success\r\n     @errorCallback (function): callback to execute on source loading error\r\n     ***/\r\n    loadImages(imagesArray, texturesOptions = {}, successCallback, errorCallback) {\r\n        for(let i = 0; i < imagesArray.length; i++) {\r\n            this.loadImage(imagesArray[i], texturesOptions, successCallback, errorCallback);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Loads an array of videos\r\n\r\n     params :\r\n     @videosArray (array) : array of html video elements\r\n     @texturesOptions (object, optional) : Parameters to apply to those textures (see Texture class). Will be merged with the mesh default textures options\r\n     @successCallback (function): callback to execute on source loading success\r\n     @errorCallback (function): callback to execute on source loading error\r\n     ***/\r\n    loadVideos(videosArray, texturesOptions = {}, successCallback, errorCallback) {\r\n        for(let i = 0; i < videosArray.length; i++) {\r\n            this.loadVideo(videosArray[i], texturesOptions, successCallback, errorCallback);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Loads an array of canvases\r\n\r\n     params :\r\n     @canvasesArray (array) : array of html canvas elements\r\n     @texturesOptions (object, optional) : Parameters to apply to those textures (see Texture class). Will be merged with the mesh default textures options\r\n     @successCallback (function): callback to execute on source loading success\r\n     @errorCallback (function): callback to execute on source loading error\r\n     ***/\r\n    loadCanvases(canvasesArray, texturesOptions = {}, successCallback) {\r\n        for(let i = 0; i < canvasesArray.length; i++) {\r\n            this.loadCanvas(canvasesArray[i], texturesOptions, successCallback);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This has to be called in order to play the planes videos\r\n     We need this because on mobile devices we can't start playing a video without a user action\r\n     Once the video has started playing we set an interval and update a new frame to our our texture at a 30FPS rate\r\n     ***/\r\n    playVideos() {\r\n        for(let i = 0; i < this.textures.length; i++) {\r\n            const texture = this.textures[i];\r\n\r\n            if(texture.sourceType === \"video\") {\r\n                const playPromise = texture.source.play();\r\n\r\n                // In browsers that don’t yet support this functionality,\r\n                // playPromise won’t be defined.\r\n                if(playPromise !== undefined) {\r\n                    playPromise.catch((error) => {\r\n                        if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__[\"throwWarning\"])(this.type + \": Could not play the video : \", error);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /*** DRAW THE PLANE ***/\r\n\r\n    /***\r\n     We draw the plane, ie bind the buffers, set the active textures and draw it\r\n     ***/\r\n    _draw() {\r\n        // enable/disable depth test\r\n        this.renderer.setDepth(this._depthTest);\r\n\r\n        // face culling\r\n        this.renderer.setFaceCulling(this.cullFace);\r\n\r\n        // update all uniforms set up by the user\r\n        this._program.updateUniforms();\r\n\r\n        // bind plane attributes buffers\r\n        // TODO ideally we should only bind the attributes buffers if the geometry changed\r\n        // however it is leading to some bugs on macOS & iOS and should therefore be tested extensively\r\n        // for now we'll disable this feature even tho it is ready to be used\r\n        //if(this.renderer.state.currentGeometryID !== this._geometry.definition.id || this.renderer.state.forceBufferUpdate) {\r\n        this._geometry.bindBuffers();\r\n        this.renderer.state.forceBufferUpdate = false;\r\n        //}\r\n\r\n        // draw all our plane textures\r\n        for(let i = 0; i < this.textures.length; i++) {\r\n            // draw (bind and maybe update) our texture\r\n            this.textures[i]._draw();\r\n        }\r\n\r\n        // the draw call!\r\n        this._geometry.draw();\r\n\r\n        // reset active texture\r\n        this.renderer.state.activeTexture = null;\r\n\r\n        // callback after draw\r\n        this._onAfterRenderCallback && this._onAfterRenderCallback();\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n\r\n\r\n    /***\r\n     This is called each time a mesh can't be instanciated\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onError(callback) {\r\n        if(callback) {\r\n            this._onErrorCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This is called each time a mesh's image has been loaded. Useful to handle a loader\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onLoading(callback) {\r\n        if(callback) {\r\n            this._onLoadingCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     This is called when a mesh is ready to be drawn\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onReady(callback) {\r\n        if(callback) {\r\n            this._onReadyCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     This is called at each requestAnimationFrame call\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onRender(callback) {\r\n        if(callback) {\r\n            this._onRenderCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     This is called at each requestAnimationFrame call for each mesh after the draw call\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onAfterRender(callback) {\r\n        if(callback) {\r\n            this._onAfterRenderCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /*** DESTROYING ***/\r\n\r\n    /***\r\n     Remove an element by calling the appropriate renderer method\r\n     ***/\r\n    remove() {\r\n        // first we want to stop drawing it\r\n        this._canDraw = false;\r\n\r\n        // force unbinding frame buffer\r\n        if(this.target) {\r\n            this.renderer.bindFrameBuffer(null);\r\n        }\r\n\r\n        // delete all the webgl bindings\r\n        this._dispose();\r\n\r\n        if(this.type === \"Plane\") {\r\n            this.renderer.removePlane(this);\r\n        }\r\n        else if(this.type === \"ShaderPass\") {\r\n            // remove its render target first\r\n            if(this.target) {\r\n                this.target._shaderPass = null;\r\n                this.target.remove();\r\n                this.target = null;\r\n            }\r\n\r\n            this.renderer.removeShaderPass(this);\r\n        }\r\n    }\r\n\r\n    /***\r\n     This deletes all our mesh webgl bindings and its textures\r\n     ***/\r\n    _dispose() {\r\n        if(this.gl) {\r\n            // dispose our geometry\r\n            this._geometry && this._geometry.dispose();\r\n\r\n            if(this.target && this.type === \"ShaderPass\") {\r\n                this.renderer.removeRenderTarget(this.target);\r\n                // remove the first texture since it has been deleted with the render target\r\n                this.textures.shift();\r\n            }\r\n\r\n            // unbind and delete the textures\r\n            for(let i = 0; i < this.textures.length; i++) {\r\n                this.textures[i]._dispose();\r\n            }\r\n            this.textures = null;\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/Mesh.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/Plane.js":
/*!****************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/Plane.js ***!
  \****************************************************/
/*! exports provided: Plane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Plane\", function() { return Plane; });\n/* harmony import */ var _DOMMesh_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DOMMesh.js */ \"../node_modules/curtainsjs/src/core/DOMMesh.js\");\n/* harmony import */ var _camera_Camera_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../camera/Camera.js */ \"../node_modules/curtainsjs/src/camera/Camera.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Mat4.js */ \"../node_modules/curtainsjs/src/math/Mat4.js\");\n/* harmony import */ var _math_Vec2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/Vec2.js */ \"../node_modules/curtainsjs/src/math/Vec2.js\");\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/Vec3.js */ \"../node_modules/curtainsjs/src/math/Vec3.js\");\n/* harmony import */ var _math_Quat_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../math/Quat.js */ \"../node_modules/curtainsjs/src/math/Quat.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/***\r\n Here we create our Plane object\r\n We will extend our DOMMesh class that handles all the WebGL part and basic HTML sizings\r\n\r\n Plane class will add:\r\n - sizing and positioning and everything that relates to the DOM like draw checks (frustum culling) and reenter/leave events\r\n - projection (using Camera class object) and view matrices and everything that is related like perspective, scale, rotation...\r\n\r\n params :\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n @plane (html element): the html element that we will use for our Plane object\r\n\r\n @Meshparams (object): see Mesh class object\r\n\r\n @alwaysDraw (boolean, optionnal): if the plane should always be drawn or if it should use frustum culling. Default to false.\r\n @visible (boolean, optional): if the plane should be drawn or not. Default to true.\r\n @transparent (boolean, optional): if the plane should handle transparency. Default to false.\r\n @drawCheckMargins (object, optional): defines the margins in pixels to add to the frustum culling check to determine if the plane should be drawn. Default to 0.\r\n @autoloadSources (boolean, optional): if the sources should be loaded on init automatically. Default to true\r\n @watchScroll (boolean, optional): if the plane should auto update its position based on the scroll value. Default to true.\r\n @fov (float, optional): defines the perspective field of view used by the camera. Default to 50.\r\n\r\n returns :\r\n @this: our Plane\r\n ***/\r\nclass Plane extends _DOMMesh_js__WEBPACK_IMPORTED_MODULE_0__[\"DOMMesh\"] {\r\n    constructor(renderer, htmlElement, {\r\n        // Mesh params\r\n        shareProgram,\r\n        widthSegments,\r\n        heightSegments,\r\n        renderOrder = 0,\r\n        depthTest,\r\n        cullFace,\r\n        uniforms,\r\n        vertexShaderID,\r\n        fragmentShaderID,\r\n        vertexShader,\r\n        fragmentShader,\r\n        texturesOptions,\r\n        crossOrigin,\r\n\r\n        // Plane specific params\r\n        alwaysDraw = false,\r\n        visible = true,\r\n        transparent = false,\r\n        drawCheckMargins = {\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n        },\r\n        autoloadSources = true,\r\n        watchScroll = true,\r\n        fov = 50,\r\n    } = {}) {\r\n        super(renderer, htmlElement, \"Plane\", {\r\n            shareProgram,\r\n            widthSegments,\r\n            heightSegments,\r\n            renderOrder,\r\n            depthTest,\r\n            cullFace,\r\n            uniforms,\r\n            vertexShaderID,\r\n            fragmentShaderID,\r\n            vertexShader,\r\n            fragmentShader,\r\n            texturesOptions,\r\n            crossOrigin,\r\n        });\r\n\r\n        this.index = this.renderer.planes.length;\r\n\r\n        // used for FBOs\r\n        this.target = null;\r\n\r\n        // use frustum culling or not\r\n        this.alwaysDraw = alwaysDraw;\r\n        // should draw is set to true by default, we'll check it later\r\n        this._shouldDraw = true;\r\n\r\n        this.visible = visible;\r\n\r\n        // if the plane has transparency\r\n        this._transparent = transparent;\r\n\r\n        // draw check margins in pixels\r\n        // positive numbers means it can be displayed even when outside the viewport\r\n        // negative numbers means it can be hidden even when inside the viewport\r\n        this.drawCheckMargins = drawCheckMargins;\r\n\r\n        // if we decide to load all sources on init or let the user do it manually\r\n        this.autoloadSources = autoloadSources;\r\n\r\n        // if we should watch scroll\r\n        this.watchScroll = watchScroll;\r\n\r\n        // define if we should update the plane's matrices when called in the draw loop\r\n        this._updateMVMatrix = false;\r\n\r\n        // init camera\r\n        this.camera = new _camera_Camera_js__WEBPACK_IMPORTED_MODULE_1__[\"Camera\"]({\r\n            fov: fov,\r\n            width: this.renderer._boundingRect.width,\r\n            height: this.renderer._boundingRect.height,\r\n            pixelRatio: this.renderer.pixelRatio,\r\n        });\r\n\r\n        // if program is valid, go on\r\n        if(this._program.compiled) {\r\n            // init our plane\r\n            this._initPlane();\r\n\r\n            // add our plane to the scene stack and the renderer array\r\n            this.renderer.scene.addPlane(this);\r\n            this.renderer.planes.push(this);\r\n        }\r\n    }\r\n\r\n\r\n    /*** RESTORING CONTEXT ***/\r\n\r\n    /***\r\n     Used internally to handle context restoration after the program has been successfully compiled again\r\n     ***/\r\n    _programRestored() {\r\n        if(this.target) {\r\n            // reset its render target if needed\r\n            this.setRenderTarget(this.renderer.renderTargets[this.target.index]);\r\n        }\r\n\r\n        this._initMatrices();\r\n\r\n        // set our initial perspective matrix\r\n        this.setPerspective(this.camera.fov, this.camera.near, this.camera.far);\r\n\r\n        this._applyWorldPositions();\r\n\r\n        // add the plane to our draw stack again as it have been emptied\r\n        this.renderer.scene.addPlane(this);\r\n\r\n        // reset textures\r\n        for(let i = 0; i < this.textures.length; i++) {\r\n            this.textures[i]._parent = this;\r\n            this.textures[i]._restoreContext();\r\n        }\r\n\r\n        this._canDraw = true;\r\n    }\r\n\r\n    /***\r\n     Init our basic plane values (transformations, positions, camera, sources)\r\n     ***/\r\n    _initPlane() {\r\n        // init transformation values\r\n        this._initTransformValues();\r\n\r\n        // init its position values\r\n        this._initPositions();\r\n        // set camera values\r\n        this.setPerspective(this.camera.fov, this.camera.near, this.camera.far);\r\n        // load sources\r\n        this._initSources();\r\n    }\r\n\r\n\r\n    /*** TRANSFORMATIONS, PROJECTION & MATRICES ***/\r\n\r\n    /***\r\n     Set/reset plane's transformation values: rotation, scale, translation, transform origin\r\n     ***/\r\n    _initTransformValues() {\r\n        this.rotation = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"]();\r\n\r\n        // initial quaternion\r\n        this.quaternion = new _math_Quat_js__WEBPACK_IMPORTED_MODULE_5__[\"Quat\"]();\r\n\r\n        // translation in viewport coordinates\r\n        this.relativeTranslation = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"]();\r\n\r\n        // translation in webgl coordinates\r\n        this._translation = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"]();\r\n\r\n        // scale is a Vec3 with z always equal to 1\r\n        this.scale = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](1, 1, 1);\r\n\r\n        // set plane transform origin to center\r\n        this.transformOrigin = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](0.5, 0.5, 0);\r\n    }\r\n\r\n\r\n    /***\r\n     Reset our plane transformation values and HTML element if specified (and valid)\r\n\r\n     params :\r\n     @htmlElement (HTML element, optional) : if provided, new HTML element to use as a reference for sizes and position syncing.\r\n     ***/\r\n    resetPlane(htmlElement) {\r\n        this._initTransformValues();\r\n\r\n        if(htmlElement !== null && !!htmlElement) {\r\n            this.htmlElement = htmlElement;\r\n\r\n            this.updatePosition();\r\n        }\r\n        else if(!htmlElement && !this.renderer.production) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__[\"throwWarning\"])(this.type + \": You are trying to reset a plane with a HTML element that does not exist. The old HTML element will be kept instead.\");\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This function removes the plane current render target\r\n     ***/\r\n    removeRenderTarget() {\r\n        if(this.target) {\r\n            // reset our planes stacks\r\n            this.renderer.scene.removePlane(this);\r\n            this.target = null;\r\n            this.renderer.scene.addPlane(this);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Init our plane position: set its matrices, its position and perspective\r\n     ***/\r\n    _initPositions() {\r\n        // set its matrices\r\n        this._initMatrices();\r\n\r\n        // apply our css positions\r\n        this._applyWorldPositions();\r\n    }\r\n\r\n\r\n    /***\r\n     Init our plane model view and projection matrices and set their uniform locations\r\n     ***/\r\n    _initMatrices() {\r\n        // create our model view and projection matrix\r\n        this._matrices = {\r\n            mvMatrix: {\r\n                name: \"uMVMatrix\",\r\n                matrix: new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_2__[\"Mat4\"](),\r\n                location: this.gl.getUniformLocation(this._program.program, \"uMVMatrix\"),\r\n            },\r\n            pMatrix: {\r\n                name: \"uPMatrix\",\r\n                matrix: new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_2__[\"Mat4\"](), // will be set after\r\n                location: this.gl.getUniformLocation(this._program.program, \"uPMatrix\"),\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Set our plane dimensions and positions relative to clip spaces\r\n     ***/\r\n    _setWorldSizes() {\r\n        // dimensions and positions of our plane in the document and clip spaces\r\n        // don't forget translations in webgl space are referring to the center of our plane and canvas\r\n        const planeCenter = {\r\n            x: (this._boundingRect.document.width / 2) + this._boundingRect.document.left,\r\n            y: (this._boundingRect.document.height / 2) + this._boundingRect.document.top,\r\n        };\r\n\r\n        const containerCenter = {\r\n            x: (this.renderer._boundingRect.width / 2) + this.renderer._boundingRect.left,\r\n            y: (this.renderer._boundingRect.height / 2) + this.renderer._boundingRect.top,\r\n        };\r\n\r\n        // our plane clip space informations\r\n        this._boundingRect.world = {\r\n            width: this._boundingRect.document.width / this.renderer._boundingRect.width,\r\n            height: this._boundingRect.document.height / this.renderer._boundingRect.height,\r\n            top: (containerCenter.y - planeCenter.y) / this.renderer._boundingRect.height,\r\n            left: (planeCenter.x - containerCenter.x) / this.renderer._boundingRect.height,\r\n        };\r\n\r\n        // since our vertices values range from -1 to 1\r\n        // we need to scale them under the hood relatively to our canvas\r\n        // to display an accurately sized plane\r\n        this._boundingRect.world.scale = {\r\n            x: (this.renderer._boundingRect.width / this.renderer._boundingRect.height) * this._boundingRect.world.width / 2,\r\n            y: this._boundingRect.world.height / 2,\r\n        };\r\n    }\r\n\r\n\r\n\r\n    /*** PLANES PERSPECTIVES, SCALES AND ROTATIONS ***/\r\n\r\n    /***\r\n     This will set our perspective matrix and update our perspective matrix uniform\r\n     used internally at each draw call if needed\r\n     ***/\r\n    _setPerspectiveMatrix() {\r\n        // update our matrix uniform only if we share programs or if we actually have updated its values\r\n        if(this.shareProgram || !this.shareProgram && this.camera._shouldUpdate) {\r\n            this.renderer.useProgram(this._program);\r\n            this.gl.uniformMatrix4fv(this._matrices.pMatrix.location, false, this._matrices.pMatrix.matrix.elements);\r\n        }\r\n\r\n        // reset camera shouldUpdate flag\r\n        this.camera.cancelUpdate();\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our perspective matrix new parameters (fov, near plane and far plane)\r\n     used internally but can be used externally as well to change fov for example\r\n\r\n     params :\r\n     @fov (float): the field of view\r\n     @near (float): the nearest point where object are displayed\r\n     @far (float): the farthest point where object are displayed\r\n     ***/\r\n    setPerspective(fov, near, far) {\r\n        this.camera.setPerspective(fov, near, far, this.renderer._boundingRect.width, this.renderer._boundingRect.height, this.renderer.pixelRatio);\r\n\r\n        // force camera update on context restoration\r\n        if(this.renderer.state.isContextLost) {\r\n            this.camera.forceUpdate();\r\n        }\r\n\r\n        this._matrices.pMatrix.matrix = this.camera.projectionMatrix;\r\n\r\n        // if camera settings changed update the mvMatrix as well cause we need to update z translation based on new fov\r\n        this._updateMVMatrix = this.camera._shouldUpdate;\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our model view matrix\r\n     used internally at each draw call if needed\r\n     It will calculate our matrix based on its plane translation, rotation and scale\r\n     ***/\r\n    _setMVMatrix() {\r\n        if(this._updateMVMatrix) {\r\n            // translation\r\n            // along the Z axis it's based on the relativeTranslation.z, CSSPerspective and camera Z position values\r\n            // we're computing it here because it will change when our fov changes\r\n            this._translation.z = -((1 - (this.relativeTranslation.z / this.camera.CSSPerspective)) / this.camera.position.z);\r\n\r\n            // get transformation origin relative to world space\r\n            const origin = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](\r\n                (this.transformOrigin.x * 2 - 1) // between -1 and 1\r\n                * this._boundingRect.world.scale.x,\r\n                -(this.transformOrigin.y * 2 - 1) // between -1 and 1\r\n                * this._boundingRect.world.scale.y,\r\n                this.transformOrigin.z\r\n            );\r\n\r\n            // get our transformation matrix\r\n            let transformFromOrigin = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_2__[\"Mat4\"]().composeFromOrigin(this._translation, this.quaternion, this.scale, origin);\r\n\r\n            // now scale our plane according to its world bounding rect\r\n            const scaleMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_2__[\"Mat4\"]([\r\n                this._boundingRect.world.scale.x, 0, 0, 0,\r\n                0, this._boundingRect.world.scale.y, 0, 0,\r\n                0, 0, 1, 0,\r\n                0, 0, 0, 1\r\n            ]);\r\n\r\n            // we've got our model view matrix\r\n            this._matrices.mvMatrix.matrix = transformFromOrigin.multiply(scaleMatrix);\r\n\r\n            // this is the result of our projection matrix * our mv matrix, useful for bounding box calculations and frustum culling\r\n            this._matrices.mVPMatrix = this._matrices.pMatrix.matrix.multiply(this._matrices.mvMatrix.matrix);\r\n\r\n            // check if we should draw the plane but only if everything has been initialized\r\n            if(!this.alwaysDraw) {\r\n                this._shouldDrawCheck();\r\n            }\r\n        }\r\n\r\n        // update our matrix uniform only if we share programs or if we actually have updated its values\r\n        if(this.shareProgram || !this.shareProgram && this._updateMVMatrix) {\r\n            this.renderer.useProgram(this._program);\r\n            this.gl.uniformMatrix4fv(this._matrices.mvMatrix.location, false, this._matrices.mvMatrix.matrix.elements);\r\n        }\r\n\r\n        // reset our flag\r\n        this._updateMVMatrix = false;\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our plane scale\r\n     used internally but can be used externally as well\r\n\r\n     params :\r\n     @scale (Vec2 object): scale to apply on X and Y axes\r\n     ***/\r\n    setScale(scale) {\r\n        if(!scale.type || scale.type !== \"Vec2\") {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__[\"throwWarning\"])(this.type + \": Cannot set scale because the parameter passed is not of Vec2 type:\", scale);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        scale.sanitizeNaNValuesWith(this.scale).max(new _math_Vec2_js__WEBPACK_IMPORTED_MODULE_3__[\"Vec2\"](0.001, 0.001));\r\n\r\n        // only apply if values changed\r\n        if(scale.x !== this.scale.x || scale.y !== this.scale.y) {\r\n            this.scale.set(scale.x, scale.y, 1);\r\n\r\n            // adjust textures size\r\n            for(let i = 0; i < this.textures.length; i++) {\r\n                this.textures[i].resize();\r\n            }\r\n\r\n            // we should update the plane mvMatrix\r\n            this._updateMVMatrix = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our plane rotation\r\n     used internally but can be used externally as well\r\n\r\n     params :\r\n     @rotation (Vec3 object): rotation to apply on X, Y and Z axes (in radians)\r\n     ***/\r\n    setRotation(rotation) {\r\n        if(!rotation.type || rotation.type !== \"Vec3\") {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__[\"throwWarning\"])(this.type + \": Cannot set rotation because the parameter passed is not of Vec3 type:\", rotation);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        rotation.sanitizeNaNValuesWith(this.rotation);\r\n\r\n        // only apply if values changed\r\n        if(!rotation.equals(this.rotation)) {\r\n            this.rotation.copy(rotation);\r\n\r\n            this.quaternion.setFromVec3(this.rotation);\r\n\r\n            // we should update the plane mvMatrix\r\n            this._updateMVMatrix = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our plane transform origin\r\n     (0, 0, 0) means plane's top left corner\r\n     (1, 1, 0) means plane's bottom right corner\r\n     (0.5, 0.5, -1) means behind plane's center\r\n\r\n     params :\r\n     @origin (Vec3 object): coordinate of transformation origin X, Y and Z axes\r\n     ***/\r\n    setTransformOrigin(origin) {\r\n        if(!origin.type || origin.type !== \"Vec3\") {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__[\"throwWarning\"])(this.type + \": Cannot set transform origin because the parameter passed is not of Vec3 type:\", origin);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        origin.sanitizeNaNValuesWith(this.transformOrigin);\r\n\r\n        if(!origin.equals(this.transformOrigin)) {\r\n            this.transformOrigin.copy(origin);\r\n\r\n            this._updateMVMatrix = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our plane translation by adding plane computed bounding box values and computed relative position values\r\n     ***/\r\n    _setTranslation() {\r\n        // avoid unnecessary calculations if we don't have a users set relative position\r\n        let worldPosition = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"]();\r\n        if(!this.relativeTranslation.equals(worldPosition)) {\r\n            worldPosition = this._documentToWorldSpace(this.relativeTranslation);\r\n        }\r\n\r\n        this._translation.set(\r\n            this._boundingRect.world.left + worldPosition.x,\r\n            this._boundingRect.world.top + worldPosition.y,\r\n            this._translation.z,\r\n        );\r\n\r\n        // we should update the plane mvMatrix\r\n        this._updateMVMatrix = true;\r\n    }\r\n\r\n\r\n    /***\r\n     This function takes pixel values along X and Y axis and convert them to clip space coordinates, and then apply the corresponding translation\r\n     TODO deprecated and will be removed soon\r\n\r\n     params :\r\n     @translation (Vec3): translation to apply on X, Y and Z axes\r\n     ***/\r\n    setRelativePosition(translation) {\r\n        if(!this.renderer.production) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__[\"throwWarning\"])(this.type + \": setRelativePosition() is deprecated, use setRelativeTranslation() instead\");\r\n        }\r\n\r\n        this.setRelativeTranslation(translation);\r\n    }\r\n\r\n\r\n    /***\r\n     This function takes pixel values along X and Y axis and convert them to clip space coordinates, and then apply the corresponding translation\r\n\r\n     params :\r\n     @translation (Vec3): translation to apply on X, Y and Z axes\r\n     ***/\r\n    setRelativeTranslation(translation) {\r\n        if(!translation.type || translation.type !== \"Vec3\") {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__[\"throwWarning\"])(this.type + \": Cannot set translation because the parameter passed is not of Vec3 type:\", translation);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        translation.sanitizeNaNValuesWith(this.relativeTranslation);\r\n\r\n        // only apply if values changed\r\n        if(!translation.equals(this.relativeTranslation)) {\r\n            this.relativeTranslation.copy(translation);\r\n\r\n            this._setTranslation();\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This function takes pixel values along X and Y axis and convert them to clip space coordinates\r\n\r\n     params :\r\n     @vector (Vec3): position to convert on X, Y and Z axes\r\n\r\n     returns :\r\n     @worldPosition: plane's position in WebGL space\r\n     ***/\r\n    _documentToWorldSpace(vector) {\r\n        const worldPosition = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](\r\n            vector.x / (this.renderer._boundingRect.width / this.renderer.pixelRatio) * (this.renderer._boundingRect.width / this.renderer._boundingRect.height),\r\n            -vector.y / (this.renderer._boundingRect.height / this.renderer.pixelRatio),\r\n            vector.z,\r\n        );\r\n\r\n        return worldPosition;\r\n    };\r\n\r\n\r\n    /*** FRUSTUM CULLING (DRAW CHECK) ***/\r\n\r\n\r\n    /***\r\n     Find the intersection point by adding a vector starting from a corner till we reach the near plane\r\n\r\n     params:\r\n     @refPoint (Vec3 class object): corner of the plane from which we start to iterate from\r\n     @secondPoint (Vec3 class object): second point near the refPoint to get a direction to use for iteration\r\n\r\n     returns:\r\n     @intersection (Vec3 class object): intersection between our plane and the camera near plane\r\n     ***/\r\n    _getIntersection(refPoint, secondPoint) {\r\n        // direction vector to add\r\n        let direction = secondPoint.clone().sub(refPoint);\r\n\r\n        // copy our corner refpoint\r\n        let intersection = refPoint.clone();\r\n        // iterate till we reach near plane\r\n        while(intersection.z > -1) {\r\n            intersection.add(direction);\r\n        }\r\n\r\n        return intersection;\r\n    }\r\n\r\n    /***\r\n     Get intersection points between a plane and the camera near plane\r\n     When a plane gets clipped by the camera near plane, the clipped corner projected coords returned by _applyMat4() are erronate\r\n     We need to find the intersection points using another approach\r\n     Here I chose to use non clipped corners projected coords and a really small vector parallel to the plane's side\r\n     We're adding that vector again and again to our corner projected coords until the Z coordinate matches the near plane: we got our intersection\r\n\r\n     params:\r\n     @corners (array): our original corners vertices coordinates\r\n     @mvpCorners (array): the projected corners of our plane\r\n     @clippedCorners (array): index of the corners that are clipped\r\n\r\n     returns:\r\n     @mvpCorners (array): the corrected projected corners of our plane\r\n     ***/\r\n    _getNearPlaneIntersections(corners, mvpCorners, clippedCorners) {\r\n        // rebuild the clipped corners based on non clipped ones\r\n\r\n        if(clippedCorners.length === 1) {\r\n            // we will have 5 corners to check so we'll need to push a new entry in our mvpCorners array\r\n            if(clippedCorners[0] === 0) {\r\n                // top left is culled\r\n                // get intersection iterating from top right\r\n                mvpCorners[0] = this._getIntersection(mvpCorners[1], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](0.95, 1, 0).applyMat4(this._matrices.mVPMatrix));\r\n\r\n                // get intersection iterating from bottom left\r\n                mvpCorners.push(this._getIntersection(mvpCorners[3], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-1, -0.95, 0).applyMat4(this._matrices.mVPMatrix)));\r\n            }\r\n            else if(clippedCorners[0] === 1) {\r\n                // top right is culled\r\n                // get intersection iterating from top left\r\n                mvpCorners[1] = this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-0.95, 1, 0).applyMat4(this._matrices.mVPMatrix));\r\n\r\n                // get intersection iterating from bottom right\r\n                mvpCorners.push(this._getIntersection(mvpCorners[2], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](1, -0.95, 0).applyMat4(this._matrices.mVPMatrix)));\r\n            }\r\n            else if(clippedCorners[0] === 2) {\r\n                // bottom right is culled\r\n                // get intersection iterating from bottom left\r\n                mvpCorners[2] = this._getIntersection(mvpCorners[3], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-0.95, -1, 0).applyMat4(this._matrices.mVPMatrix));\r\n\r\n                // get intersection iterating from top right\r\n                mvpCorners.push(this._getIntersection(mvpCorners[1], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](1, 0.95, 0).applyMat4(this._matrices.mVPMatrix)));\r\n            }\r\n            else if(clippedCorners[0] === 3) {\r\n                // bottom left is culled\r\n                // get intersection iterating from bottom right\r\n                mvpCorners[3] = this._getIntersection(mvpCorners[2], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](0.95, -1, 0).applyMat4(this._matrices.mVPMatrix));\r\n\r\n                // get intersection iterating from top left\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"]( -1, 0.95, 0).applyMat4(this._matrices.mVPMatrix)));\r\n            }\r\n        }\r\n        else if(clippedCorners.length === 2) {\r\n            if(clippedCorners[0] === 0 && clippedCorners[1] === 1) {\r\n                // top part of the plane is culled by near plane\r\n                // find intersection using bottom corners\r\n                mvpCorners[0] = this._getIntersection(mvpCorners[3], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-1, -0.95, 0).applyMat4(this._matrices.mVPMatrix));\r\n                mvpCorners[1] = this._getIntersection(mvpCorners[2], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"]( 1, -0.95, 0).applyMat4(this._matrices.mVPMatrix));\r\n            }\r\n            else if(clippedCorners[0] === 1 && clippedCorners[1] === 2) {\r\n                // right part of the plane is culled by near plane\r\n                // find intersection using left corners\r\n                mvpCorners[1] = this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-0.95, 1, 0).applyMat4(this._matrices.mVPMatrix));\r\n                mvpCorners[2] = this._getIntersection(mvpCorners[3], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-0.95, -1, 0).applyMat4(this._matrices.mVPMatrix));\r\n            }\r\n            else if(clippedCorners[0] === 2 && clippedCorners[1] === 3) {\r\n                // bottom part of the plane is culled by near plane\r\n                // find intersection using top corners\r\n                mvpCorners[2] = this._getIntersection(mvpCorners[1], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](1, 0.95, 0).applyMat4(this._matrices.mVPMatrix));\r\n                mvpCorners[3] = this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-1, 0.95, 0).applyMat4(this._matrices.mVPMatrix));\r\n            }\r\n            else if(clippedCorners[0] === 0 && clippedCorners[1] === 3) {\r\n                // left part of the plane is culled by near plane\r\n                // find intersection using right corners\r\n                mvpCorners[0] = this._getIntersection(mvpCorners[1], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](0.95, 1, 0).applyMat4(this._matrices.mVPMatrix));\r\n                mvpCorners[3] = this._getIntersection(mvpCorners[2], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](0.95, -1, 0).applyMat4(this._matrices.mVPMatrix));\r\n            }\r\n        }\r\n        else if(clippedCorners.length === 3) {\r\n            // get the corner that is not clipped\r\n            let nonClippedCorner = 0;\r\n            for(let i = 0; i < corners.length; i++) {\r\n                if(!clippedCorners.includes(i)) {\r\n                    nonClippedCorner = i;\r\n                }\r\n            }\r\n\r\n            // we will have just 3 corners so reset our mvpCorners array with just the visible corner\r\n            mvpCorners = [\r\n                mvpCorners[nonClippedCorner]\r\n            ];\r\n            if(nonClippedCorner === 0) {\r\n                // from top left corner to right\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-0.95, 1, 0).applyMat4(this._matrices.mVPMatrix)));\r\n                // from top left corner to bottom\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-1, 0.95, 0).applyMat4(this._matrices.mVPMatrix)));\r\n            }\r\n            else if(nonClippedCorner === 1) {\r\n                // from top right corner to left\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](0.95, 1, 0).applyMat4(this._matrices.mVPMatrix)));\r\n                // from top right corner to bottom\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](1, 0.95, 0).applyMat4(this._matrices.mVPMatrix)));\r\n            }\r\n            else if(nonClippedCorner === 2) {\r\n                // from bottom right corner to left\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](0.95, -1, 0).applyMat4(this._matrices.mVPMatrix)));\r\n                // from bottom right corner to top\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](1,-0.95, 0).applyMat4(this._matrices.mVPMatrix)));\r\n            }\r\n            else if(nonClippedCorner === 3) {\r\n                // from bottom left corner to right\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-0.95, -1, 0).applyMat4(this._matrices.mVPMatrix)));\r\n                // from bottom left corner to top\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-1 -0.95, 0).applyMat4(this._matrices.mVPMatrix)));\r\n            }\r\n        }\r\n        else {\r\n            // all 4 corners are culled! artificially apply wrong coords to force plane culling\r\n            for(let i = 0; i < corners.length; i++) {\r\n                mvpCorners[i][0] = 10000;\r\n                mvpCorners[i][1] = 10000;\r\n            }\r\n        }\r\n\r\n        return mvpCorners;\r\n    };\r\n\r\n\r\n    /***\r\n     Useful to get our WebGL plane bounding box in the world space\r\n     Takes all transformations into account\r\n     Used internally for frustum culling\r\n\r\n     returns :\r\n     @boundingRectangle (obj): an object containing our plane WebGL element 4 corners coordinates: top left corner is [-1, 1] and bottom right corner is [1, -1]\r\n     ***/\r\n    _getWorldCoords() {\r\n        const corners = [\r\n            new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-1, 1, 0), // plane's top left corner\r\n            new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](1, 1, 0), // plane's top right corner\r\n            new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](1, -1, 0), // plane's bottom right corner\r\n            new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_4__[\"Vec3\"](-1, -1, 0), // plane's bottom left corner\r\n        ];\r\n\r\n        // corners with model view projection matrix applied\r\n        let mvpCorners = [];\r\n        // eventual clipped corners\r\n        let clippedCorners = [];\r\n\r\n        // we are going to get our plane's four corners relative to our model view projection matrix\r\n        for(let i = 0; i < corners.length; i++) {\r\n            const mvpCorner = corners[i].applyMat4(this._matrices.mVPMatrix);\r\n            mvpCorners.push(mvpCorner);\r\n\r\n            // Z position is > 1 or < -1 means the corner is clipped\r\n            if(Math.abs(mvpCorner.z) > 1) {\r\n                clippedCorners.push(i);\r\n            }\r\n        }\r\n\r\n        // near plane is clipping, get intersections between plane and near plane\r\n        if(clippedCorners.length) {\r\n            mvpCorners = this._getNearPlaneIntersections(corners, mvpCorners, clippedCorners);\r\n        }\r\n\r\n        // we need to check for the X and Y min and max values\r\n        // use arbitrary integers that will be overriden anyway\r\n        let minX = Infinity;\r\n        let maxX = -Infinity;\r\n\r\n        let minY = Infinity;\r\n        let maxY = -Infinity;\r\n\r\n        for(let i = 0; i < mvpCorners.length; i++) {\r\n            const corner = mvpCorners[i];\r\n\r\n            if(corner.x < minX) {\r\n                minX = corner.x;\r\n            }\r\n            if(corner.x > maxX) {\r\n                maxX = corner.x;\r\n            }\r\n\r\n            if(corner.y < minY) {\r\n                minY = corner.y;\r\n            }\r\n            if(corner.y > maxY) {\r\n                maxY = corner.y;\r\n            }\r\n        }\r\n\r\n        return {\r\n            top: maxY,\r\n            right: maxX,\r\n            bottom: minY,\r\n            left: minX,\r\n        };\r\n    };\r\n\r\n\r\n    /***\r\n     Transpose our plane corners coordinates from world space to document space\r\n     Sets an object with the accurate plane WebGL bounding rect relative to document\r\n     ***/\r\n    _computeWebGLBoundingRect() {\r\n        // get our world space bouding rect\r\n        const worldBBox = this._getWorldCoords();\r\n\r\n        // normalize worldBBox to (0 -> 1) screen coordinates with [0, 0] being the top left corner and [1, 1] being the bottom right\r\n        let screenBBox = {\r\n            top: 1 - (worldBBox.top + 1) / 2,\r\n            right: (worldBBox.right + 1) / 2,\r\n            bottom: 1 - (worldBBox.bottom + 1) / 2,\r\n            left: (worldBBox.left + 1) / 2,\r\n        };\r\n\r\n        screenBBox.width = screenBBox.right - screenBBox.left;\r\n        screenBBox.height = screenBBox.bottom - screenBBox.top;\r\n\r\n        // return our values ranging from 0 to 1 multiplied by our canvas sizes + canvas top and left offsets\r\n        this._boundingRect.worldToDocument = {\r\n            width: screenBBox.width * this.renderer._boundingRect.width,\r\n            height: screenBBox.height * this.renderer._boundingRect.height,\r\n            top: screenBBox.top * this.renderer._boundingRect.height + this.renderer._boundingRect.top,\r\n            left: screenBBox.left * this.renderer._boundingRect.width + this.renderer._boundingRect.left,\r\n\r\n            // add left and width to get right property\r\n            right: screenBBox.left * this.renderer._boundingRect.width + this.renderer._boundingRect.left + screenBBox.width * this.renderer._boundingRect.width,\r\n            // add top and height to get bottom property\r\n            bottom: screenBBox.top * this.renderer._boundingRect.height + this.renderer._boundingRect.top + screenBBox.height * this.renderer._boundingRect.height,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Returns our plane WebGL bounding rect relative to document\r\n\r\n     returns :\r\n     @boundingRectangle (obj): an object containing our plane WebGL element bounding rectangle (width, height, top, bottom, right and left properties)\r\n     ***/\r\n    getWebGLBoundingRect() {\r\n        if(!this._matrices.mVPMatrix) {\r\n            return this._boundingRect.document;\r\n        }\r\n        else if(!this._boundingRect.worldToDocument || this.alwaysDraw) {\r\n            this._computeWebGLBoundingRect();\r\n        }\r\n\r\n        return this._boundingRect.worldToDocument;\r\n    }\r\n\r\n\r\n    /***\r\n     Returns our plane WebGL bounding rectangle in document coordinates including additional drawCheckMargins\r\n\r\n     returns :\r\n     @boundingRectangle (obj): an object containing our plane WebGL element bounding rectangle including the draw check margins (top, bottom, right and left properties)\r\n     ***/\r\n    _getWebGLDrawRect() {\r\n        this._computeWebGLBoundingRect();\r\n\r\n        return {\r\n            top: this._boundingRect.worldToDocument.top - this.drawCheckMargins.top,\r\n            right: this._boundingRect.worldToDocument.right + this.drawCheckMargins.right,\r\n            bottom: this._boundingRect.worldToDocument.bottom + this.drawCheckMargins.bottom,\r\n            left: this._boundingRect.worldToDocument.left - this.drawCheckMargins.left,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     This function checks if the plane is currently visible in the canvas and sets _shouldDraw property according to this test\r\n     This is our real frustum culling check\r\n     ***/\r\n    _shouldDrawCheck() {\r\n        // get plane bounding rect\r\n        const actualPlaneBounds = this._getWebGLDrawRect();\r\n\r\n        // if we decide to draw the plane only when visible inside the canvas\r\n        // we got to check if its actually inside the canvas\r\n        if(\r\n            Math.round(actualPlaneBounds.right) <= this.renderer._boundingRect.left\r\n            || Math.round(actualPlaneBounds.left) >= this.renderer._boundingRect.left + this.renderer._boundingRect.width\r\n            || Math.round(actualPlaneBounds.bottom) <= this.renderer._boundingRect.top\r\n            || Math.round(actualPlaneBounds.top) >= this.renderer._boundingRect.top + this.renderer._boundingRect.height\r\n        ) {\r\n            if(this._shouldDraw) {\r\n                this._shouldDraw = false;\r\n                // callback for leaving view\r\n                this.renderer.nextRender.add(() => this._onLeaveViewCallback && this._onLeaveViewCallback());\r\n            }\r\n        }\r\n        else {\r\n            if(!this._shouldDraw) {\r\n                // callback for entering view\r\n                this.renderer.nextRender.add(() => this._onReEnterViewCallback && this._onReEnterViewCallback());\r\n            }\r\n            this._shouldDraw = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This function returns if the plane is actually drawn (ie fully initiated, visible property set to true and not culled)\r\n     ***/\r\n    isDrawn() {\r\n        return this._canDraw && this.visible && (this._shouldDraw || this.alwaysDraw);\r\n    }\r\n\r\n\r\n    /***\r\n     This function uses our plane HTML Element bounding rectangle values and convert them to the world clip space coordinates, and then apply the corresponding translation\r\n     ***/\r\n    _applyWorldPositions() {\r\n        // set our plane sizes and positions relative to the world clipspace\r\n        this._setWorldSizes();\r\n\r\n        // set the translation values\r\n        this._setTranslation();\r\n    }\r\n\r\n\r\n    /***\r\n     This function updates the plane position based on its CSS positions and transformations values.\r\n     Useful if the HTML element has been moved while the container size has not changed.\r\n     ***/\r\n    updatePosition() {\r\n        // set the new plane sizes and positions relative to document by triggering getBoundingClientRect()\r\n        this._setDocumentSizes();\r\n\r\n        // apply them\r\n        this._applyWorldPositions();\r\n    }\r\n\r\n\r\n    /***\r\n     This function updates the plane position based on the Curtains class scroll manager values\r\n\r\n     params:\r\n     @lastXDelta (float): last scroll value along X axis\r\n     @lastYDelta (float): last scroll value along Y axis\r\n     ***/\r\n    updateScrollPosition(lastXDelta, lastYDelta) {\r\n        // actually update the plane position only if last X delta or last Y delta is not equal to 0\r\n        if(lastXDelta || lastYDelta) {\r\n            // set new positions based on our delta without triggering reflow\r\n            this._boundingRect.document.top += lastYDelta * this.renderer.pixelRatio;\r\n            this._boundingRect.document.left += lastXDelta * this.renderer.pixelRatio;\r\n\r\n            // apply them\r\n            this._applyWorldPositions();\r\n        }\r\n    };\r\n\r\n\r\n    /*** DEPTH AND RENDER ORDER ***/\r\n\r\n    /***\r\n     This function set/unset the depth test for that plane\r\n\r\n     params :\r\n     @shouldEnableDepthTest (bool): enable/disable depth test for that plane\r\n     ***/\r\n    enableDepthTest(shouldEnableDepthTest) {\r\n        this._depthTest = shouldEnableDepthTest;\r\n    }\r\n\r\n\r\n    /***\r\n     This function puts the plane at the end of the draw stack, allowing it to overlap any other plane\r\n     TODO deprecated and should be removed!\r\n     ***/\r\n    moveToFront() {\r\n        if(!this.renderer.production) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__[\"throwWarning\"])(this.type + \": moveToFront() is deprecated, please use setRenderOrder() instead\");\r\n        }\r\n        this.setRenderOrder();\r\n    }\r\n\r\n\r\n    /*** SOURCES ***/\r\n\r\n    /***\r\n     Load our initial sources if needed and calls onReady callback\r\n     ***/\r\n    _initSources() {\r\n        // finally load every sources already in our plane html element\r\n        // load plane sources\r\n        let loaderSize = 0;\r\n        if(this.autoloadSources) {\r\n            // load images\r\n            const imagesArray = [];\r\n            for(let i = 0; i < this.htmlElement.getElementsByTagName(\"img\").length; i++) {\r\n                imagesArray.push(this.htmlElement.getElementsByTagName(\"img\")[i]);\r\n            }\r\n            if(imagesArray.length > 0) {\r\n                this.loadImages(imagesArray);\r\n            }\r\n\r\n            // load videos\r\n            const videosArray = [];\r\n            for(let i = 0; i < this.htmlElement.getElementsByTagName(\"video\").length; i++) {\r\n                videosArray.push(this.htmlElement.getElementsByTagName(\"video\")[i]);\r\n            }\r\n            if(videosArray.length > 0) {\r\n                this.loadVideos(videosArray);\r\n            }\r\n\r\n            // load canvases\r\n            const canvasesArray = [];\r\n            for(let i = 0; i < this.htmlElement.getElementsByTagName(\"canvas\").length; i++) {\r\n                canvasesArray.push(this.htmlElement.getElementsByTagName(\"canvas\")[i]);\r\n            }\r\n            if(canvasesArray.length > 0) {\r\n                this.loadCanvases(canvasesArray);\r\n            }\r\n\r\n            loaderSize = imagesArray.length + videosArray.length + canvasesArray.length;\r\n        }\r\n\r\n        this.loader._setLoaderSize(loaderSize);\r\n\r\n        this._canDraw = true;\r\n    }\r\n\r\n\r\n    /*** DRAWING ***/\r\n\r\n    /***\r\n     Specific instructions for the Plane class to execute before drawing it\r\n     ***/\r\n    _startDrawing() {\r\n        // check if our plane is ready to draw\r\n        if(this._canDraw) {\r\n            // even if our plane should not be drawn we still execute its onRender callback and update its uniforms\r\n            if(this._onRenderCallback) {\r\n                this._onRenderCallback();\r\n            }\r\n\r\n            // to improve webgl pipeline performace, we might want to update each texture that needs an update here\r\n            // see https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#texImagetexSubImage_uploads_particularly_with_videos_can_cause_pipeline_flushes\r\n\r\n\r\n            // if we should render to a render target\r\n            if(this.target) {\r\n                this.renderer.bindFrameBuffer(this.target);\r\n            }\r\n            else if(this.renderer.state.scenePassIndex === null) {\r\n                this.renderer.bindFrameBuffer(null);\r\n            }\r\n\r\n            // update our perspective matrix\r\n            this._setPerspectiveMatrix();\r\n\r\n            // update our mv matrix\r\n            this._setMVMatrix();\r\n\r\n            // now check if we really need to draw it and its textures\r\n            if((this.alwaysDraw || this._shouldDraw) && this.visible) {\r\n                this._draw();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n\r\n    /***\r\n     This is called each time a plane is entering again the view bounding box\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onReEnterView(callback) {\r\n        if(callback) {\r\n            this._onReEnterViewCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     This is called each time a plane is leaving the view bounding box\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onLeaveView(callback) {\r\n        if(callback) {\r\n            this._onLeaveViewCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/Plane.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/Program.js":
/*!******************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/Program.js ***!
  \******************************************************/
/*! exports provided: Program */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Program\", function() { return Program; });\n/* harmony import */ var _Uniforms_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Uniforms.js */ \"../node_modules/curtainsjs/src/core/Uniforms.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n/* harmony import */ var _shaders_plane_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shaders/plane.vertex.glsl.js */ \"../node_modules/curtainsjs/src/shaders/plane.vertex.glsl.js\");\n/* harmony import */ var _shaders_plane_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shaders/plane.fragment.glsl.js */ \"../node_modules/curtainsjs/src/shaders/plane.fragment.glsl.js\");\n/* harmony import */ var _shaders_shaderpass_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shaders/shaderpass.vertex.glsl.js */ \"../node_modules/curtainsjs/src/shaders/shaderpass.vertex.glsl.js\");\n/* harmony import */ var _shaders_shaderpass_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shaders/shaderpass.fragment.glsl.js */ \"../node_modules/curtainsjs/src/shaders/shaderpass.fragment.glsl.js\");\n\r\n\r\n\r\n// default shaders\r\n\r\n\r\n\r\n\r\n\r\n\r\n/***\r\n Program class that creates, compiles and links the shaders\r\n Use a cache system to get already compiled shaders and save some CPU\r\n Also responsible for the creation, setting and updating of the uniforms (see Uniforms class object)\r\n\r\n params:\r\n @renderer (Renderer class object): our renderer class object\r\n\r\n @parent (Plane/ShaderPass class object): the mesh that will use that program\r\n @vertexShader (string): vertex shader as a string\r\n @fragmentShader (string): fragment shader as a string\r\n\r\n returns:\r\n @this: our newly created Program\r\n ***/\r\nclass Program {\r\n    constructor(renderer, {\r\n        parent,\r\n        vertexShader,\r\n        fragmentShader,\r\n    } = {}) {\r\n        this.type = \"Program\";\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwError\"])(this.type + \": Renderer not passed as first argument\", renderer);\r\n        }\r\n        else if(!renderer.gl) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwError\"])(this.type + \": Renderer WebGL context is undefined\", renderer);\r\n        }\r\n        this.renderer = renderer;\r\n        this.gl = this.renderer.gl;\r\n\r\n        this.parent = parent;\r\n\r\n        this.defaultVsCode = this.parent.type === \"Plane\" ? _shaders_plane_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : _shaders_shaderpass_vertex_glsl_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\r\n        this.defaultFsCode = this.parent.type === \"Plane\" ? _shaders_plane_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] : _shaders_shaderpass_fragment_glsl_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\r\n\r\n        // use the vertex shader specified or fallback to a default one\r\n        if(!vertexShader) {\r\n            if(!this.renderer.production && this.parent.type === \"Plane\") {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwWarning\"])(this.parent.type + \": No vertex shader provided, will use a default one\");\r\n            }\r\n\r\n            this.vsCode = this.defaultVsCode;\r\n        }\r\n        else {\r\n            this.vsCode = vertexShader;\r\n        }\r\n\r\n        // use the fragment shader specified or fallback to a default one\r\n        if(!fragmentShader) {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwWarning\"])(this.parent.type + \": No fragment shader provided, will use a default one\");\r\n            }\r\n\r\n            this.fsCode = this.defaultFsCode;\r\n        }\r\n        else {\r\n            this.fsCode = fragmentShader;\r\n        }\r\n\r\n        this.compiled = true;\r\n\r\n        this.setupProgram();\r\n    }\r\n\r\n    /***\r\n     Compile our WebGL shaders based on our written shaders\r\n\r\n     params:\r\n     @shaderCode (string): shader code\r\n     @shaderType (shaderType): WebGL shader type (vertex or fragment)\r\n\r\n     returns:\r\n     @shader (compiled shader): our compiled shader\r\n     ***/\r\n    createShader(shaderCode, shaderType) {\r\n        const shader = this.gl.createShader(shaderType);\r\n\r\n        this.gl.shaderSource(shader, shaderCode);\r\n        this.gl.compileShader(shader);\r\n\r\n        // check shader compilation status only when not in production mode\r\n        if(!this.renderer.production) {\r\n            if(!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n                // shader debugging log as seen in THREE.js WebGLProgram source code\r\n                const shaderTypeString = shaderType === this.gl.VERTEX_SHADER ? \"vertex shader\" : \"fragment shader\";\r\n                const shaderSource = this.gl.getShaderSource(shader);\r\n                let shaderLines = shaderSource.split('\\n');\r\n\r\n                for(let i = 0; i < shaderLines.length; i++) {\r\n                    shaderLines[i] = (i + 1) + ': ' + shaderLines[i];\r\n                }\r\n                shaderLines = shaderLines.join(\"\\n\");\r\n\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwWarning\"])(this.type + \": Errors occurred while compiling the\", shaderTypeString, \":\\n\", this.gl.getShaderInfoLog(shader));\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwError\"])(shaderLines);\r\n\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwWarning\"])(this.type + \": Will use a default\", shaderTypeString);\r\n\r\n                // use the library default shaders instead\r\n                return this.createShader(shaderType === this.gl.VERTEX_SHADER ? this.defaultVsCode : this.defaultFsCode, shaderType);\r\n            }\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n\r\n    /***\r\n     Compiles and creates new shaders\r\n     ***/\r\n    useNewShaders() {\r\n        this.vertexShader = this.createShader(this.vsCode, this.gl.VERTEX_SHADER);\r\n        this.fragmentShader = this.createShader(this.fsCode, this.gl.FRAGMENT_SHADER);\r\n\r\n        if(!this.vertexShader || !this.fragmentShader) {\r\n            if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwWarning\"])(this.type + \": Unable to find or compile the vertex or fragment shader\");\r\n        }\r\n    };\r\n\r\n\r\n    /***\r\n     Checks whether the program has already been registered before creating it\r\n     If yes, use the compiled program if the program should be shared, or just use the compiled shaders to create a new one else with createProgram()\r\n     If not, compile the shaders and call createProgram()\r\n     ***/\r\n    setupProgram() {\r\n        let existingProgram = this.renderer.cache.getProgramFromShaders(this.vsCode, this.fsCode);\r\n\r\n        // we found an existing program\r\n        if(existingProgram) {\r\n            // if we've decided to share existing programs, just return the existing one\r\n            if(this.parent.shareProgram) {\r\n                //return existingProgram;\r\n                this.shared = true;\r\n                this.vertexShader = existingProgram.vertexShader;\r\n                this.fragmentShader = existingProgram.fragmentShader;\r\n                this.program = existingProgram.program;\r\n                this.id = existingProgram.id;\r\n                this.activeTextures = existingProgram.activeTextures;\r\n            }\r\n            else {\r\n                // we need to create a new program but we don't have to re compile the shaders\r\n                this.vertexShader = existingProgram.vertexShader;\r\n                this.fragmentShader = existingProgram.fragmentShader;\r\n                // copy active textures as well\r\n                this.activeTextures = existingProgram.activeTextures;\r\n                this.createProgram();\r\n            }\r\n        }\r\n        else {\r\n            // compile the new shaders and create a new program\r\n            this.useNewShaders();\r\n            if(this.compiled) {\r\n                this.createProgram();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Used internally to set up program based on the created shaders and attach them to the program\r\n     Sets a list of active textures that are actually used by the shaders to avoid binding unused textures during draw calls\r\n     Add the program to the cache\r\n     ***/\r\n    createProgram() {\r\n        // set program id and type\r\n        this.id = this.renderer.cache.programs.length;\r\n        this.shared = this.parent.shareProgram;\r\n\r\n        // we need to create a new shader program\r\n        this.program = this.gl.createProgram();\r\n\r\n        // if shaders are valid, go on\r\n        this.gl.attachShader(this.program, this.vertexShader);\r\n        this.gl.attachShader(this.program, this.fragmentShader);\r\n        this.gl.linkProgram(this.program);\r\n\r\n        // TODO getProgramParameter even in production to avoid errors?\r\n        // check the shader program creation status only when not in production mode\r\n        if(!this.renderer.production) {\r\n            if(!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwWarning\"])(this.type + \": Unable to initialize the shader program: \" + this.gl.getProgramInfoLog(this.program));\r\n\r\n                // use default shaders, recompile and recreate program\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwWarning\"])(this.type + \": Will use default vertex and fragment shaders\");\r\n                this.vertexShader = this.createShader(this.defaultVsCode, this.gl.VERTEX_SHADER);\r\n                this.fragmentShader = this.createShader(this.defaultFsCode, this.gl.FRAGMENT_SHADER);\r\n                this.createProgram();\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        // free the shaders handles\r\n        this.gl.deleteShader(this.vertexShader);\r\n        this.gl.deleteShader(this.fragmentShader);\r\n\r\n        // store active textures (those that are used in the shaders) to avoid binding unused textures\r\n        if(!this.activeTextures) {\r\n            this.activeTextures = [];\r\n            // check for program active textures\r\n            let numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\r\n            for(let i = 0; i < numUniforms; i++) {\r\n                const activeUniform = this.gl.getActiveUniform(this.program, i);\r\n                // if it's a texture add it to our activeTextures array\r\n                if(activeUniform.type === this.gl.SAMPLER_2D) {\r\n                    this.activeTextures.push(activeUniform.name);\r\n                }\r\n            }\r\n        }\r\n\r\n        // add it to our program manager programs list\r\n        this.renderer.cache.addProgram(this);\r\n    }\r\n\r\n\r\n    /*** UNIFORMS ***/\r\n\r\n    /***\r\n     Creates and attach the uniform handlers to our program\r\n\r\n     params:\r\n     @uniforms (object): an object describing our uniforms (see Uniforms class object)\r\n     ***/\r\n    createUniforms(uniforms) {\r\n        this.uniformsManager = new _Uniforms_js__WEBPACK_IMPORTED_MODULE_0__[\"Uniforms\"](this.renderer, this.program, this.shared, uniforms);\r\n\r\n        // set them right away\r\n        this.setUniforms();\r\n    }\r\n\r\n    /***\r\n     Sets our uniforms (used on init and on context restoration)\r\n     ***/\r\n    setUniforms() {\r\n        // use this program\r\n        this.renderer.useProgram(this);\r\n        this.uniformsManager.setUniforms();\r\n    }\r\n\r\n    /***\r\n     Updates our uniforms at each draw calls\r\n     ***/\r\n    updateUniforms() {\r\n        // use this program\r\n        this.renderer.useProgram(this);\r\n        this.uniformsManager.updateUniforms();\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/Program.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/Renderer.js":
/*!*******************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/Renderer.js ***!
  \*******************************************************/
/*! exports provided: Renderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Renderer\", function() { return Renderer; });\n/* harmony import */ var _Scene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Scene.js */ \"../node_modules/curtainsjs/src/core/Scene.js\");\n/* harmony import */ var _utils_CacheManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/CacheManager.js */ \"../node_modules/curtainsjs/src/utils/CacheManager.js\");\n/* harmony import */ var _utils_CallbackQueueManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/CallbackQueueManager.js */ \"../node_modules/curtainsjs/src/utils/CallbackQueueManager.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/***\r\n Here we create our Renderer object\r\n It will create our WebGL context and handle everything that relates to it\r\n Will create a container, append a canvas, handle WebGL extensions, context lost/restoration events\r\n Will create a Scene class object that will keep tracks of all added objects\r\n Will also handle all global WebGL commands, like clearing scene, binding frame buffers, setting depth, blend func, etc.\r\n Will use a state object to handle all those commands and keep a track of what is being drawned to avoid redundant WebGL calls.\r\n\r\n params:\r\n @Curtainsparams see Curtains class object\r\n\r\n @onError (function): called when there has been an error while initiating the WebGL context\r\n @onContextLost (function): called when the WebGL context is lost\r\n @onContextRestored (function): called when the WebGL context is restored\r\n @onSceneChange (function): called every time an object has been added/removed from the scene\r\n\r\n returns :\r\n @this: our Renderer\r\n ***/\r\n\r\nclass Renderer {\r\n    constructor({\r\n        // inherited from Curtains class object\r\n        alpha,\r\n        antialias,\r\n        premultipliedAlpha,\r\n        depth,\r\n        failIfMajorPerformanceCaveat,\r\n        preserveDrawingBuffer,\r\n        stencil,\r\n        container,\r\n        pixelRatio,\r\n        renderingScale,\r\n        production,\r\n\r\n        // callbacks passed by the Curtains class object on instantiation\r\n        onError,\r\n        onContextLost,\r\n        onContextRestored,\r\n        onDisposed,\r\n        onSceneChange,\r\n    }) {\r\n        this.type = \"Renderer\";\r\n        // context attributes\r\n        this.alpha = alpha;\r\n        this.antialias = antialias;\r\n        this.premultipliedAlpha = premultipliedAlpha;\r\n        this.depth = depth;\r\n        this.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;\r\n        this.preserveDrawingBuffer = preserveDrawingBuffer;\r\n        this.stencil = stencil;\r\n\r\n        this.container = container;\r\n\r\n        this.pixelRatio = pixelRatio;\r\n        this._renderingScale = renderingScale;\r\n\r\n        this.production = production;\r\n\r\n        // callbacks\r\n        this.onError = onError;\r\n        this.onContextLost = onContextLost;\r\n        this.onContextRestored = onContextRestored;\r\n        this.onDisposed = onDisposed;\r\n\r\n        // keep sync between Curtains objects arrays and renderer objects arrays\r\n        this.onSceneChange = onSceneChange;\r\n\r\n        // managing our webgl draw states\r\n        this.initState();\r\n\r\n        // create the canvas\r\n        this.canvas = document.createElement(\"canvas\");\r\n\r\n        // set our webgl context\r\n        const glAttributes = {\r\n            alpha: this.alpha,\r\n            premultipliedAlpha: this.premultipliedAlpha,\r\n            antialias: this.antialias,\r\n            depth: this.depth,\r\n            failIfMajorPerformanceCaveat: this.failIfMajorPerformanceCaveat,\r\n            preserveDrawingBuffer: this.preserveDrawingBuffer,\r\n            stencil: this.stencil,\r\n        };\r\n\r\n        // try webgl2 context first\r\n        this.gl = this.canvas.getContext(\"webgl2\", glAttributes);\r\n        this._isWebGL2 = !!this.gl;\r\n        // fallback to webgl1\r\n        if(!this.gl) {\r\n            this.gl = this.canvas.getContext(\"webgl\", glAttributes) || this.canvas.getContext(\"experimental-webgl\", glAttributes);\r\n        }\r\n\r\n        // WebGL context could not be created\r\n        if(!this.gl) {\r\n            if(!this.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": WebGL context could not be created\");\r\n\r\n            this.state.isActive = false;\r\n\r\n            if(this.onError) {\r\n                this.onError();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.initRenderer();\r\n    }\r\n\r\n    /***\r\n     Set/reset our context state object\r\n     ***/\r\n    initState() {\r\n        this.state = {\r\n            // if we are currently rendering\r\n            isActive: true,\r\n            isContextLost: true,\r\n            drawingEnabled: true,\r\n            forceRender: false,\r\n\r\n            // current program ID\r\n            currentProgramID: null,\r\n\r\n            // current geometry drawn\r\n            currentGeometryID: null,\r\n            // whether we should force buffer bindings update\r\n            forceBufferUpdate: false,\r\n\r\n            // if we're using depth test or not\r\n            setDepth: null,\r\n            // face culling\r\n            cullFace: null,\r\n\r\n            // current frame buffer ID\r\n            frameBufferID: null,\r\n            // current scene pass ID\r\n            scenePassIndex: null,\r\n\r\n            // textures\r\n            activeTexture: null,\r\n            unpackAlignment: null,\r\n            flipY: null,\r\n            premultiplyAlpha: null,\r\n        };\r\n    }\r\n\r\n    /***\r\n     Add a callback queueing manager (execute functions on the next render call, see CallbackQueueManager class object)\r\n     ***/\r\n    initCallbackQueueManager() {\r\n        this.nextRender = new _utils_CallbackQueueManager_js__WEBPACK_IMPORTED_MODULE_2__[\"CallbackQueueManager\"]();\r\n    }\r\n\r\n    /***\r\n     Init our renderer\r\n     ***/\r\n    initRenderer() {\r\n        this.planes = [];\r\n        this.renderTargets = [];\r\n        this.shaderPasses = [];\r\n\r\n        // context is not lost\r\n        this.state.isContextLost = false;\r\n\r\n        // callback queue\r\n        this.initCallbackQueueManager();\r\n\r\n        // set blend func\r\n        this.setBlendFunc();\r\n\r\n        // enable depth by default\r\n        this.setDepth(true);\r\n\r\n        // texture cache\r\n        this.cache = new _utils_CacheManager_js__WEBPACK_IMPORTED_MODULE_1__[\"CacheManager\"]();\r\n\r\n        // init our scene\r\n        this.scene = new _Scene_js__WEBPACK_IMPORTED_MODULE_0__[\"Scene\"](this);\r\n\r\n        // get webgl extensions\r\n        this.getExtensions();\r\n\r\n        // handling context\r\n        this._contextLostHandler = this.contextLost.bind(this);\r\n        this.canvas.addEventListener(\"webglcontextlost\", this._contextLostHandler, false);\r\n\r\n        this._contextRestoredHandler = this.contextRestored.bind(this);\r\n        this.canvas.addEventListener(\"webglcontextrestored\", this._contextRestoredHandler, false);\r\n    }\r\n\r\n    /***\r\n     Get all available WebGL extensions based on WebGL used version\r\n     Called on init and on context restoration\r\n     ***/\r\n    getExtensions() {\r\n        this.extensions = [];\r\n        if(this._isWebGL2) {\r\n            this.extensions['EXT_color_buffer_float'] = this.gl.getExtension('EXT_color_buffer_float');\r\n            this.extensions['OES_texture_float_linear'] = this.gl.getExtension('OES_texture_float_linear');\r\n            this.extensions['EXT_texture_filter_anisotropic'] = this.gl.getExtension('EXT_texture_filter_anisotropic');\r\n            this.extensions['WEBGL_lose_context'] = this.gl.getExtension('WEBGL_lose_context');\r\n        } else {\r\n            this.extensions['OES_vertex_array_object'] = this.gl.getExtension('OES_vertex_array_object');\r\n            this.extensions['OES_texture_float'] = this.gl.getExtension('OES_texture_float');\r\n            this.extensions['OES_texture_float_linear'] = this.gl.getExtension('OES_texture_float_linear');\r\n            this.extensions['OES_texture_half_float'] = this.gl.getExtension('OES_texture_half_float');\r\n            this.extensions['OES_texture_half_float_linear'] = this.gl.getExtension('OES_texture_half_float_linear');\r\n            this.extensions['EXT_texture_filter_anisotropic'] = this.gl.getExtension('EXT_texture_filter_anisotropic');\r\n            this.extensions['OES_element_index_uint'] = this.gl.getExtension('OES_element_index_uint');\r\n            this.extensions['OES_standard_derivatives'] = this.gl.getExtension('OES_standard_derivatives');\r\n            this.extensions['EXT_sRGB'] = this.gl.getExtension('EXT_sRGB');\r\n            this.extensions['WEBGL_depth_texture'] = this.gl.getExtension('WEBGL_depth_texture');\r\n            this.extensions['WEBGL_draw_buffers'] = this.gl.getExtension('WEBGL_draw_buffers');\r\n            this.extensions['WEBGL_lose_context'] = this.gl.getExtension('WEBGL_lose_context');\r\n        }\r\n    }\r\n\r\n\r\n    /*** HANDLING CONTEXT LOST/RESTORE ***/\r\n\r\n    /***\r\n     Called when the WebGL context is lost\r\n     ***/\r\n    contextLost(event) {\r\n        this.state.isContextLost = true;\r\n\r\n        // do not try to restore the context if we're disposing everything!\r\n        if(!this.state.isActive) return;\r\n\r\n        event.preventDefault();\r\n\r\n        this.nextRender.add(() => this.onContextLost && this.onContextLost());\r\n    }\r\n\r\n\r\n    /***\r\n     Call this method to restore your context\r\n     ***/\r\n    restoreContext() {\r\n        // do not try to restore the context if we're disposing everything!\r\n        if(!this.state.isActive) return;\r\n\r\n        this.initState();\r\n\r\n        if(this.gl && this.extensions['WEBGL_lose_context']) {\r\n            this.extensions['WEBGL_lose_context'].restoreContext();\r\n        }\r\n        else {\r\n            if(!this.gl && !this.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Could not restore the context because the context is not defined\");\r\n            }\r\n            else if(!this.extensions['WEBGL_lose_context'] && !this.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Could not restore the context because the restore context extension is not defined\");\r\n            }\r\n\r\n            if(this.onError) {\r\n                this.onError();\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Check that all objects and textures have been restored\r\n\r\n     returns:\r\n     @isRestored (bool): whether everything has been restored or not\r\n     ***/\r\n    isContextexFullyRestored() {\r\n        let isRestored = true;\r\n        for(let i = 0; i < this.renderTargets.length; i++) {\r\n            if(!this.renderTargets[i].textures[0]._canDraw) {\r\n                isRestored = false;\r\n            }\r\n            break;\r\n        }\r\n\r\n        if(isRestored) {\r\n            for(let i = 0; i < this.planes.length; i++) {\r\n                if(!this.planes[i]._canDraw) {\r\n                    isRestored = false;\r\n                    break;\r\n                }\r\n                else {\r\n                    for(let j = 0; j < this.planes[i].textures.length; j++) {\r\n                        if(!this.planes[i].textures[j]._canDraw) {\r\n                            isRestored = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(isRestored) {\r\n            for(let i = 0; i < this.shaderPasses.length; i++) {\r\n                if(!this.shaderPasses[i]._canDraw) {\r\n                    isRestored = false;\r\n                    break;\r\n                }\r\n                else {\r\n                    for(let j = 0; j < this.shaderPasses[i].textures.length; j++) {\r\n                        if(!this.shaderPasses[i].textures[j]._canDraw) {\r\n                            isRestored = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return isRestored;\r\n    }\r\n\r\n    /***\r\n     Called when the WebGL context is restored\r\n     ***/\r\n    contextRestored() {\r\n        this.getExtensions();\r\n\r\n        // set blend func\r\n        this.setBlendFunc();\r\n\r\n        // enable depth by default\r\n        this.setDepth(true);\r\n\r\n        // clear texture and programs cache\r\n        this.cache.clear();\r\n\r\n        // reset draw stacks\r\n        this.scene.initStacks();\r\n\r\n        // we need to reset everything : planes programs, shaders, buffers and textures !\r\n        for(let i = 0; i < this.renderTargets.length; i++) {\r\n            this.renderTargets[i]._restoreContext();\r\n        }\r\n\r\n        for(let i = 0; i < this.planes.length; i++) {\r\n            this.planes[i]._restoreContext();\r\n        }\r\n\r\n        // same goes for shader passes\r\n        for(let i = 0; i < this.shaderPasses.length; i++) {\r\n            this.shaderPasses[i]._restoreContext();\r\n        }\r\n\r\n        // callback if everything is restored\r\n        const isRestoredQueue = this.nextRender.add(() => {\r\n            const isRestored = this.isContextexFullyRestored();\r\n            if(isRestored) {\r\n                isRestoredQueue.keep = false;\r\n\r\n                // start drawing again\r\n                this.state.isContextLost = false;\r\n\r\n                if(this.onContextRestored) {\r\n                    this.onContextRestored();\r\n                }\r\n\r\n                // we've changed the objects, keep Curtains class in sync with our renderer\r\n                this.onSceneChange();\r\n\r\n                // force next frame render whatever our drawing flag value\r\n                this.needRender();\r\n            }\r\n        }, true);\r\n    }\r\n\r\n\r\n    /*** SIZING ***/\r\n\r\n    /***\r\n     Updates pixelRatio property\r\n     ***/\r\n    setPixelRatio(pixelRatio) {\r\n        this.pixelRatio = pixelRatio;\r\n    }\r\n\r\n    /***\r\n     Set/reset container sizes and WebGL viewport sizes\r\n     ***/\r\n    setSize() {\r\n        if(!this.gl) return;\r\n\r\n        // get our container bounding client rectangle\r\n        const containerBoundingRect = this.container.getBoundingClientRect();\r\n\r\n        // use the bounding rect values\r\n        this._boundingRect = {\r\n            width: containerBoundingRect.width * this.pixelRatio,\r\n            height: containerBoundingRect.height * this.pixelRatio,\r\n            top: containerBoundingRect.top * this.pixelRatio,\r\n            left: containerBoundingRect.left * this.pixelRatio,\r\n        };\r\n\r\n        // iOS Safari > 8+ has a known bug due to navigation bar appearing/disappearing\r\n        // this causes wrong bounding client rect calculations, especially negative top value when it shouldn't\r\n        // to fix this we'll use a dirty but useful workaround\r\n\r\n        // first we check if we're on iOS Safari\r\n        const isSafari = !!navigator.userAgent.match(/Version\\/[\\d\\.]+.*Safari/);\r\n        const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n\r\n        if(isSafari && iOS) {\r\n            // if we are on iOS Safari we'll need a custom function to retrieve our container absolute top position\r\n            function getTopOffset(el) {\r\n                let topOffset = 0;\r\n                while(el && !isNaN(el.offsetTop)) {\r\n                    topOffset += el.offsetTop - el.scrollTop;\r\n                    el = el.offsetParent;\r\n                }\r\n                return topOffset;\r\n            }\r\n\r\n            // use it to update our top value\r\n            this._boundingRect.top = getTopOffset(this.container) * this.pixelRatio;\r\n        }\r\n\r\n        this.canvas.style.width  = Math.floor(this._boundingRect.width / this.pixelRatio) + \"px\";\r\n        this.canvas.style.height = Math.floor(this._boundingRect.height / this.pixelRatio) + \"px\";\r\n\r\n        this.canvas.width = Math.floor(this._boundingRect.width * this._renderingScale);\r\n        this.canvas.height = Math.floor(this._boundingRect.height * this._renderingScale);\r\n\r\n        this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\r\n    }\r\n\r\n    /***\r\n     Resize all our elements: planes, shader passes and render targets\r\n     Their textures will be resized as well\r\n     ***/\r\n    resize() {\r\n        // resize the planes only if they are fully initiated\r\n        for(let i = 0; i < this.planes.length; i++) {\r\n            if(this.planes[i]._canDraw) {\r\n                this.planes[i].resize();\r\n            }\r\n        }\r\n\r\n        // resize the shader passes only if they are fully initiated\r\n        for(let i = 0; i < this.shaderPasses.length; i++) {\r\n            if(this.shaderPasses[i]._canDraw) {\r\n                this.shaderPasses[i].resize();\r\n            }\r\n        }\r\n\r\n        // resize the render targets\r\n        for(let i = 0; i < this.renderTargets.length; i++) {\r\n            this.renderTargets[i].resize();\r\n        }\r\n\r\n        // be sure we'll update the scene even if drawing is disabled\r\n        this.needRender();\r\n    }\r\n\r\n\r\n    /*** CLEAR SCENE ***/\r\n\r\n    /***\r\n     Clear our WebGL scene colors and depth\r\n     ***/\r\n    clear() {\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL scene depth\r\n     ***/\r\n    clearDepth() {\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL scene colors and depth\r\n     ***/\r\n    clearColor() {\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n    }\r\n\r\n\r\n    /*** FRAME BUFFER OBJECTS ***/\r\n\r\n    /***\r\n     Called to bind or unbind a FBO\r\n\r\n     params:\r\n     @frameBuffer (frameBuffer): if frameBuffer is not null, bind it, unbind it otherwise\r\n     @cancelClear (bool / undefined): if we should cancel clearing the frame buffer (typically on init & resize)\r\n     ***/\r\n    bindFrameBuffer(frameBuffer, cancelClear) {\r\n        let bufferId = null;\r\n        if(frameBuffer) {\r\n            bufferId = frameBuffer.index;\r\n\r\n            // new frame buffer, bind it\r\n            if(bufferId !== this.state.frameBufferID) {\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, frameBuffer._frameBuffer);\r\n\r\n                this.gl.viewport(0, 0, frameBuffer._size.width, frameBuffer._size.height);\r\n\r\n                // if we should clear the buffer content\r\n                if(frameBuffer._shouldClear && !cancelClear) {\r\n                    this.clear();\r\n                }\r\n            }\r\n        }\r\n        else if(this.state.frameBufferID !== null) {\r\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\r\n            this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\r\n        }\r\n\r\n        this.state.frameBufferID = bufferId;\r\n    }\r\n\r\n\r\n    /*** DEPTH ***/\r\n\r\n    /***\r\n     Called to set whether the renderer will handle depth test or not\r\n     Depth test is enabled by default\r\n\r\n     params:\r\n     @setDepth (boolean): if we should enable or disable the depth test\r\n     ***/\r\n    setDepth(setDepth) {\r\n        if(setDepth && !this.state.depthTest) {\r\n            this.state.depthTest = setDepth;\r\n            // enable depth test\r\n            this.gl.enable(this.gl.DEPTH_TEST);\r\n        }\r\n        else if(!setDepth && this.state.depthTest) {\r\n            this.state.depthTest = setDepth;\r\n            // disable depth test\r\n            this.gl.disable(this.gl.DEPTH_TEST);\r\n        }\r\n    }\r\n\r\n\r\n    /*** BLEND FUNC ***/\r\n\r\n    /***\r\n     Called to set the blending function (transparency)\r\n     ***/\r\n    setBlendFunc() {\r\n        // allows transparency\r\n        // based on how three.js solves this\r\n        this.gl.enable(this.gl.BLEND);\r\n        if(this.premultipliedAlpha) {\r\n            this.gl.blendFuncSeparate(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n        }\r\n        else {\r\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n        }\r\n    }\r\n\r\n\r\n    /*** FACE CULLING ***/\r\n\r\n    /***\r\n     Called to set whether we should cull an object face or not\r\n\r\n     params:\r\n     @cullFace (boolean): what face we should cull\r\n     ***/\r\n    setFaceCulling(cullFace) {\r\n        if(this.state.cullFace !== cullFace) {\r\n            this.state.cullFace = cullFace;\r\n\r\n            if(cullFace === \"none\") {\r\n                this.gl.disable(this.gl.CULL_FACE);\r\n            }\r\n            else {\r\n                // default to back face culling\r\n                const faceCulling = cullFace === \"front\" ? this.gl.FRONT : this.gl.BACK;\r\n\r\n                this.gl.enable(this.gl.CULL_FACE);\r\n                this.gl.cullFace(faceCulling);\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Tell WebGL to use the specified program if it's not already in use\r\n\r\n     params:\r\n     @program (object): a program object\r\n     ***/\r\n    useProgram(program) {\r\n        if(this.state.currentProgramID === null || this.state.currentProgramID !== program.id) {\r\n            this.gl.useProgram(program.program);\r\n            this.state.currentProgramID = program.id;\r\n        }\r\n    }\r\n\r\n\r\n    /*** PLANES ***/\r\n\r\n\r\n    /***\r\n     Removes a Plane element (that has already been disposed) from the scene and the planes array\r\n\r\n     params:\r\n     @plane (Plane object): the plane to remove\r\n     ***/\r\n    removePlane(plane) {\r\n        if(!this.gl) return;\r\n\r\n        // remove from our planes array\r\n        this.planes = this.planes.filter(element => element.uuid !== plane.uuid);\r\n\r\n        // remove from scene stacks\r\n        this.scene.removePlane(plane);\r\n\r\n        plane = null;\r\n\r\n        // clear the buffer to clean scene\r\n        if(this.gl) this.clear();\r\n\r\n        // we've removed an object, keep Curtains class in sync with our renderer\r\n        this.onSceneChange();\r\n    }\r\n\r\n\r\n    /*** POST PROCESSING ***/\r\n\r\n\r\n    /***\r\n     Completely remove a RenderTarget element\r\n\r\n     params:\r\n     @renderTarget (RenderTarget object): the render target to remove\r\n     ***/\r\n    removeRenderTarget(renderTarget) {\r\n        if(!this.gl) return;\r\n\r\n        let hasPlane = this.planes.find(plane => plane.type !== \"PingPongPlane\" && plane.target && plane.target.uuid === renderTarget.uuid);\r\n\r\n        // loop through all planes that might use that render target and reset it\r\n        for(let i = 0; i < this.planes.length; i++) {\r\n            if(this.planes[i].target && this.planes[i].target.uuid === renderTarget.uuid) {\r\n                this.planes[i].target = null;\r\n            }\r\n        }\r\n\r\n        this.renderTargets = this.renderTargets.filter(element => element.uuid !== renderTarget.uuid);\r\n\r\n        // update render target indexes\r\n        for(let i = 0; i < this.renderTargets.length; i++) {\r\n            this.renderTargets[i].index = i;\r\n        }\r\n\r\n        renderTarget = null;\r\n\r\n        // clear the buffer to clean scene\r\n        if(this.gl) this.clear();\r\n\r\n        // we had at least a plane that was rendered in this render targets stack\r\n        // re init stacks\r\n        if(hasPlane) {\r\n            this.scene.resetPlaneStacks();\r\n        }\r\n\r\n        // we've removed an object, keep Curtains class in sync with our renderer\r\n        this.onSceneChange();\r\n    }\r\n\r\n\r\n    /*** SHADER PASSES ***/\r\n\r\n\r\n    /***\r\n     Removes a ShaderPass element (that has already been disposed) from the scene and the shaderPasses array\r\n\r\n     params:\r\n     @shaderPass (ShaderPass object): the shader pass to remove\r\n     ***/\r\n    removeShaderPass(shaderPass) {\r\n        if(!this.gl) return;\r\n\r\n        // remove from shaderPasses our array\r\n        this.shaderPasses = this.shaderPasses.filter(element => element.uuid !== shaderPass.uuid);\r\n\r\n        // remove from scene stacks\r\n        this.scene.removeShaderPass(shaderPass);\r\n\r\n        shaderPass = null;\r\n\r\n        // clear the buffer to clean scene\r\n        if(this.gl) this.clear();\r\n\r\n        // we've removed an object, keep Curtains class in sync with our renderer\r\n        this.onSceneChange();\r\n    }\r\n\r\n\r\n    /***\r\n     Enables the render loop\r\n     ***/\r\n    enableDrawing() {\r\n        this.state.drawingEnabled = true;\r\n    }\r\n\r\n    /***\r\n     Disables the render loop\r\n     ***/\r\n    disableDrawing() {\r\n        this.state.drawingEnabled = false;\r\n    }\r\n\r\n    /***\r\n     Forces the rendering of the next frame, even if disabled\r\n     ***/\r\n    needRender() {\r\n        this.state.forceRender = true;\r\n    }\r\n\r\n    /***\r\n     Called at each draw call to render our scene and its content\r\n     Also execute our nextRender callback queue\r\n     ***/\r\n    render() {\r\n        if(!this.gl) return;\r\n\r\n        // clear scene first\r\n        this.clear();\r\n\r\n        // reset attributes buffer state\r\n        this.state.currentGeometryID = null;\r\n\r\n        // draw our scene content\r\n        this.scene.draw();\r\n    }\r\n\r\n\r\n    /*** DISPOSING ***/\r\n\r\n    /***\r\n     Delete all cached programs\r\n     ***/\r\n    deletePrograms() {\r\n        // delete all programs from manager\r\n        for(let i = 0; i < this.cache.programs.length; i++) {\r\n            const program = this.cache.programs[i];\r\n            this.gl.deleteProgram(program.program);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Dispose our WebGL context and all its objects\r\n     ***/\r\n    dispose() {\r\n        if(!this.gl) return;\r\n\r\n        this.state.isActive = false;\r\n\r\n        // be sure to delete all planes\r\n        while(this.planes.length > 0) {\r\n            this.removePlane(this.planes[0]);\r\n        }\r\n\r\n        // we need to delete the shader passes also\r\n        while(this.shaderPasses.length > 0) {\r\n            this.removeShaderPass(this.shaderPasses[0]);\r\n        }\r\n\r\n        // finally we need to delete the render targets\r\n        while(this.renderTargets.length > 0) {\r\n            this.removeRenderTarget(this.renderTargets[0]);\r\n        }\r\n\r\n        // wait for all planes to be deleted before stopping everything\r\n        let disposeQueue = this.nextRender.add(() => {\r\n            if(this.planes.length === 0 && this.shaderPasses.length === 0 && this.renderTargets.length === 0) {\r\n                // clear from callback queue\r\n                disposeQueue.keep = false;\r\n\r\n                this.deletePrograms();\r\n\r\n                // clear the buffer to clean scene\r\n                this.clear();\r\n\r\n                this.canvas.removeEventListener(\"webgllost\", this._contextLostHandler, false);\r\n                this.canvas.removeEventListener(\"webglrestored\", this._contextRestoredHandler, false);\r\n\r\n                // lose context\r\n                if(this.gl && this.extensions['WEBGL_lose_context']) {\r\n                    this.extensions['WEBGL_lose_context'].loseContext();\r\n                }\r\n\r\n                // clear canvas state\r\n                this.canvas.width = this.canvas.width;\r\n\r\n                this.gl = null;\r\n\r\n                // remove canvas from DOM\r\n                this.container.removeChild(this.canvas);\r\n\r\n                this.container = null;\r\n                this.canvas = null;\r\n\r\n                this.onDisposed && this.onDisposed();\r\n            }\r\n        }, true);\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/Renderer.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/Scene.js":
/*!****************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/Scene.js ***!
  \****************************************************/
/*! exports provided: Scene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scene\", function() { return Scene; });\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n/***\r\n Here we create our Scene object\r\n The Scene will stack all the objects that will be drawn (planes and shader passes) in different arrays, and call them in the right order to be drawn.\r\n\r\n Based on the concept exposed here https://webgl2fundamentals.org/webgl/lessons/webgl-drawing-multiple-things.html\r\n The idea is to optimize the order of the rendered object so that the WebGL calls are kept to a strict minimum\r\n\r\n Here's the whole draw process order:\r\n - first we draw the ping pong planes\r\n - if needed, we bind the first scene pass frame buffer\r\n - draw all the planes that are rendered onto a render target (render pass)\r\n - draw the planes from the first render target created, ordered by their renderOrder then indexes (first added first drawn) order\r\n - draw the planes from the second render target created, etc.\r\n - draw the render passes content (depth buffer is cleared after each pass)\r\n - draw the transparent planes ordered by renderOrder, Z positions, program IDs if programs are shared, geometry IDs and then indexes (first added first drawn)\r\n - draw the opaque planes ordered by renderOrder, program IDs if programs are shared, geometry IDs and then indexes (first added first drawn)\r\n - draw the scene passes content\r\n\r\n params:\r\n @renderer (Renderer class object): our renderer class object\r\n\r\n returns :\r\n @this: our Scene\r\n ***/\r\n\r\nclass Scene {\r\n    constructor(renderer) {\r\n        this.type = \"Scene\";\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwError\"])(this.type + \": Renderer not passed as first argument\", renderer);\r\n        }\r\n        else if(!renderer.gl) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwError\"])(this.type + \": Renderer WebGL context is undefined\", renderer);\r\n        }\r\n\r\n        this.renderer = renderer;\r\n        this.gl = renderer.gl;\r\n\r\n        this.initStacks();\r\n    }\r\n\r\n    /***\r\n     Init our Scene stacks object\r\n     ***/\r\n    initStacks() {\r\n        this.stacks = {\r\n            // planes\r\n            \"pingPong\": [],\r\n            \"renderTargets\": [],\r\n            \"opaque\": [],\r\n            \"transparent\": [],\r\n\r\n            // post processing\r\n            \"renderPasses\": [],\r\n            \"scenePasses\": [],\r\n        };\r\n    }\r\n\r\n    /*** RESET STACKS ***/\r\n\r\n    /***\r\n     Reset the plane stacks (used when disposing a plane)\r\n     ***/\r\n    resetPlaneStacks() {\r\n        // clear the plane stacks\r\n        this.stacks.pingPong = [];\r\n        this.stacks.renderTargets = [];\r\n        this.stacks.opaque = [];\r\n        this.stacks.transparent = [];\r\n\r\n        // rebuild them with the new plane indexes\r\n        for(let i = 0; i < this.renderer.planes.length; i++) {\r\n            this.addPlane(this.renderer.planes[i]);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Reset the shader pass stacks (used when disposing a shader pass)\r\n     ***/\r\n    resetShaderPassStacks() {\r\n        // now rebuild the drawStacks\r\n        // start by clearing all drawstacks\r\n        this.stacks.scenePasses = [];\r\n        this.stacks.renderPasses = [];\r\n\r\n        // restack our planes with new indexes\r\n        for(let i = 0; i < this.renderer.shaderPasses.length; i++) {\r\n            this.renderer.shaderPasses[i].index = i;\r\n            if(this.renderer.shaderPasses[i]._isScenePass) {\r\n                this.stacks.scenePasses.push(this.renderer.shaderPasses[i]);\r\n            }\r\n            else {\r\n                this.stacks.renderPasses.push(this.renderer.shaderPasses[i]);\r\n            }\r\n        }\r\n\r\n        // reset the scenePassIndex if needed\r\n        if(this.stacks.scenePasses.length === 0) {\r\n            this.renderer.state.scenePassIndex = null;\r\n        }\r\n    }\r\n\r\n    /*** ADDING PLANES ***/\r\n\r\n\r\n    /***\r\n     Add a plane to our renderTargets stack\r\n\r\n     params:\r\n     @plane (Plane object): plane to add to our stack\r\n     ***/\r\n    addToRenderTargetsStack(plane) {\r\n        // find all planes that are rendered onto a render target\r\n        const renderTargetsPlanes = this.renderer.planes.filter(el => el.type !== \"PingPongPlane\" && el.target && el.uuid !== plane.uuid);\r\n\r\n        // is there any plane that is already rendered onto that plane's render target?\r\n        let siblingPlaneIndex = -1;\r\n        if(plane.target._depth) {\r\n            // findLastIndex\r\n            for (let i = renderTargetsPlanes.length - 1; i >= 0; i--) {\r\n                if (renderTargetsPlanes[i].target.uuid === plane.target.uuid) {\r\n                    siblingPlaneIndex = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // findIndex\r\n            siblingPlaneIndex = renderTargetsPlanes.findIndex(el => el.target.uuid === plane.target.uuid);\r\n        }\r\n\r\n        // if findIndex returned -1, just push the plane\r\n        siblingPlaneIndex = Math.max(0, siblingPlaneIndex);\r\n        renderTargetsPlanes.splice(siblingPlaneIndex, 0, plane);\r\n\r\n        // sort by index (order of addition) then render order, depending on whether the render target handle depth or not\r\n        if(plane.target._depth) {\r\n            renderTargetsPlanes.sort((a, b) => a.index - b.index);\r\n            renderTargetsPlanes.sort((a, b) => b.renderOrder - a.renderOrder);\r\n        }\r\n        else {\r\n            renderTargetsPlanes.sort((a, b) => b.index - a.index);\r\n            renderTargetsPlanes.sort((a, b) => a.renderOrder - b.renderOrder);\r\n        }\r\n\r\n        // sort by render targets order\r\n        renderTargetsPlanes.sort((a, b) => a.target.index - b.target.index);\r\n\r\n        this.stacks.renderTargets = renderTargetsPlanes;\r\n    }\r\n\r\n\r\n    /***\r\n     Rebuilds our regular stack (transparent or opaque) with our plane added, ordered by program IDs if programs are shared, geometry IDs and then indexes (first added first drawn)\r\n\r\n     params:\r\n     @plane (Plane object): plane to add to our stack\r\n\r\n     returns:\r\n     @planeStack (array): our transparent or opaque stack ready to be applied custom sorting filter\r\n     ***/\r\n    addToRegularPlaneStack(plane) {\r\n        // get all planes that have same transparency\r\n        const planeStack = this.renderer.planes.filter(el => el.type !== \"PingPongPlane\" && !el.target && el._transparent === plane._transparent && el.uuid !== plane.uuid);\r\n\r\n        // find first one that match this geometry\r\n        let siblingPlaneIndex = -1;\r\n\r\n        if(plane.shareProgram) {\r\n            // if plane shares its program, find if there's already a plane with that program with a findLastIndex function\r\n            for(let i = planeStack.length - 1; i >= 0; i--) {\r\n                if(planeStack[i]._program.id === plane._program.id) {\r\n                    siblingPlaneIndex = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // else find if there's already a plane with the same geometry with a findLastIndex function\r\n            for(let i = planeStack.length - 1; i >= 0; i--) {\r\n                if(planeStack[i]._geometry.definition.id === plane._geometry.definition.id) {\r\n                    siblingPlaneIndex = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // if findIndex returned -1 (no matching geometry or program)\r\n        siblingPlaneIndex = Math.max(0, siblingPlaneIndex);\r\n\r\n        // add it to our stack plane array\r\n        planeStack.splice(siblingPlaneIndex, 0, plane);\r\n\r\n        // sort by indexes\r\n        planeStack.sort((a, b) => a.index - b.index);\r\n\r\n        return planeStack;\r\n    }\r\n\r\n    /***\r\n     This function will add a plane into one of our 4 stacks : pingPong, renderTargets, transparent and opaque\r\n     - pingPong is just a simple array (ordered by order of creation)\r\n     - renderTargets array is ordered by render target creation order, planes renderOrder value and then planes indexes (order of creation)\r\n     - transparent array is ordered by renderOrder, Z positions, program IDs if programs are shared, geometry IDs and then indexes (first added first drawn)\r\n     - opaque array is ordered by renderOrder, program IDs if programs are shared, geometry IDs and then indexes (first added first drawn)\r\n\r\n     This is done to improve speed, notably when using shared programs, and reduce GL calls\r\n\r\n     params:\r\n     @plane (Plane object): plane to add to our scene\r\n     ***/\r\n    addPlane(plane) {\r\n        if(plane.type === \"PingPongPlane\") {\r\n            this.stacks.pingPong.push(plane);\r\n        }\r\n        else if(plane.target) {\r\n            this.addToRenderTargetsStack(plane);\r\n        }\r\n        else {\r\n            if(plane._transparent) {\r\n                // rebuild a stack of all transparent planes\r\n                const planeStack = this.addToRegularPlaneStack(plane);\r\n\r\n                // sort by their depth position\r\n                planeStack.sort((a, b) => b.relativeTranslation.z - a.relativeTranslation.z);\r\n\r\n                // then sort by their render order\r\n                planeStack.sort((a, b) => b.renderOrder - a.renderOrder);\r\n\r\n                this.stacks.transparent = planeStack;\r\n            }\r\n            else {\r\n                // rebuild a stack of all opaque planes\r\n                const planeStack = this.addToRegularPlaneStack(plane);\r\n\r\n                // then sort by their render order\r\n                planeStack.sort((a, b) => b.renderOrder - a.renderOrder);\r\n\r\n                this.stacks.opaque = planeStack;\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     This function will remove a plane from our scene. This just reset the plane stacks for now.\r\n     Useful if we'd want to change the way our draw stacks work and keep the logic separated from our renderer\r\n\r\n     params:\r\n     @plane (Plane object): plane to remove from our scene\r\n     ***/\r\n    removePlane(plane) {\r\n        if(plane.type === \"PingPongPlane\") {\r\n            this.stacks.pingPong = this.stacks.pingPong.filter(el => el.uuid !== plane.uuid);\r\n        }\r\n        else if(plane.target) {\r\n            this.stacks.renderTargets = this.stacks.renderTargets.filter(el => el.uuid !== plane.uuid);\r\n        }\r\n        else {\r\n            if(plane._transparent) {\r\n                this.stacks.transparent = this.stacks.transparent.filter(el => el.uuid !== plane.uuid);\r\n            }\r\n            else {\r\n                this.stacks.opaque = this.stacks.opaque.filter(el => el.uuid !== plane.uuid);\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Changing the position of a plane inside the correct plane stack to render it on above or behind the other planes\r\n\r\n     params:\r\n     @plane (Plane object): the plane that had its renderOrder property updated\r\n     ***/\r\n    setPlaneRenderOrder(plane) {\r\n        if(plane.type === \"ShaderPass\") {\r\n            this.sortShaderPassStack(plane._isScenePass ? this.stacks.scenePasses : this.stacks.renderPasses);\r\n        }\r\n        else if(plane.type === \"PingPongPlane\") {\r\n            // this does not makes any sense for ping pong planes\r\n            return;\r\n        }\r\n\r\n        if(plane.target) {\r\n            // sort by index (order of addition) then render order, depending on whether the render target handle depth or not\r\n            if(plane.target._depth) {\r\n                this.stacks.renderTargets.sort((a, b) => a.index - b.index);\r\n                this.stacks.renderTargets.sort((a, b) => b.renderOrder - a.renderOrder);\r\n            }\r\n            else {\r\n                this.stacks.renderTargets.sort((a, b) => b.index - a.index);\r\n                this.stacks.renderTargets.sort((a, b) => a.renderOrder - b.renderOrder);\r\n            }\r\n\r\n            // then sort by render targets order\r\n            this.stacks.renderTargets.sort((a, b) => a.target.index - b.target.index);\r\n        }\r\n        else {\r\n            const planeStack = plane._transparent ?\r\n                this.stacks.transparent\r\n                : this.stacks.opaque;\r\n\r\n            // if the first drawn scene pass does not handle depth, we'll have to sort them in the inverse order\r\n            const scenePassWithoutDepth = this.stacks.scenePasses.find((pass, index) => pass._isScenePass && !pass._depth && index === 0);\r\n\r\n            if(!this.renderer.depth || scenePassWithoutDepth) {\r\n                // inverted sorting\r\n\r\n                // sort by indexes\r\n                planeStack.sort((a, b) => b.index - a.index);\r\n\r\n                if(plane._transparent) {\r\n                    // if plane is transparent, sort by their depth position\r\n                    planeStack.sort((a, b) => a.relativeTranslation.z - b.relativeTranslation.z);\r\n                }\r\n\r\n                // then sort by render order\r\n                planeStack.sort((a, b) => a.renderOrder - b.renderOrder);\r\n            }\r\n            else {\r\n                // regular sorting\r\n\r\n                // sort by indexes\r\n                planeStack.sort((a, b) => a.index - b.index);\r\n\r\n                if(plane._transparent) {\r\n                    // if plane is transparent, sort by their depth position\r\n                    planeStack.sort((a, b) => b.relativeTranslation.z - a.relativeTranslation.z);\r\n                }\r\n\r\n                // then sort by render order\r\n                planeStack.sort((a, b) => b.renderOrder - a.renderOrder);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*** ADDING POST PROCESSING ***/\r\n\r\n    /***\r\n     Add a shader pass to the stack\r\n\r\n     params:\r\n     @shaderPass (ShaderPass object): shaderPass to add to our scene\r\n     ***/\r\n    addShaderPass(shaderPass) {\r\n        if(!shaderPass._isScenePass) {\r\n            this.stacks.renderPasses.push(shaderPass);\r\n            this.sortShaderPassStack(this.stacks.renderPasses);\r\n        }\r\n        else {\r\n            this.stacks.scenePasses.push(shaderPass);\r\n            this.sortShaderPassStack(this.stacks.scenePasses);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This function will remove a shader pass from our scene. This just reset the shaderPass stacks for now.\r\n     Useful if we'd want to change the way our draw stacks work and keep the logic separated from our renderer\r\n\r\n     params:\r\n     @shaderPass (ShaderPass object): shader pass to remove from our scene\r\n     ***/\r\n    removeShaderPass(shaderPass) {\r\n        this.resetShaderPassStacks();\r\n    }\r\n\r\n\r\n    /***\r\n     Sorts the shader pass stack by index then by renderOrder property\r\n\r\n     params:\r\n     @passStack (array): which shader pass stack (scenePasses or renderPasses) to sort\r\n     ***/\r\n    sortShaderPassStack(passStack) {\r\n        passStack.sort((a, b) => a.index - b.index);\r\n        passStack.sort((a, b) => a.renderOrder - b.renderOrder);\r\n    }\r\n\r\n    /*** DRAWING SCENE ***/\r\n\r\n    /***\r\n     Enable the first Shader pass scene pass\r\n     ***/\r\n    enableShaderPass() {\r\n        if(this.stacks.scenePasses.length && this.stacks.renderPasses.length === 0 && this.renderer.planes.length) {\r\n            this.renderer.state.scenePassIndex = 0;\r\n            this.renderer.bindFrameBuffer(this.stacks.scenePasses[0].target);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Draw the render passes\r\n     ***/\r\n    drawRenderPasses() {\r\n        // if we got one or multiple scene passes after the render passes, bind the first scene pass here\r\n        if(this.stacks.scenePasses.length && this.stacks.renderPasses.length && this.renderer.planes.length) {\r\n            this.renderer.state.scenePassIndex = 0;\r\n            this.renderer.bindFrameBuffer(this.stacks.scenePasses[0].target);\r\n        }\r\n\r\n        for(let i = 0; i < this.stacks.renderPasses.length; i++) {\r\n            this.stacks.renderPasses[i]._startDrawing();\r\n\r\n            // we need to clear our depth buffer to display previously drawn render passes\r\n            this.renderer.clearDepth();\r\n        }\r\n    }\r\n\r\n    /***\r\n     Draw the scene passes\r\n     ***/\r\n    drawScenePasses() {\r\n        // then the scene passes\r\n        for(let i = 0; i < this.stacks.scenePasses.length; i++) {\r\n            this.stacks.scenePasses[i]._startDrawing();\r\n        }\r\n    }\r\n\r\n    /***\r\n     Loop through the special ping pong planes stack and draw its planes\r\n     ***/\r\n    drawPingPongStack() {\r\n        for(let i = 0; i < this.stacks.pingPong.length; i++) {\r\n            const plane = this.stacks.pingPong[i];\r\n            // be sure the plane exists\r\n            if(plane) {\r\n                // draw the plane\r\n                plane._startDrawing();\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Loop through one of our stack (renderTargets, opaque or transparent objects) and draw its planes\r\n     ***/\r\n    drawStack(stackType) {\r\n        for(let i = 0; i < this.stacks[stackType].length; i++) {\r\n            const plane = this.stacks[stackType][i];\r\n            // be sure the plane exists\r\n            if(plane) {\r\n                // draw the plane\r\n                plane._startDrawing();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Draw our scene content\r\n     ***/\r\n    draw() {\r\n        // always draw our ping pong planes first!\r\n        this.drawPingPongStack();\r\n\r\n        // enable first frame buffer for shader passes if needed\r\n        this.enableShaderPass();\r\n\r\n        // our planes that are drawn onto a render target\r\n        this.drawStack(\"renderTargets\");\r\n\r\n        // then draw the content of our render targets render passes\r\n        this.drawRenderPasses();\r\n\r\n        // draw the transparent planes\r\n        this.drawStack(\"transparent\");\r\n\r\n        // then the opaque ones\r\n        this.drawStack(\"opaque\");\r\n\r\n        // now draw the render targets scene passes\r\n        this.drawScenePasses();\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/Scene.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/Texture.js":
/*!******************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/Texture.js ***!
  \******************************************************/
/*! exports provided: Texture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Texture\", function() { return Texture; });\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Mat4.js */ \"../node_modules/curtainsjs/src/math/Mat4.js\");\n/* harmony import */ var _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vec2.js */ \"../node_modules/curtainsjs/src/math/Vec2.js\");\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Vec3.js */ \"../node_modules/curtainsjs/src/math/Vec3.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n\r\n\r\n\r\n/***\r\n Texture class objects used by render targets, shader passes and planes.\r\n\r\n params:\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n\r\n @isFBOTexture (bool): Whether this texture is used by a render target/frame buffer object. Default to false\r\n @fromTexture (bool): Whether this texture should copy another texture right from init (and avoid creating a new webgl texture). Default to false\r\n @loader (TextureLoader class object): loader used to create that texture and load its source. Default to null\r\n\r\n @sampler (string): the texture sampler's name that will be used in the shaders\r\n\r\n @floatingPoint (string): texture floating point to apply. Could be \"float\", \"half-float\" or \"none\". Default to \"none\"\r\n\r\n @premultiplyAlpha (bool): Whether this texture should handle premultiplied alpha. Default to false\r\n @anisotropy (int): Texture anisotropy (see https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic). Default to 1\r\n @generateMipmap (bool): Whether to generate texture mipmaps (see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/generateMipmap). Default to true except for frame buffer objects textures.\r\n\r\n see https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/samplerParameter\r\n @wrapS (GLenum): WebGL constant specifying the texture wrapping function for the texture coordinate S\r\n @wrapT (GLenum): WebGL constant specifying the texture wrapping function for the texture coordinate T\r\n @minFilter (GLenum): WebGL constant specifying the texture minification filter\r\n @magFilter (GLenum): WebGL constant specifying the texture magnification filter\r\n\r\n returns:\r\n @this: our newly created Texture class object\r\n ***/\r\nclass Texture {\r\n    constructor(renderer, {\r\n        isFBOTexture = false,\r\n        fromTexture = false,\r\n        loader,\r\n\r\n        // texture sampler name\r\n        sampler,\r\n\r\n        // floating point textures\r\n        floatingPoint = \"none\",\r\n\r\n        // texture parameters\r\n        premultiplyAlpha = false,\r\n        anisotropy = 1,\r\n        generateMipmap = null,\r\n\r\n        wrapS,\r\n        wrapT,\r\n        minFilter,\r\n        magFilter,\r\n    } = {}) {\r\n        this.type = \"Texture\";\r\n\r\n        // we could pass our curtains object OR our curtains renderer object\r\n        renderer = renderer && renderer.renderer || renderer;\r\n\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwError\"])(this.type + \": Renderer not passed as first argument\", renderer);\r\n        }\r\n        else if(!renderer.gl) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwError\"])(this.type + \": Renderer WebGL context is undefined\", renderer);\r\n        }\r\n        this.renderer = renderer;\r\n        this.gl = this.renderer.gl;\r\n\r\n        this.uuid = Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"generateUUID\"])();\r\n\r\n        // texture parameters\r\n        this._globalParameters = {\r\n            // global gl context parameters\r\n            unpackAlignment: 4,\r\n            flipY: !isFBOTexture,\r\n            premultiplyAlpha,\r\n\r\n            // texImage2D properties\r\n            floatingPoint: floatingPoint,\r\n            type: this.gl.UNSIGNED_BYTE,\r\n            internalFormat: this.gl.RGBA,\r\n            format: this.gl.RGBA,\r\n        };\r\n\r\n        this.parameters = {\r\n            // per texture parameters\r\n            anisotropy,\r\n            generateMipmap: generateMipmap,\r\n\r\n            wrapS: wrapS || this.gl.CLAMP_TO_EDGE,\r\n            wrapT: wrapT || this.gl.CLAMP_TO_EDGE,\r\n            minFilter: minFilter || this.gl.LINEAR,\r\n            magFilter: magFilter || this.gl.LINEAR,\r\n\r\n            _shouldUpdate: true,\r\n        };\r\n\r\n        // per texture state\r\n        this._initState();\r\n\r\n        // is it a frame buffer object texture?\r\n        // if it's not, type will change when the source will be loaded\r\n        this.sourceType = isFBOTexture ? \"fbo\" : \"empty\";\r\n\r\n        this._samplerName = sampler;\r\n\r\n        // prepare texture sampler\r\n        this._sampler = {\r\n            isActive: false\r\n        };\r\n\r\n        // we will always declare a texture matrix\r\n        this._textureMatrix = {\r\n            matrix: new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__[\"Mat4\"]()\r\n        };\r\n\r\n        // actual size will be set later on\r\n        this._size = {\r\n            width: 0,\r\n            height: 0,\r\n        };\r\n\r\n        this.scale = new _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__[\"Vec2\"](1, 1);\r\n        this.offset = new _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__[\"Vec2\"]();\r\n\r\n        // source loading and GPU uploading flags\r\n        this._loader = loader;\r\n        this._sourceLoaded = false;\r\n        this._uploaded = false;\r\n\r\n        // _willUpdate and shouldUpdate property are set to false by default\r\n        // we will handle that in the setSource() method for videos and canvases\r\n        this._willUpdate = false;\r\n        this.shouldUpdate = false;\r\n\r\n        // if we need to force a texture update\r\n        this._forceUpdate = false;\r\n\r\n        // custom user properties\r\n        this.userData = {};\r\n\r\n        // useful flag to avoid binding texture that does not belong to current context\r\n        this._canDraw = false;\r\n\r\n        // is it set from an existing texture?\r\n        if(fromTexture) {\r\n            this._copyOnInit = true;\r\n            this._copiedFrom = fromTexture;\r\n\r\n            // everything else will be done when adding a parent to that texture\r\n            return;\r\n        }\r\n\r\n        this._copyOnInit = false;\r\n\r\n        // init our texture\r\n        this._initTexture();\r\n    }\r\n\r\n\r\n    /***\r\n     Init per-texture parameters state\r\n     Called on init and on context restoration to force parameters settings\r\n     ***/\r\n    _initState() {\r\n        this._state = {\r\n            anisotropy: 1,\r\n            generateMipmap: false,\r\n\r\n            wrapS: null,\r\n            wrapT: null,\r\n            minFilter: null,\r\n            magFilter: this.gl.LINEAR, // default to gl.LINEAR\r\n        };\r\n    }\r\n\r\n    /***\r\n     Init our texture object\r\n     ***/\r\n    _initTexture() {\r\n        // create our WebGL texture\r\n        this._sampler.texture = this.gl.createTexture();\r\n\r\n        // bind the texture the target (TEXTURE_2D) of the active texture unit.\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._sampler.texture);\r\n\r\n        if(this.sourceType === \"empty\") {\r\n            // avoid flipY on non DOM elements\r\n            this._globalParameters.flipY = false;\r\n            this._updateGlobalTexParameters();\r\n\r\n            // draw a black plane before the real texture's content has been loaded\r\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 255]));\r\n\r\n            this._canDraw = true;\r\n        }\r\n    }\r\n\r\n\r\n    /*** RESTORING CONTEXT ***/\r\n\r\n    /***\r\n     Restore a WebGL texture that is a copy\r\n     Depending on whether it's a copy from start or not, just reset its uniforms or run the full init\r\n     And finally copy our original texture back again\r\n     ***/\r\n    _restoreFromTexture() {\r\n        // init again if needed\r\n        if(!this._copyOnInit) {\r\n            this._initTexture();\r\n        }\r\n\r\n        // a texture shouldn't be restored if it does not have a parent\r\n        // since it's always the parent that calls the _restoreContext() method\r\n        if(this._parent) {\r\n            // set uniforms again\r\n            this._setTextureUniforms();\r\n\r\n            // update the texture matrix uniform as well\r\n            this._setSize();\r\n        }\r\n\r\n        // copy our texture again\r\n        this.copy(this._copiedFrom);\r\n\r\n        this._canDraw = true;\r\n    }\r\n\r\n\r\n    /***\r\n     Restore our WebGL texture\r\n     If it is an original texture, just re run the init function and eventually reset its source\r\n     If it is a texture set from another texture, wait for the original texture to be ready first\r\n     ***/\r\n    _restoreContext() {\r\n        // avoid binding that texture before reseting it\r\n        this._canDraw = false;\r\n        this._sampler.isActive = false;\r\n\r\n        this._initState();\r\n\r\n        // force mip map regeneration if needed\r\n        this._state.generateMipmap = false;\r\n        this.parameters._shouldUpdate = true;\r\n\r\n        // this is an original texture, reset it right away\r\n        if(!this._copiedFrom) {\r\n            this._initTexture();\r\n\r\n            if(this._parent) {\r\n                this._setParent();\r\n            }\r\n\r\n            if(this.source) {\r\n                this.setSource(this.source);\r\n\r\n                // cache again if it is an image\r\n                // also since it's an image it has been uploaded in setSource()\r\n                if(this.sourceType === \"image\") {\r\n                    this.renderer.cache.addTexture(this);\r\n                }\r\n                else {\r\n                    // force update\r\n                    this.needUpdate();\r\n                }\r\n            }\r\n\r\n            this._canDraw = true;\r\n        }\r\n        else {\r\n            // wait for the original texure to be ready before attempting to restore the copy\r\n            const queue = this.renderer.nextRender.add(() => {\r\n                if(this._copiedFrom._canDraw) {\r\n                    this._restoreFromTexture();\r\n                    // remove from callback queue\r\n                    queue.keep = false;\r\n                }\r\n            }, true);\r\n        }\r\n    }\r\n\r\n\r\n    /*** ADD PARENT ***/\r\n\r\n    /***\r\n     Adds a parent to a texture\r\n     Sets its index, its parent and add it to the parent textures array as well\r\n     Then runs _setParent() to set the size and uniforms if needed\r\n     ***/\r\n    addParent(parent) {\r\n        if(!parent || (parent.type !== \"Plane\" && parent.type !== \"PingPongPlane\" && parent.type !== \"ShaderPass\" && parent.type !== \"RenderTarget\")) {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": cannot add texture as a child of \", parent, \" because it is not a valid parent\");\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // add parent property\r\n        this._parent = parent;\r\n        // update parent textures array\r\n        this.index = this._parent.textures.length;\r\n        this._parent.textures.push(this);\r\n\r\n        // now set its parent for real\r\n        this._setParent();\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the parent\r\n     Basically sets the uniforms names and locations and sizes\r\n     ***/\r\n    _setParent() {\r\n        // prepare texture sampler\r\n        this._sampler.name = this._samplerName || \"uSampler\" + this.index;\r\n\r\n        // we will always declare a texture matrix\r\n        this._textureMatrix.name = this._samplerName ? this._samplerName + \"Matrix\" : \"uTextureMatrix\" + this.index;\r\n\r\n        // if the parent has a program it means its not a render target texture\r\n        if(this._parent._program) {\r\n            if(!this._parent._program.compiled) {\r\n                if(!this.renderer.production) {\r\n                    Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Unable to create the texture because the program is not valid\");\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // set uniform\r\n            this._setTextureUniforms();\r\n\r\n            if(this._copyOnInit) {\r\n                // avoid lazy initialization bugs that affect mostly PingPongPlanes\r\n                if(!this._copiedFrom._sampler.texture) {\r\n                    this._sampler.texture = this.gl.createTexture();\r\n                    this.gl.bindTexture(this.gl.TEXTURE_2D, this._sampler.texture);\r\n                }\r\n\r\n                // wait for original texture to be ready before copying it\r\n                const waitForOriginalTexture = this.renderer.nextRender.add(() => {\r\n                    if(this._copiedFrom._canDraw) {\r\n                        this.copy(this._copiedFrom);\r\n                        waitForOriginalTexture.keep = false;\r\n                    }\r\n                }, true);\r\n\r\n                // we're done!\r\n                return;\r\n            }\r\n\r\n            if(!this.source) {\r\n                // set its size based on parent element size for now\r\n                this._size = {\r\n                    width: this._parent._boundingRect.document.width,\r\n                    height: this._parent._boundingRect.document.height,\r\n                };\r\n            }\r\n            else if(this._parent.loader) {\r\n                // we're adding a parent to a texture that already has a source\r\n                // it means the source should have been loaded before the parent was set\r\n                // add it to the right asset array if needed\r\n                this._parent.loader._addSourceToParent(this.source, this.sourceType);\r\n            }\r\n\r\n            this._setSize();\r\n        }\r\n        else if(this._parent.type === \"RenderTarget\") {\r\n            // its a render target texture, it has no uniform location and no texture matrix\r\n            this._size = {\r\n                width: this._parent._size && this._parent._size.width || this.renderer._boundingRect.width,\r\n                height: this._parent._size && this._parent._size.height || this.renderer._boundingRect.height,\r\n            };\r\n\r\n            // updload to gpu\r\n            this._upload();\r\n\r\n            // update render texture parameters because it will never be drawn (hence not called)\r\n            this._updateTexParameters();\r\n\r\n            this._canDraw = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Checks if this texture has a parent\r\n\r\n     return:\r\n     @hasParent (bool): whether this texture has a parent or not\r\n     ***/\r\n    hasParent() {\r\n        return !!this._parent;\r\n    }\r\n\r\n\r\n    /*** SEND DATA TO THE GPU ***/\r\n\r\n    /***\r\n     Check if our textures is effectively used in our shaders\r\n     If so, set it to active, get its uniform locations and bind it to our texture unit\r\n     ***/\r\n    _setTextureUniforms() {\r\n        // check if our texture is used in our program shaders\r\n        // if so, get its uniform locations and bind it to our program\r\n        for(let i = 0; i < this._parent._program.activeTextures.length; i++) {\r\n            if(this._parent._program.activeTextures[i] === this._sampler.name) {\r\n                // this texture is active\r\n                this._sampler.isActive = true;\r\n\r\n                // use the program and get our sampler and texture matrices uniforms\r\n                this.renderer.useProgram(this._parent._program);\r\n\r\n                // set our texture sampler uniform\r\n                this._sampler.location = this.gl.getUniformLocation(this._parent._program.program, this._sampler.name);\r\n                // texture matrix uniform\r\n                this._textureMatrix.location = this.gl.getUniformLocation(this._parent._program.program, this._textureMatrix.name);\r\n\r\n                // tell the shader we bound the texture to our indexed texture unit\r\n                this.gl.uniform1i(this._sampler.location, this.index);\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     This copies an already existing Texture object to our texture\r\n\r\n     params:\r\n     @texture (Texture): texture to set from\r\n     ***/\r\n    copy(texture) {\r\n        if(!texture || texture.type !== \"Texture\") {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Unable to set the texture from texture:\", texture);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // copy states\r\n        this._globalParameters = texture._globalParameters;\r\n        this.parameters = texture.parameters;\r\n        this._state = texture._state;\r\n\r\n        // copy source\r\n        this._size = texture._size;\r\n\r\n        // trigger loaded callback if needed\r\n        if(!this._sourceLoaded && texture._sourceLoaded) {\r\n            this._onSourceLoadedCallback && this._onSourceLoadedCallback();\r\n        }\r\n\r\n        this._sourceLoaded = texture._sourceLoaded;\r\n\r\n        // trigger uploaded callback if needed\r\n        if(!this._uploaded && texture._uploaded) {\r\n            this._onSourceUploadedCallback && this._onSourceUploadedCallback();\r\n        }\r\n\r\n        this._uploaded = texture._uploaded;\r\n\r\n        this.sourceType = texture.sourceType;\r\n        this.source = texture.source;\r\n        this._videoFrameCallbackID = texture._videoFrameCallbackID;\r\n\r\n        // copy texture\r\n        this._sampler.texture = texture._sampler.texture;\r\n\r\n        // keep a track from the original one\r\n        this._copiedFrom = texture;\r\n\r\n\r\n        // update its texture matrix if needed and we're good to go!\r\n        if(this._parent && this._parent._program && (!this._canDraw || !this._textureMatrix.matrix)) {\r\n            this._setSize();\r\n\r\n            this._canDraw = true;\r\n        }\r\n\r\n        // force rendering\r\n        this.renderer.needRender();\r\n    }\r\n\r\n\r\n    /*** LOADING SOURCES ***/\r\n\r\n    /***\r\n     This uses our source as texture\r\n\r\n     params:\r\n     @source (images/video/canvas): either an image, a video or a canvas\r\n     ***/\r\n    setSource(source) {\r\n        // fire callback during load (useful for a loader)\r\n        if(!this._sourceLoaded) {\r\n            // texture source loaded callback\r\n            this.renderer.nextRender.add(() => this._onSourceLoadedCallback && this._onSourceLoadedCallback());\r\n        }\r\n\r\n        // check for cache\r\n        const cachedTexture = this.renderer.cache.getTextureFromSource(source);\r\n\r\n        // if we have a cached texture, just copy it\r\n        if(cachedTexture) {\r\n            // force texture uploaded callback\r\n            if(!this._uploaded) {\r\n                // GPU uploading callback\r\n                this.renderer.nextRender.add(() => this._onSourceUploadedCallback && this._onSourceUploadedCallback());\r\n\r\n                this._uploaded = true;\r\n            }\r\n\r\n            this.copy(cachedTexture);\r\n\r\n            this.resize();\r\n\r\n            return;\r\n        }\r\n\r\n        // no cached texture, proceed normally\r\n        this.source = source;\r\n\r\n        if(this.sourceType === \"empty\") {\r\n            if(source.tagName.toUpperCase() === \"IMG\") {\r\n                this.sourceType = \"image\";\r\n            }\r\n            else if(source.tagName.toUpperCase() === \"VIDEO\") {\r\n                this.sourceType = \"video\";\r\n                // a video should be updated by default\r\n                // _willUpdate property will be set to true if the video has data to draw\r\n                this.shouldUpdate = true;\r\n            }\r\n            else if(source.tagName.toUpperCase() === \"CANVAS\") {\r\n                this.sourceType = \"canvas\";\r\n                // a canvas could change each frame so we need to update it by default\r\n                this._willUpdate = true;\r\n                this.shouldUpdate = true;\r\n            }\r\n            else if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": this HTML tag could not be converted into a texture:\", source.tagName);\r\n            }\r\n        }\r\n\r\n        this._size = {\r\n            width: this.source.naturalWidth || this.source.width || this.source.videoWidth,\r\n            height: this.source.naturalHeight || this.source.height || this.source.videoHeight,\r\n        };\r\n\r\n        // our source is loaded now\r\n        this._sourceLoaded = true;\r\n\r\n        // no need to set WebGL active texture unit here, we'll do it at run time for each texture\r\n        // binding the texture is enough\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._sampler.texture);\r\n\r\n        this.resize();\r\n\r\n        // force flipY now that we have a source\r\n        this._globalParameters.flipY = true;\r\n\r\n        // upload our webgl texture only if it is an image\r\n        // canvas and video textures will be updated anyway in the rendering loop\r\n        // thanks to the shouldUpdate and _willUpdate flags\r\n        if(this.sourceType === \"image\") {\r\n            // generate mip maps if they have not been explicitly disabled\r\n            this.parameters.generateMipmap = this.parameters.generateMipmap || this.parameters.generateMipmap === null;\r\n            this.parameters._shouldUpdate = this.parameters.generateMipmap;\r\n            this._state.generateMipmap = false;\r\n\r\n            this._upload();\r\n        }\r\n\r\n        // update scene\r\n        this.renderer.needRender();\r\n    }\r\n\r\n\r\n    /*** TEXTURE PARAMETERS ***/\r\n\r\n    /***\r\n     Updates textures parameters that depends on global WebGL context state\r\n     Typically unpacking, flipY and premultiplied alpha\r\n     Usually called before uploading a texture to the GPU\r\n     ***/\r\n    _updateGlobalTexParameters() {\r\n        // unpack alignment\r\n        if(this.renderer.state.unpackAlignment !== this._globalParameters.unpackAlignment) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this._globalParameters.unpackAlignment);\r\n            this.renderer.state.unpackAlignment = this._globalParameters.unpackAlignment;\r\n        }\r\n\r\n        // flip Y\r\n        if(this.renderer.state.flipY !== this._globalParameters.flipY) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this._globalParameters.flipY);\r\n            this.renderer.state.flipY = this._globalParameters.flipY;\r\n        }\r\n\r\n        // premultiplied alpha\r\n        if(this.renderer.state.premultiplyAlpha !== this._globalParameters.premultiplyAlpha) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this._globalParameters.premultiplyAlpha);\r\n            this.renderer.state.premultiplyAlpha = this._globalParameters.premultiplyAlpha;\r\n        }\r\n\r\n        // floating point textures\r\n        if(this._globalParameters.floatingPoint === \"half-float\") {\r\n            if(this.renderer._isWebGL2 && this.renderer.extensions['EXT_color_buffer_float']) {\r\n                this._globalParameters.internalFormat = this.gl.RGBA16F;\r\n                this._globalParameters.type = this.gl.HALF_FLOAT;\r\n            }\r\n            else if(this.renderer.extensions['OES_texture_half_float']) {\r\n                this._globalParameters.type = this.renderer.extensions['OES_texture_half_float'].HALF_FLOAT_OES;\r\n            }\r\n            else if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": could not use half-float textures because the extension is not available\");\r\n            }\r\n        }\r\n        else if(this._globalParameters.floatingPoint === \"float\") {\r\n            if(this.renderer._isWebGL2 && this.renderer.extensions['EXT_color_buffer_float']) {\r\n                this._globalParameters.internalFormat = this.gl.RGBA16F;\r\n                this._globalParameters.type = this.gl.FLOAT;\r\n            }\r\n            else if(this.renderer.extensions['OES_texture_float']) {\r\n                this._globalParameters.type = this.renderer.extensions['OES_texture_half_float'].FLOAT;\r\n            }\r\n            else if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": could not use float textures because the extension is not available\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Updates per-textures parameters\r\n     Wrapping, filters, anisotropy and mipmaps generation\r\n     Usually called after uploading a texture to the GPU\r\n     ***/\r\n    _updateTexParameters() {\r\n        // be sure we're updating the right texture\r\n        if(this.index && this.renderer.state.activeTexture !== this.index) {\r\n            this._bindTexture(this);\r\n        }\r\n\r\n        // wrapS\r\n        if(this.parameters.wrapS !== this._state.wrapS) {\r\n            if(!this.renderer._isWebGL2 && (!Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.width) || !Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.height))) {\r\n                this.parameters.wrapS = this.gl.CLAMP_TO_EDGE;\r\n            }\r\n\r\n            // handle wrong wrapS values\r\n            if(\r\n                this.parameters.wrapS !== this.gl.REPEAT\r\n                && this.parameters.wrapS !== this.gl.CLAMP_TO_EDGE\r\n                && this.parameters.wrapS !== this.gl.MIRRORED_REPEAT\r\n            ) {\r\n                if(!this.renderer.production) {\r\n                    Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Wrong wrapS value\", this.parameters.wrapS, \"for this texture:\", this, \"\\ngl.CLAMP_TO_EDGE wrapping will be used instead\");\r\n                }\r\n                this.parameters.wrapS = this.gl.CLAMP_TO_EDGE;\r\n            }\r\n\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.parameters.wrapS);\r\n            this._state.wrapS = this.parameters.wrapS;\r\n        }\r\n\r\n        // wrapT\r\n        if(this.parameters.wrapT !== this._state.wrapT) {\r\n            if(!this.renderer._isWebGL2 && (!Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.width) || !Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.height))) {\r\n                this.parameters.wrapT = this.gl.CLAMP_TO_EDGE;\r\n            }\r\n\r\n            // handle wrong wrapT values\r\n            if(\r\n                this.parameters.wrapT !== this.gl.REPEAT\r\n                && this.parameters.wrapT !== this.gl.CLAMP_TO_EDGE\r\n                && this.parameters.wrapT !== this.gl.MIRRORED_REPEAT\r\n            ) {\r\n                if(!this.renderer.production) {\r\n                    Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Wrong wrapT value\", this.parameters.wrapT, \"for this texture:\", this, \"\\ngl.CLAMP_TO_EDGE wrapping will be used instead\");\r\n                }\r\n                this.parameters.wrapT = this.gl.CLAMP_TO_EDGE;\r\n            }\r\n\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.parameters.wrapT);\r\n            this._state.wrapT = this.parameters.wrapT;\r\n        }\r\n\r\n        // generate mip map only if it has a source\r\n        if(this.parameters.generateMipmap && !this._state.generateMipmap && this.source) {\r\n            if(!this.renderer._isWebGL2 && (!Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.width) || !Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.height))) {\r\n                this.parameters.generateMipmap = false;\r\n            }\r\n            else {\r\n                this.gl.generateMipmap(this.gl.TEXTURE_2D);\r\n            }\r\n\r\n            this._state.generateMipmap = this.parameters.generateMipmap;\r\n        }\r\n\r\n        // min filter\r\n        if(this.parameters.minFilter !== this._state.minFilter) {\r\n            // WebGL1 and non PO2\r\n            if(!this.renderer._isWebGL2 && (!Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.width) || !Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.height))) {\r\n                this.parameters.minFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            // at this point if generateMipmap is null it means we will generate them later on\r\n            if(!this.parameters.generateMipmap && this.parameters.generateMipmap !== null) {\r\n                this.parameters.minFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            // handle wrong minFilter values\r\n            if(\r\n                this.parameters.minFilter !== this.gl.LINEAR\r\n                && this.parameters.minFilter !== this.gl.NEAREST\r\n                && this.parameters.minFilter !== this.gl.NEAREST_MIPMAP_NEAREST\r\n                && this.parameters.minFilter !== this.gl.LINEAR_MIPMAP_NEAREST\r\n                && this.parameters.minFilter !== this.gl.NEAREST_MIPMAP_LINEAR\r\n                && this.parameters.minFilter !== this.gl.LINEAR_MIPMAP_LINEAR\r\n            ) {\r\n                if(!this.renderer.production) {\r\n                    Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Wrong minFilter value\", this.parameters.minFilter, \"for this texture:\", this, \"\\ngl.LINEAR filtering will be used instead\");\r\n                }\r\n                this.parameters.minFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.parameters.minFilter);\r\n            this._state.minFilter = this.parameters.minFilter;\r\n        }\r\n\r\n        // mag filter\r\n        if(this.parameters.magFilter !== this._state.magFilter) {\r\n            if(!this.renderer._isWebGL2 && (!Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.width) || !Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"isPowerOf2\"])(this._size.height))) {\r\n                this.parameters.magFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            // handle wrong magFilter values\r\n            if(\r\n                this.parameters.magFilter !== this.gl.LINEAR\r\n                && this.parameters.magFilter !== this.gl.NEAREST\r\n            ) {\r\n                if(!this.renderer.production) {\r\n                    Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Wrong magFilter value\", this.parameters.magFilter, \"for this texture:\", this, \"\\ngl.LINEAR filtering will be used instead\");\r\n                }\r\n                this.parameters.magFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.parameters.magFilter);\r\n            this._state.magFilter = this.parameters.magFilter;\r\n        }\r\n\r\n        // anisotropy\r\n        const anisotropyExt = this.renderer.extensions['EXT_texture_filter_anisotropic'];\r\n        if(anisotropyExt && this.parameters.anisotropy !== this._state.anisotropy) {\r\n            const max = this.gl.getParameter(anisotropyExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\r\n            this.parameters.anisotropy = Math.max(1, Math.min(this.parameters.anisotropy, max));\r\n\r\n            this.gl.texParameterf(this.gl.TEXTURE_2D, anisotropyExt.TEXTURE_MAX_ANISOTROPY_EXT, this.parameters.anisotropy);\r\n            this._state.anisotropy = this.parameters.anisotropy;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the texture wrapping for the texture coordinate S\r\n\r\n     params:\r\n     @wrapS (GLenum): WebGL constant specifying the texture wrapping function for the texture coordinate S\r\n     ***/\r\n    setWrapS(wrapS) {\r\n        if(this.parameters.wrapS !== wrapS) {\r\n            this.parameters.wrapS = wrapS;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the texture wrapping for the texture coordinate T\r\n\r\n     params:\r\n     @wrapT (GLenum): WebGL constant specifying the texture wrapping function for the texture coordinate T\r\n     ***/\r\n    setWrapT(wrapT) {\r\n        if(this.parameters.wrapT !== wrapT) {\r\n            this.parameters.wrapT = wrapT;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n    /***\r\n     Sets the texture minifaction filter value\r\n\r\n     params:\r\n     @minFilter (GLenum): WebGL constant specifying the texture minification filter\r\n     ***/\r\n    setMinFilter(minFilter) {\r\n        if(this.parameters.minFilter !== minFilter) {\r\n            this.parameters.minFilter = minFilter;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n    /***\r\n     Sets the texture magnifaction filter value\r\n\r\n     params:\r\n     @magFilter (GLenum): WebGL constant specifying the texture magnifaction filter\r\n     ***/\r\n    setMagFilter(magFilter) {\r\n        if(this.parameters.magFilter !== magFilter) {\r\n            this.parameters.magFilter = magFilter;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n    /***\r\n     Sets the texture anisotropy\r\n\r\n     params:\r\n     @anisotropy (int): Texture anisotropy value\r\n     ***/\r\n    setAnisotropy(anisotropy) {\r\n        anisotropy = isNaN(anisotropy) ? this.parameters.anisotropy : anisotropy;\r\n\r\n        if(this.parameters.anisotropy !== anisotropy) {\r\n            this.parameters.anisotropy = anisotropy;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This forces a texture to be updated on the next draw call\r\n     ***/\r\n    needUpdate() {\r\n        this._forceUpdate = true;\r\n    }\r\n\r\n\r\n    /***\r\n     This uses the requestVideoFrameCallback API to update the texture each time a new frame is displayed\r\n     ***/\r\n    _videoFrameCallback() {\r\n        this._willUpdate = true;\r\n        this.source.requestVideoFrameCallback(() => this._videoFrameCallback());\r\n    }\r\n\r\n\r\n    /***\r\n     This updloads our texture to the GPU\r\n     Called on init or inside our drawing loop if shouldUpdate property is set to true\r\n     Typically used by videos or canvas\r\n     ***/\r\n    _upload() {\r\n        // set parameters that need to be set before texture uploading\r\n        this._updateGlobalTexParameters();\r\n\r\n        if(this.source) {\r\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this._globalParameters.internalFormat, this._globalParameters.format, this._globalParameters.type, this.source);\r\n        }\r\n        else if(this.sourceType === \"fbo\") {\r\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this._globalParameters.internalFormat, this._size.width, this._size.height, 0, this._globalParameters.format, this._globalParameters.type, this.source);\r\n        }\r\n\r\n        // texture has been uploaded\r\n        if(!this._uploaded) {\r\n            // GPU uploading callback\r\n            this.renderer.nextRender.add(() => this._onSourceUploadedCallback && this._onSourceUploadedCallback());\r\n\r\n            this._uploaded = true;\r\n        }\r\n    }\r\n\r\n\r\n    /*** TEXTURE SIZINGS ***/\r\n\r\n\r\n    /***\r\n     This is used to calculate how to crop/center an texture\r\n\r\n     returns:\r\n     @sizes (obj): an object containing plane sizes, source sizes and x and y offset to center the source in the plane\r\n     ***/\r\n    _getSizes() {\r\n        // if this is a fbo texture, its size is the same as its parent\r\n        if(this.sourceType === \"fbo\") {\r\n            return {\r\n                parentWidth: this._parent._boundingRect.document.width,\r\n                parentHeight: this._parent._boundingRect.document.height,\r\n                sourceWidth: this._parent._boundingRect.document.width,\r\n                sourceHeight: this._parent._boundingRect.document.height,\r\n                xOffset: 0,\r\n                yOffset: 0,\r\n            };\r\n        }\r\n\r\n        // remember our ShaderPass objects don't have a scale property\r\n        const scale = this._parent.scale ? new _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__[\"Vec2\"](this._parent.scale.x, this._parent.scale.y) : new _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__[\"Vec2\"](1, 1);\r\n\r\n        const parentWidth  = this._parent._boundingRect.document.width * scale.x;\r\n        const parentHeight = this._parent._boundingRect.document.height * scale.y;\r\n\r\n        const sourceWidth = this._size.width;\r\n        const sourceHeight = this._size.height;\r\n\r\n        const sourceRatio = sourceWidth / sourceHeight;\r\n        const parentRatio = parentWidth / parentHeight;\r\n\r\n        // center image in its container\r\n        let xOffset = 0;\r\n        let yOffset = 0;\r\n\r\n        if(parentRatio > sourceRatio) { // means parent is larger\r\n            yOffset = Math.min(0, parentHeight - (parentWidth * (1 / sourceRatio)));\r\n        }\r\n        else if(parentRatio < sourceRatio) { // means parent is taller\r\n            xOffset = Math.min(0, parentWidth - (parentHeight * sourceRatio));\r\n        }\r\n\r\n        return {\r\n            parentWidth: parentWidth,\r\n            parentHeight: parentHeight,\r\n            sourceWidth: sourceWidth,\r\n            sourceHeight: sourceHeight,\r\n            xOffset: xOffset,\r\n            yOffset: yOffset,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Set the texture scale and then update its matrix\r\n\r\n     params:\r\n     @scale (Vec2 object): scale to apply on X and Y axes\r\n     ***/\r\n    setScale(scale) {\r\n        if(!scale.type || scale.type !== \"Vec2\") {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Cannot set scale because the parameter passed is not of Vec2 type:\", scale);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        scale.sanitizeNaNValuesWith(this.scale).max(new _math_Vec2_js__WEBPACK_IMPORTED_MODULE_1__[\"Vec2\"](0.001, 0.001));\r\n\r\n        if(!scale.equals(this.scale)) {\r\n            this.scale.copy(scale);\r\n\r\n            this.resize();\r\n        }\r\n    }\r\n\r\n    setOffset(offset) {\r\n        if(!offset.type || offset.type !== \"Vec2\") {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"throwWarning\"])(this.type + \": Cannot set offset because the parameter passed is not of Vec2 type:\", scale);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        offset.sanitizeNaNValuesWith(this.offset);\r\n\r\n        if(!offset.equals(this.offset)) {\r\n            this.offset.copy(offset);\r\n\r\n            this.resize();\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Gets our texture and parent sizes and tells our texture matrix to update based on those values\r\n     ***/\r\n    _setSize() {\r\n        // if we need to update the texture matrix uniform\r\n        if(this._parent && this._parent._program) {\r\n            const sizes = this._getSizes();\r\n\r\n            // always update texture matrix anyway\r\n            this._updateTextureMatrix(sizes);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This is used to crop/center a texture\r\n     If the texture is using texture matrix then we just have to update its matrix\r\n     If it is a render pass texture we also upload the texture with its new size on the GPU\r\n     ***/\r\n    resize() {\r\n        if(this.sourceType === \"fbo\") {\r\n            // update size based on parent sizes (RenderTarget or ShaderPass)\r\n            this._size = {\r\n                width: this._parent._size && this._parent._size.width || this._parent._boundingRect.document.width,\r\n                height: this._parent._size && this._parent._size.height || this._parent._boundingRect.document.height,\r\n            };\r\n\r\n            // reupload only if its not a texture set from another texture (means its a RenderTarget texture)\r\n            if(!this._copiedFrom) {\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this._sampler.texture);\r\n                this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this._globalParameters.internalFormat, this._size.width, this._size.height, 0, this._globalParameters.format, this._globalParameters.type, null);\r\n            }\r\n        }\r\n        else if(this.source) {\r\n            // reset texture sizes (useful for canvas because their dimensions might change on resize)\r\n            this._size = {\r\n                width: this.source.naturalWidth || this.source.width || this.source.videoWidth,\r\n                height: this.source.naturalHeight || this.source.height || this.source.videoHeight,\r\n            };\r\n        }\r\n\r\n        this._setSize();\r\n    }\r\n\r\n    /***\r\n     This updates our textures matrix uniform based on plane and sources sizes\r\n\r\n     params:\r\n     @sizes (object): object containing plane sizes, source sizes and x and y offset to center the source in the plane\r\n     ***/\r\n    _updateTextureMatrix(sizes) {\r\n        // calculate scale to apply to the matrix\r\n        let textureScale = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"Vec3\"](\r\n            sizes.parentWidth / (sizes.parentWidth - sizes.xOffset),\r\n            sizes.parentHeight / (sizes.parentHeight - sizes.yOffset),\r\n            1\r\n        );\r\n\r\n        // apply texture scale\r\n        textureScale.x /= this.scale.x;\r\n        textureScale.y /= this.scale.y;\r\n\r\n        // translate texture to center it\r\n        const textureTranslation = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__[\"Mat4\"]([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            (1 - textureScale.x) / 2 + this.offset.x, (1 - textureScale.y) / 2 + this.offset.y, 0, 1\r\n        ]);\r\n\r\n        // scale texture\r\n        this._textureMatrix.matrix = textureTranslation.scale(textureScale);\r\n\r\n        // update the texture matrix uniform\r\n        this._updateMatrixUniform();\r\n    }\r\n\r\n\r\n    /***\r\n     This updates our textures matrix GL uniform\r\n     ***/\r\n    _updateMatrixUniform() {\r\n        this.renderer.useProgram(this._parent._program);\r\n        this.gl.uniformMatrix4fv(this._textureMatrix.location, false, this._textureMatrix.matrix.elements);\r\n    }\r\n\r\n\r\n    /***\r\n     This calls our loading callback and set our media as texture source\r\n     ***/\r\n    _onSourceLoaded(source) {\r\n        // set the media as our texture source\r\n        this.setSource(source);\r\n\r\n        // add to the cache if needed\r\n        if(this.sourceType === \"image\") {\r\n            this.renderer.cache.addTexture(this);\r\n        }\r\n    }\r\n\r\n\r\n    /*** DRAWING ***/\r\n\r\n    /***\r\n     This is used to set the WebGL context active texture and bind it\r\n\r\n     params:\r\n     @texture (texture object): Our texture object containing our WebGL texture and its index\r\n     ***/\r\n    _bindTexture() {\r\n        if(this._canDraw) {\r\n            if(this.renderer.state.activeTexture !== this.index) {\r\n                // tell WebGL we want to affect the texture at the plane's index unit\r\n                this.gl.activeTexture(this.gl.TEXTURE0 + this.index);\r\n                this.renderer.state.activeTexture = this.index;\r\n            }\r\n\r\n            // bind the texture to the plane's index unit\r\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this._sampler.texture);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This is called to draw the texture\r\n     ***/\r\n    _draw() {\r\n        // only draw if the texture is active (used in the shader)\r\n        if(this._sampler.isActive) {\r\n            // bind the texture\r\n            this._bindTexture(this);\r\n\r\n            // if no videoFrameCallback check if the video is actually really playing\r\n            if(this.sourceType === \"video\" && this.source && !this._videoFrameCallbackID && this.source.readyState >= this.source.HAVE_CURRENT_DATA && !this.source.paused) {\r\n                this._willUpdate = true;\r\n            }\r\n\r\n            if(this._forceUpdate || (this._willUpdate && this.shouldUpdate)) {\r\n                // force mipmaps regeneration if needed\r\n                this._state.generateMipmap = false;\r\n                this._upload();\r\n            }\r\n\r\n            // reset the video willUpdate flag\r\n            if(this.sourceType === \"video\") {\r\n                this._willUpdate = false;\r\n            }\r\n\r\n            this._forceUpdate = false;\r\n\r\n            // if parent program uniform is shared, update the texture matrix uniform\r\n            if(this._parent && this._parent.shareProgram) {\r\n                this._updateMatrixUniform();\r\n            }\r\n        }\r\n\r\n        // set parameters that need to be set after texture uploading\r\n        if(this.parameters._shouldUpdate) {\r\n            this._updateTexParameters();\r\n            this.parameters._shouldUpdate = false;\r\n        }\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n\r\n    /***\r\n     This is called each time a source has been loaded for the first time\r\n     TODO useless?\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our texture to handle chaining\r\n     ***/\r\n    onSourceLoaded(callback) {\r\n        if(callback) {\r\n            this._onSourceLoadedCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This is called each time a texture has been uploaded to the GPU for the first time\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our texture to handle chaining\r\n     ***/\r\n    onSourceUploaded(callback) {\r\n        if(callback) {\r\n            this._onSourceUploadedCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /*** DESTROYING ***/\r\n\r\n    /***\r\n     This is used to destroy a texture and free the memory space\r\n     Usually used on a plane/shader pass/render target removal\r\n\r\n     params:\r\n     @force (bool, optional): force the texture to be deleted even if cached\r\n     ***/\r\n    _dispose(force = false) {\r\n        if(this.sourceType === \"video\" || this.sourceType === \"image\" && !this.renderer.state.isActive) {\r\n            // remove event listeners\r\n            if(this._loader) {\r\n                this._loader._removeSource(this);\r\n            }\r\n\r\n            // clear source\r\n            this.source = null;\r\n        }\r\n        else if(this.sourceType === \"canvas\") {\r\n            // clear all canvas states\r\n            this.source.width = this.source.width;\r\n\r\n            // clear source\r\n            this.source = null;\r\n        }\r\n\r\n        // remove its parent\r\n        this._parent = null;\r\n\r\n        // do not delete original texture if this texture is a copy, or image texture if we're not destroying the context\r\n        const shouldDelete = this.gl && !this._copiedFrom && (force || this.sourceType !== \"image\" || !this.renderer.state.isActive);\r\n\r\n        if(shouldDelete) {\r\n            this._canDraw = false;\r\n\r\n            // if the texture is in our textures cache array, remove it\r\n            this.renderer.cache.removeTexture(this);\r\n\r\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.index);\r\n            this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n            this.gl.deleteTexture(this._sampler.texture);\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/Texture.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/core/Uniforms.js":
/*!*******************************************************!*\
  !*** ../node_modules/curtainsjs/src/core/Uniforms.js ***!
  \*******************************************************/
/*! exports provided: Uniforms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uniforms\", function() { return Uniforms; });\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n/***\r\n Uniforms class manages uniforms setting and updating\r\n\r\n params:\r\n @renderer (Renderer class object): our renderer class object\r\n @program (object): our mesh's Program (see Program class object)\r\n @shared (bool): whether the program is shared or not\r\n\r\n @uniforms (object): our uniforms object:\r\n - name (string): uniform name to use in your shaders\r\n - type (uniform type): uniform type. Will try to detect it if not set (see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform)\r\n - value (float / int / Vec2 / Vec3 / Mat4 / array): initial value of the uniform\r\n\r\n returns:\r\n @this: our Uniforms manager\r\n ***/\r\n\r\nclass Uniforms {\r\n    constructor(renderer, program, shared, uniforms) {\r\n        this.type = \"Uniforms\";\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwError\"])(this.type + \": Renderer not passed as first argument\", renderer);\r\n        }\r\n        else if(!renderer.gl) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwError\"])(this.type + \": Renderer WebGL context is undefined\", renderer);\r\n        }\r\n        this.renderer = renderer;\r\n        this.gl = renderer.gl;\r\n        this.program = program;\r\n        this.shared = shared;\r\n\r\n        this.uniforms = {};\r\n\r\n        if(uniforms) {\r\n            for(const key in uniforms) {\r\n                const uniform = uniforms[key];\r\n\r\n                // fill our uniform object\r\n                this.uniforms[key] = {\r\n                    name: uniform.name,\r\n                    type: uniform.type,\r\n                    // clone value if possible, use original value else\r\n                    value: uniform.value.clone && typeof uniform.value.clone === \"function\" ? uniform.value.clone() : uniform.value,\r\n                    update: null,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Set uniforms WebGL function based on their types\r\n\r\n     params :\r\n     @uniform (object): the uniform\r\n     ***/\r\n    handleUniformSetting(uniform) {\r\n        switch(uniform.type) {\r\n            case \"1i\":\r\n                uniform.update = this.setUniform1i.bind(this);\r\n                break;\r\n            case \"1iv\":\r\n                uniform.update = this.setUniform1iv.bind(this);\r\n                break;\r\n            case \"1f\":\r\n                uniform.update = this.setUniform1f.bind(this);\r\n                break;\r\n            case \"1fv\":\r\n                uniform.update = this.setUniform1fv.bind(this);\r\n                break;\r\n\r\n            case \"2i\":\r\n                uniform.update = this.setUniform2i.bind(this);\r\n                break;\r\n            case \"2iv\":\r\n                uniform.update = this.setUniform2iv.bind(this);\r\n                break;\r\n            case \"2f\":\r\n                uniform.update = this.setUniform2f.bind(this);\r\n                break;\r\n            case \"2fv\":\r\n                uniform.update = this.setUniform2fv.bind(this);\r\n                break;\r\n\r\n            case \"3i\":\r\n                uniform.update = this.setUniform3i.bind(this);\r\n                break;\r\n            case \"3iv\":\r\n                uniform.update = this.setUniform3iv.bind(this);\r\n                break;\r\n            case \"3f\":\r\n                uniform.update = this.setUniform3f.bind(this);\r\n                break;\r\n            case \"3fv\":\r\n                uniform.update = this.setUniform3fv.bind(this);\r\n                break;\r\n\r\n            case \"4i\":\r\n                uniform.update = this.setUniform4i.bind(this);\r\n                break;\r\n            case \"4iv\":\r\n                uniform.update = this.setUniform4iv.bind(this);\r\n                break;\r\n            case \"4f\":\r\n                uniform.update = this.setUniform4f.bind(this);\r\n                break;\r\n            case \"4fv\":\r\n                uniform.update = this.setUniform4fv.bind(this);\r\n                break;\r\n\r\n            case \"mat2\":\r\n                uniform.update = this.setUniformMatrix2fv.bind(this);\r\n                break;\r\n            case \"mat3\":\r\n                uniform.update = this.setUniformMatrix3fv.bind(this);\r\n                break;\r\n            case \"mat4\":\r\n                uniform.update = this.setUniformMatrix4fv.bind(this);\r\n                break;\r\n\r\n            default:\r\n                if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwWarning\"])(this.type + \": This uniform type is not handled : \", uniform.type);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Auto detect the format of the uniform (check if its a float, an integer, a Vector, a Matrix, an array...)\r\n     Also set a lastValue property that we'll use to compare to our value property and update the uniform if it changed\r\n\r\n     params :\r\n     @uniform (object): the uniform\r\n     ***/\r\n    setInternalFormat(uniform) {\r\n        if(uniform.value.type === \"Vec2\") {\r\n            uniform._internalFormat = \"Vec2\";\r\n            uniform.lastValue = uniform.value.clone();\r\n        }\r\n        else if(uniform.value.type === \"Vec3\") {\r\n            uniform._internalFormat = \"Vec3\";\r\n            uniform.lastValue = uniform.value.clone();\r\n        }\r\n        else if(uniform.value.type === \"Mat4\") {\r\n            uniform._internalFormat = \"Mat4\";\r\n            uniform.lastValue = uniform.value.clone();\r\n        }\r\n        else if(uniform.value.type === \"Quat\") {\r\n            uniform._internalFormat = \"Quat\";\r\n            uniform.lastValue = uniform.value.clone();\r\n        }\r\n        else if(Array.isArray(uniform.value)) {\r\n            uniform._internalFormat = \"array\";\r\n            uniform.lastValue = Array.from(uniform.value);\r\n        }\r\n        else if(uniform.value.constructor === Float32Array) {\r\n            uniform._internalFormat = \"mat\";\r\n            uniform.lastValue = uniform.value;\r\n        }\r\n        else {\r\n            uniform._internalFormat = \"float\";\r\n            uniform.lastValue = uniform.value;\r\n        }\r\n    }\r\n\r\n    /***\r\n     This inits our uniforms\r\n     Sets its internal format and type if not provided then upload the uniform\r\n     ***/\r\n    setUniforms() {\r\n        // set our uniforms if we got some\r\n        if(this.uniforms) {\r\n            for(const key in this.uniforms) {\r\n                let uniform = this.uniforms[key];\r\n\r\n                // set our uniform location\r\n                uniform.location = this.gl.getUniformLocation(this.program, uniform.name);\r\n\r\n                // handle Vec2, Vec3, Mat4, floats, arrays, etc\r\n                if(!uniform._internalFormat) {\r\n                    this.setInternalFormat(uniform);\r\n                }\r\n\r\n                if(!uniform.type) {\r\n                    if(uniform._internalFormat === \"Vec2\") {\r\n                        uniform.type = \"2f\";\r\n                    }\r\n                    else if(uniform._internalFormat === \"Vec3\") {\r\n                        uniform.type = \"3f\";\r\n                    }\r\n                    else if(uniform._internalFormat === \"Mat4\") {\r\n                        uniform.type = \"mat4\";\r\n                    }\r\n                    else if(uniform._internalFormat === \"array\") {\r\n                        if(uniform.value.length === 4) {\r\n                            uniform.type = \"4f\";\r\n\r\n                            if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwWarning\"])(this.type + \": No uniform type declared for \" + uniform.name + \", applied a 4f (array of 4 floats) uniform type\");\r\n                        }\r\n                        else if(uniform.value.length === 3) {\r\n                            uniform.type = \"3f\";\r\n\r\n                            if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwWarning\"])(this.type + \": No uniform type declared for \" + uniform.name + \", applied a 3f (array of 3 floats) uniform type\");\r\n                        }\r\n                        else if(uniform.value.length === 2) {\r\n                            uniform.type = \"2f\";\r\n\r\n                            if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwWarning\"])(this.type + \": No uniform type declared for \" + uniform.name + \", applied a 2f (array of 2 floats) uniform type\");\r\n                        }\r\n                    }\r\n                    else if(uniform._internalFormat === \"mat\") {\r\n                        if(uniform.value.length === 16) {\r\n                            uniform.type = \"mat4\";\r\n\r\n                            if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwWarning\"])(this.type + \": No uniform type declared for \" + uniform.name + \", applied a mat4 (4x4 matrix array) uniform type\");\r\n                        }\r\n                        else if(uniform.value.length === 9) {\r\n                            uniform.type = \"mat3\";\r\n\r\n                            if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwWarning\"])(this.type + \": No uniform type declared for \" + uniform.name + \", applied a mat3 (3x3 matrix array) uniform type\");\r\n                        }\r\n                        else  if(uniform.value.length === 4) {\r\n                            uniform.type = \"mat2\";\r\n\r\n                            if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwWarning\"])(this.type + \": No uniform type declared for \" + uniform.name + \", applied a mat2 (2x2 matrix array) uniform type\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        uniform.type = \"1f\";\r\n\r\n                        if(!this.renderer.production) Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"throwWarning\"])(this.type + \": No uniform type declared for \" + uniform.name + \", applied a 1f (float) uniform type\");\r\n                    }\r\n                }\r\n\r\n                // set the uniforms update functions\r\n                this.handleUniformSetting(uniform);\r\n\r\n                // update the uniform\r\n                uniform.update && uniform.update(uniform);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This updates all uniforms of an object that were set by the user\r\n     It is called at each draw call\r\n     ***/\r\n    updateUniforms() {\r\n        if(this.uniforms) {\r\n            for(const key in this.uniforms) {\r\n                const uniform = this.uniforms[key];\r\n                let shouldUpdate = false;\r\n\r\n                if(!this.shared) {\r\n                    if(uniform._internalFormat === \"Vec2\") {\r\n                        if(!uniform.value.equals(uniform.lastValue)) {\r\n                            shouldUpdate = true;\r\n                            uniform.lastValue.copy(uniform.value);\r\n                        }\r\n                    }\r\n                    else if(uniform._internalFormat === \"Vec3\") {\r\n                        if(!uniform.value.equals(uniform.lastValue)) {\r\n                            shouldUpdate = true;\r\n                            uniform.lastValue.copy(uniform.value);\r\n                        }\r\n                    }\r\n                    else if(uniform._internalFormat === \"Quat\") {\r\n                        if(!uniform.value.equals(uniform.lastValue)) {\r\n                            shouldUpdate = true;\r\n                            uniform.lastValue.copy(uniform.value);\r\n                        }\r\n                    }\r\n                    else if(!uniform.value.length) {\r\n                        if(uniform.value !== uniform.lastValue) {\r\n                            shouldUpdate = true;\r\n                            uniform.lastValue = uniform.value;\r\n                        }\r\n                    }\r\n                    else if(JSON.stringify(uniform.value) !== JSON.stringify(uniform.lastValue)) { // compare two arrays\r\n                        shouldUpdate = true;\r\n                        // copy array\r\n                        uniform.lastValue = Array.from(uniform.value);\r\n                    }\r\n                }\r\n                else {\r\n                    shouldUpdate = true;\r\n                }\r\n\r\n                if(shouldUpdate) {\r\n                    // update our uniforms\r\n                    uniform.update && uniform.update(uniform);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Use appropriate WebGL uniform setting function based on the uniform type\r\n\r\n     params :\r\n     @uniform (object): the uniform\r\n     ***/\r\n    setUniform1i(uniform) {\r\n        this.gl.uniform1i(uniform.location, uniform.value);\r\n    }\r\n\r\n    setUniform1iv(uniform) {\r\n        this.gl.uniform1iv(uniform.location, uniform.value);\r\n    }\r\n\r\n    setUniform1f(uniform) {\r\n        this.gl.uniform1f(uniform.location, uniform.value);\r\n    }\r\n\r\n    setUniform1fv(uniform) {\r\n        this.gl.uniform1fv(uniform.location, uniform.value);\r\n    }\r\n\r\n\r\n    setUniform2i(uniform) {\r\n        uniform._internalFormat === \"Vec2\" ?\r\n            this.gl.uniform2i(uniform.location, uniform.value.x, uniform.value.y)\r\n            : this.gl.uniform2i(uniform.location, uniform.value[0], uniform.value[1]);\r\n    }\r\n\r\n    setUniform2iv(uniform) {\r\n        uniform._internalFormat === \"Vec2\" ?\r\n            this.gl.uniform2iv(uniform.location, [uniform.value.x, uniform.value.y])\r\n            : this.gl.uniform2iv(uniform.location, uniform.value);\r\n    }\r\n\r\n    setUniform2f(uniform) {\r\n        uniform._internalFormat === \"Vec2\" ?\r\n            this.gl.uniform2f(uniform.location, uniform.value.x, uniform.value.y)\r\n            : this.gl.uniform2f(uniform.location, uniform.value[0], uniform.value[1]);\r\n    }\r\n\r\n    setUniform2fv(uniform) {\r\n        uniform._internalFormat === \"Vec2\" ?\r\n            this.gl.uniform2fv(uniform.location, [uniform.value.x, uniform.value.y])\r\n            : this.gl.uniform2fv(uniform.location, uniform.value);\r\n    }\r\n\r\n\r\n    setUniform3i(uniform) {\r\n        uniform._internalFormat === \"Vec3\" ?\r\n            this.gl.uniform3i(uniform.location, uniform.value.x, uniform.value.y, uniform.value.z)\r\n            : this.gl.uniform3i(uniform.location, uniform.value[0], uniform.value[1], uniform.value[2]);\r\n    }\r\n\r\n    setUniform3iv(uniform) {\r\n        uniform._internalFormat === \"Vec3\" ?\r\n            this.gl.uniform3iv(uniform.location, [uniform.value.x, uniform.value.y, uniform.value.z])\r\n            : this.gl.uniform3iv(uniform.location, uniform.value);\r\n    }\r\n\r\n    setUniform3f(uniform) {\r\n        uniform._internalFormat === \"Vec3\" ?\r\n            this.gl.uniform3f(uniform.location, uniform.value.x, uniform.value.y, uniform.value.z)\r\n            : this.gl.uniform3f(uniform.location, uniform.value[0], uniform.value[1], uniform.value[2]);\r\n    }\r\n\r\n    setUniform3fv(uniform) {\r\n        uniform._internalFormat === \"Vec3\" ?\r\n            this.gl.uniform3fv(uniform.location, [uniform.value.x, uniform.value.y, uniform.value.z])\r\n            : this.gl.uniform3fv(uniform.location, uniform.value);\r\n    }\r\n\r\n\r\n    setUniform4i(uniform) {\r\n        uniform._internalFormat === \"Quat\" ?\r\n            this.gl.uniform4i(uniform.location, uniform.value.elements[0], uniform.value.elements[1], uniform.value.elements[2], uniform.value[3])\r\n            : this.gl.uniform4i(uniform.location, uniform.value[0], uniform.value[1], uniform.value[2], uniform.value[3]);\r\n    }\r\n\r\n    setUniform4iv(uniform) {\r\n        uniform._internalFormat === \"Quat\" ?\r\n            this.gl.uniform4iv(uniform.location, [uniform.value.elements[0], uniform.value.elements[1], uniform.value.elements[2], uniform.value[3]])\r\n            : this.gl.uniform4iv(uniform.location, uniform.value);\r\n    }\r\n\r\n    setUniform4f(uniform) {\r\n        uniform._internalFormat === \"Quat\" ?\r\n            this.gl.uniform4f(uniform.location, uniform.value.elements[0], uniform.value.elements[1], uniform.value.elements[2], uniform.value[3])\r\n            : this.gl.uniform4f(uniform.location, uniform.value[0], uniform.value[1], uniform.value[2], uniform.value[3]);\r\n    }\r\n\r\n    setUniform4fv(uniform) {\r\n        uniform._internalFormat === \"Quat\" ?\r\n            this.gl.uniform4fv(uniform.location, [uniform.value.elements[0], uniform.value.elements[1], uniform.value.elements[2], uniform.value[3]])\r\n            : this.gl.uniform4fv(uniform.location, uniform.value);\r\n    }\r\n\r\n\r\n    setUniformMatrix2fv(uniform) {\r\n        this.gl.uniformMatrix2fv(uniform.location, false, uniform.value);\r\n    }\r\n\r\n    setUniformMatrix3fv(uniform) {\r\n        this.gl.uniformMatrix3fv(uniform.location, false, uniform.value);\r\n    }\r\n\r\n    setUniformMatrix4fv(uniform) {\r\n        uniform._internalFormat === \"Mat4\" ?\r\n            this.gl.uniformMatrix4fv(uniform.location, false, uniform.value.elements)\r\n            : this.gl.uniformMatrix4fv(uniform.location, false, uniform.value);\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/core/Uniforms.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/extras/FXAAPass.js":
/*!*********************************************************!*\
  !*** ../node_modules/curtainsjs/src/extras/FXAAPass.js ***!
  \*********************************************************/
/*! exports provided: FXAAPass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FXAAPass\", function() { return FXAAPass; });\n/* harmony import */ var _framebuffers_ShaderPass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../framebuffers/ShaderPass.js */ \"../node_modules/curtainsjs/src/framebuffers/ShaderPass.js\");\n\r\n\r\n/*** FXAAPASS CLASS ***/\r\n\r\n/***\r\n Here we create our FXAAPass object\r\n This is just a regular ShaderPass with preset shaders and a resolution uniform\r\n\r\n params: see ShaderPas class object\r\n\r\n returns :\r\n @this: our FXAAPass element\r\n ***/\r\nclass FXAAPass {\r\n    constructor(curtains, {\r\n        // Mesh params\r\n        renderOrder,\r\n        depthTest,\r\n        texturesOptions,\r\n        crossOrigin,\r\n\r\n        // ShaderPass specific params\r\n        depth,\r\n        clear,\r\n        renderTarget,\r\n    } = {}) {\r\n\r\n        // taken from https://github.com/spite/Wagner/blob/master/fragment-shaders/fxaa-fs.glsl\r\n        const fragmentShader = `\r\n            precision mediump float;\r\n            \r\n            varying vec3 vVertexPosition;\r\n            varying vec2 vTextureCoord;\r\n        \r\n            uniform sampler2D uRenderTexture;\r\n            \r\n            uniform vec2 uResolution;\r\n            \r\n            #define FXAA_REDUCE_MIN   (1.0/128.0)\r\n            #define FXAA_REDUCE_MUL   (1.0/8.0)\r\n            #define FXAA_SPAN_MAX     8.0\r\n            \r\n            void main() {\r\n                vec2 res = 1.0 / uResolution;\r\n            \r\n                vec3 rgbNW = texture2D(uRenderTexture, (vTextureCoord.xy + vec2(-1.0, -1.0) * res)).xyz;\r\n                vec3 rgbNE = texture2D(uRenderTexture, (vTextureCoord.xy + vec2(1.0, -1.0) * res)).xyz;\r\n                vec3 rgbSW = texture2D(uRenderTexture, (vTextureCoord.xy + vec2(-1.0, 1.0) * res)).xyz;\r\n                vec3 rgbSE = texture2D(uRenderTexture, (vTextureCoord.xy + vec2(1.0, 1.0) * res)).xyz;\r\n                vec4 rgbaM = texture2D(uRenderTexture, vTextureCoord.xy * res);\r\n                vec3 rgbM = rgbaM.xyz;\r\n                vec3 luma = vec3(0.299, 0.587, 0.114);\r\n            \r\n                float lumaNW = dot(rgbNW, luma);\r\n                float lumaNE = dot(rgbNE, luma);\r\n                float lumaSW = dot(rgbSW, luma);\r\n                float lumaSE = dot(rgbSE, luma);\r\n                float lumaM  = dot(rgbM,  luma);\r\n                float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n                float lumaMax = max(lumaM, max(max(lumaNW, lumaNE) , max(lumaSW, lumaSE)));\r\n            \r\n                vec2 dir;\r\n                dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\r\n                dir.y = ((lumaNW + lumaSW) - (lumaNE + lumaSE));\r\n            \r\n                float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\r\n            \r\n                float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n                dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\r\n                      max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\r\n                            dir * rcpDirMin)) * res;\r\n                vec4 rgbA = (1.0/2.0) * (\r\n                texture2D(uRenderTexture, vTextureCoord.xy + dir * (1.0/3.0 - 0.5)) +\r\n                texture2D(uRenderTexture, vTextureCoord.xy + dir * (2.0/3.0 - 0.5)));\r\n                vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\r\n                texture2D(uRenderTexture, vTextureCoord.xy + dir * (0.0/3.0 - 0.5)) +\r\n                texture2D(uRenderTexture, vTextureCoord.xy + dir * (3.0/3.0 - 0.5)));\r\n                float lumaB = dot(rgbB, vec4(luma, 0.0));\r\n            \r\n                if ((lumaB < lumaMin) || (lumaB > lumaMax)) {\r\n                    gl_FragColor = rgbA;\r\n                } else {\r\n                    gl_FragColor = rgbB;\r\n                }\r\n            }\r\n        `;\r\n\r\n        const renderer = curtains.renderer || curtains;\r\n\r\n        const uniforms = {\r\n            resolution: {\r\n                name: \"uResolution\",\r\n                type: \"2f\",\r\n                value: [renderer._boundingRect.width, renderer._boundingRect.height],\r\n            }\r\n        };\r\n\r\n        this.pass = new _framebuffers_ShaderPass_js__WEBPACK_IMPORTED_MODULE_0__[\"ShaderPass\"](curtains, {\r\n            // Mesh params\r\n            renderOrder,\r\n            depthTest,\r\n            fragmentShader,\r\n            uniforms,\r\n            texturesOptions,\r\n            crossOrigin,\r\n\r\n            // ShaderPass specific params\r\n            depth,\r\n            clear,\r\n            renderTarget,\r\n        });\r\n\r\n        this.pass.onAfterResize(() => {\r\n            this.pass.uniforms.resolution.value = [\r\n                this.pass.renderer._boundingRect.width,\r\n                this.pass.renderer._boundingRect.height\r\n            ];\r\n        });\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/extras/FXAAPass.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/extras/PingPongPlane.js":
/*!**************************************************************!*\
  !*** ../node_modules/curtainsjs/src/extras/PingPongPlane.js ***!
  \**************************************************************/
/*! exports provided: PingPongPlane */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PingPongPlane\", function() { return PingPongPlane; });\n/* harmony import */ var _core_Plane_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Plane.js */ \"../node_modules/curtainsjs/src/core/Plane.js\");\n/* harmony import */ var _framebuffers_RenderTarget_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../framebuffers/RenderTarget.js */ \"../node_modules/curtainsjs/src/framebuffers/RenderTarget.js\");\n\r\n\r\n\r\n/*** FBO PING PONG PLANE CLASS ***/\r\n\r\n/***\r\n A little helper to create a plane that will perform FBO ping pong\r\n This plane will use FBOs swapping, using these following steps:\r\n - create two render targets (read and write)\r\n - create a texture onto which we'll draw\r\n - before drawing our plane (onRender callback), apply the write pass as our plane render target\r\n - after drawing our plane (onAfterRender callback), swap the read and write pass and copy the read pass texture again\r\n\r\n params:\r\n @sampler (string): sampler name used to create our texture and that will be used inside your shader\r\n @planeParams: see Plane class object\r\n\r\n returns :\r\n @this: our PingPongPlane element\r\n ***/\r\nclass PingPongPlane extends _core_Plane_js__WEBPACK_IMPORTED_MODULE_0__[\"Plane\"] {\r\n    constructor(curtains, htmlElement, {\r\n        sampler = \"uPingPongTexture\",\r\n\r\n        // Plane params\r\n        shareProgram,\r\n        widthSegments,\r\n        heightSegments,\r\n        renderOrder, // does not have much sense\r\n        depthTest,\r\n        cullFace,\r\n        uniforms,\r\n        vertexShaderID,\r\n        fragmentShaderID,\r\n        vertexShader,\r\n        fragmentShader,\r\n        texturesOptions,\r\n        crossOrigin,\r\n        alwaysDraw,\r\n        visible,\r\n        transparent,\r\n        drawCheckMargins,\r\n        autoloadSources,\r\n        watchScroll,\r\n        fov,\r\n    } = {}) {\r\n        // force depthTest and autoloadSources to false\r\n        depthTest = false;\r\n        autoloadSources = false;\r\n\r\n        // create our plane\r\n        super(curtains, htmlElement, {\r\n            shareProgram,\r\n            widthSegments,\r\n            heightSegments,\r\n            renderOrder,\r\n            depthTest,\r\n            cullFace,\r\n            uniforms,\r\n            vertexShaderID,\r\n            fragmentShaderID,\r\n            vertexShader,\r\n            fragmentShader,\r\n            texturesOptions,\r\n            crossOrigin,\r\n            alwaysDraw,\r\n            visible,\r\n            transparent,\r\n            drawCheckMargins,\r\n            autoloadSources,\r\n            watchScroll,\r\n            fov,\r\n        });\r\n\r\n        // remove from stack, update type to PingPongPlane and then stack again\r\n        this.renderer.scene.removePlane(this);\r\n        this.type = \"PingPongPlane\";\r\n        this.renderer.scene.addPlane(this);\r\n\r\n        // create 2 render targets\r\n        this.readPass = new _framebuffers_RenderTarget_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderTarget\"](curtains, {\r\n            depth: false,\r\n            clear: false,\r\n            texturesOptions: texturesOptions,\r\n        });\r\n\r\n        this.writePass = new _framebuffers_RenderTarget_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderTarget\"](curtains, {\r\n            depth: false,\r\n            clear: false,\r\n            texturesOptions: texturesOptions,\r\n        });\r\n\r\n        // create a texture where we'll draw\r\n        const texture = this.createTexture({\r\n            sampler: sampler,\r\n            fromTexture: this.readPass.getTexture()\r\n        });\r\n\r\n        // override onRender and onAfterRender callbacks\r\n        this._onRenderCallback = () => {\r\n            // update the render target\r\n            this.writePass && this.setRenderTarget(this.writePass);\r\n\r\n            this._onPingPongRenderCallback && this._onPingPongRenderCallback();\r\n        };\r\n\r\n        this._onAfterRenderCallback = () => {\r\n            // swap FBOs and update texture\r\n            if(this.readPass && this.writePass && this.textures[0]) {\r\n                this._swapPasses();\r\n            }\r\n\r\n            this._onPingPongAfterRenderCallback && this._onPingPongAfterRenderCallback();\r\n        };\r\n    }\r\n\r\n    /***\r\n     After each draw call, we'll swap the 2 render targets and copy the read pass texture again\r\n     ***/\r\n    _swapPasses() {\r\n        // swap read and write passes\r\n        const tempFBO = this.readPass;\r\n        this.readPass = this.writePass;\r\n        this.writePass = tempFBO;\r\n\r\n        // apply new texture\r\n        this.textures[0].copy(this.readPass.getTexture());\r\n    }\r\n\r\n    /***\r\n     Returns the created texture where we're writing\r\n     ***/\r\n    getTexture() {\r\n        return this.textures[0];\r\n    }\r\n\r\n    /*** OVERRIDE USED EVENTS ***/\r\n\r\n    /***\r\n     This is called at each requestAnimationFrame call\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onRender(callback) {\r\n        if(callback) {\r\n            this._onPingPongRenderCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This is called at each requestAnimationFrame call\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onAfterRender(callback) {\r\n        if(callback) {\r\n            this._onPingPongAfterRenderCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /*** DESTROYING ***/\r\n\r\n    /***\r\n     Override the regular remove method to remove the 2 render targets\r\n     ***/\r\n    remove() {\r\n        // first we want to stop drawing it\r\n        this._canDraw = false;\r\n\r\n        this.target = null;\r\n        // force unbinding frame buffer\r\n        this.renderer.bindFrameBuffer(null);\r\n\r\n        // manually dispose the frame buffers (do not delete their textures)\r\n        if(this.writePass._frameBuffer) {\r\n            this.gl.deleteFramebuffer(this.writePass._frameBuffer);\r\n            this.writePass._frameBuffer = null;\r\n        }\r\n        if(this.writePass._depthBuffer) {\r\n            this.gl.deleteRenderbuffer(this.writePass._depthBuffer);\r\n            this.writePass._depthBuffer = null;\r\n        }\r\n        this.renderer.removeRenderTarget(this.writePass);\r\n\r\n        if(this.readPass._frameBuffer) {\r\n            this.gl.deleteFramebuffer(this.readPass._frameBuffer);\r\n            this.readPass._frameBuffer = null;\r\n        }\r\n        if(this.readPass._depthBuffer) {\r\n            this.gl.deleteRenderbuffer(this.readPass._depthBuffer);\r\n            this.readPass._depthBuffer = null;\r\n        }\r\n        this.renderer.removeRenderTarget(this.readPass);\r\n\r\n        // delete all the webgl bindings\r\n        this._dispose();\r\n\r\n        // finally remove plane\r\n        this.renderer.removePlane(this);\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/extras/PingPongPlane.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/framebuffers/RenderTarget.js":
/*!*******************************************************************!*\
  !*** ../node_modules/curtainsjs/src/framebuffers/RenderTarget.js ***!
  \*******************************************************************/
/*! exports provided: RenderTarget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderTarget\", function() { return RenderTarget; });\n/* harmony import */ var _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Texture.js */ \"../node_modules/curtainsjs/src/core/Texture.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n\r\n/***\r\n Here we create a RenderTarget class object\r\n\r\n params :\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n\r\n @shaderPass (ShaderPass class object): shader pass that will use that render target. Default to null\r\n @depth (bool, optional): whether to create a depth buffer (handle depth inside your render target). Default to false.\r\n @clear (bool, optional): whether the content of the render target should be cleared before being drawn. Should be set to false to handle ping-pong shading. Default to true.\r\n\r\n @minWidth (float, optional): minimum width of the render target\r\n @minHeight (float, optional): minimum height of the render target\r\n\r\n @texturesOptions (object, optional): options and parameters to apply to the render target texture. See the Texture class object.\r\n\r\n returns :\r\n @this: our RenderTarget class object\r\n ***/\r\n\r\nclass RenderTarget {\r\n    constructor(renderer, {\r\n        shaderPass,\r\n        depth = false,\r\n        clear = true,\r\n\r\n        minWidth = 1024,\r\n        minHeight = 1024,\r\n\r\n        texturesOptions = {}\r\n    } = {}) {\r\n        this.type = \"RenderTarget\";\r\n\r\n        // we could pass our curtains object OR our curtains renderer object\r\n        renderer = renderer && renderer.renderer || renderer;\r\n\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwError\"])(this.type + \": Renderer not passed as first argument\", renderer);\r\n        }\r\n        else if(!renderer.gl) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwError\"])(this.type + \": Renderer WebGL context is undefined\", renderer);\r\n        }\r\n        this.renderer = renderer;\r\n        this.gl = this.renderer.gl;\r\n\r\n        this.index = this.renderer.renderTargets.length;\r\n\r\n        this._shaderPass = shaderPass;\r\n\r\n        // whether to create a render buffer\r\n        this._depth = depth;\r\n\r\n        this._shouldClear = clear;\r\n\r\n        this._minSize = {\r\n            width: minWidth * this.renderer.pixelRatio,\r\n            height: minHeight * this.renderer.pixelRatio,\r\n        };\r\n\r\n        // default textures options depends on the type of Mesh and WebGL context\r\n        texturesOptions = Object.assign({\r\n            // set default sampler to \"uRenderTexture\" and isFBOTexture to true\r\n            sampler: \"uRenderTexture\",\r\n            isFBOTexture: true,\r\n\r\n            premultiplyAlpha: false,\r\n            anisotropy: 1,\r\n            generateMipmap: false,\r\n\r\n            floatingPoint: \"none\",\r\n\r\n            wrapS: this.gl.CLAMP_TO_EDGE,\r\n            wrapT: this.gl.CLAMP_TO_EDGE,\r\n\r\n            minFilter: this.gl.LINEAR,\r\n            magFilter: this.gl.LINEAR,\r\n        }, texturesOptions);\r\n        this._texturesOptions = texturesOptions;\r\n\r\n        this.userData = {};\r\n\r\n        this.uuid = Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"generateUUID\"])();\r\n\r\n        this.renderer.renderTargets.push(this);\r\n        // we've added a new object, keep Curtains class in sync with our renderer\r\n        this.renderer.onSceneChange();\r\n\r\n        this._initRenderTarget();\r\n    }\r\n\r\n\r\n    /***\r\n     Init our RenderTarget by setting its size, creating a textures array and then calling _createFrameBuffer()\r\n     ***/\r\n    _initRenderTarget() {\r\n        this._setSize();\r\n\r\n        // create our render texture\r\n        this.textures = [];\r\n\r\n        // create our frame buffer\r\n        this._createFrameBuffer();\r\n    }\r\n\r\n\r\n    /*** RESTORING CONTEXT ***/\r\n\r\n    /***\r\n     Restore a render target\r\n     Basically just re init it\r\n     ***/\r\n    _restoreContext() {\r\n        // reset size\r\n        this._setSize();\r\n\r\n        // re create our frame buffer and restore its texture\r\n        this._createFrameBuffer();\r\n    }\r\n\r\n\r\n    /***\r\n     Sets our RenderTarget size based on its parent plane size\r\n     ***/\r\n    _setSize() {\r\n        if(this._shaderPass && this._shaderPass._isScenePass) {\r\n            this._size = {\r\n                width: this.renderer._boundingRect.width,\r\n                height: this.renderer._boundingRect.height,\r\n            };\r\n        }\r\n        else {\r\n            this._size = {\r\n                width: Math.max(this._minSize.width, this.renderer._boundingRect.width),\r\n                height: Math.max(this._minSize.height, this.renderer._boundingRect.height),\r\n            };\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Resizes our RenderTarget (only resize it if it's a ShaderPass scene pass FBO)\r\n     ***/\r\n    resize() {\r\n        // resize render target only if its a child of a shader pass\r\n        if(this._shaderPass) {\r\n            this._setSize();\r\n\r\n            this.textures[0].resize();\r\n\r\n            // cancel clear on resize\r\n            this.renderer.bindFrameBuffer(this, true);\r\n\r\n            if(this._depth) {\r\n                this._bindDepthBuffer();\r\n            }\r\n\r\n            this.renderer.bindFrameBuffer(null);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Binds our depth buffer\r\n     ***/\r\n    _bindDepthBuffer() {\r\n        // render to our target texture by binding the framebuffer\r\n        if(this._depthBuffer) {\r\n            this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this._depthBuffer);\r\n\r\n            // allocate renderbuffer\r\n            this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, this._size.width, this._size.height);\r\n\r\n            // attach renderbuffer\r\n            this.gl.framebufferRenderbuffer(this.gl.FRAMEBUFFER, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this._depthBuffer);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Here we create our frame buffer object\r\n     We're also adding a render buffer object to handle depth if needed\r\n     ***/\r\n    _createFrameBuffer() {\r\n        this._frameBuffer = this.gl.createFramebuffer();\r\n\r\n        // cancel clear on init\r\n        this.renderer.bindFrameBuffer(this, true);\r\n\r\n        // if textures array is not empty it means we're restoring the context\r\n        if(this.textures.length) {\r\n            this.textures[0]._parent = this;\r\n            this.textures[0]._restoreContext();\r\n        }\r\n        else {\r\n            // create a texture\r\n            const texture = new _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"](this.renderer, this._texturesOptions);\r\n\r\n            // adds the render target as parent and adds the texture to our textures array as well\r\n            texture.addParent(this);\r\n        }\r\n\r\n        // attach the texture as the first color attachment\r\n        // this.textures[0]._sampler.texture contains our WebGLTexture object\r\n        this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this.textures[0]._sampler.texture, 0);\r\n\r\n        // create a depth renderbuffer\r\n        if(this._depth) {\r\n            this._depthBuffer = this.gl.createRenderbuffer();\r\n            this._bindDepthBuffer();\r\n        }\r\n\r\n        this.renderer.bindFrameBuffer(null);\r\n    }\r\n\r\n\r\n    /*** GET THE RENDER TARGET TEXTURE ***/\r\n\r\n    /***\r\n     Returns the render target's texture\r\n\r\n     returns :\r\n     @texture (Texture class object): our RenderTarget's texture\r\n     ***/\r\n    getTexture() {\r\n        return this.textures[0];\r\n    }\r\n\r\n\r\n    /*** DESTROYING ***/\r\n\r\n    /***\r\n     Remove an element by calling the appropriate renderer method\r\n     ***/\r\n    remove() {\r\n        // check if it is attached to a shader pass\r\n        if(this._shaderPass) {\r\n            if(!this.renderer.production) {\r\n                Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwWarning\"])(this.type + \": You're trying to remove a RenderTarget attached to a ShaderPass. You should remove that ShaderPass instead:\", this._shaderPass);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this._dispose();\r\n\r\n        this.renderer.removeRenderTarget(this);\r\n    }\r\n\r\n    /***\r\n     Delete a RenderTarget buffers and its associated texture\r\n     ***/\r\n    _dispose() {\r\n        if(this._frameBuffer) {\r\n            this.gl.deleteFramebuffer(this._frameBuffer);\r\n            this._frameBuffer = null;\r\n        }\r\n        if(this._depthBuffer) {\r\n            this.gl.deleteRenderbuffer(this._depthBuffer);\r\n            this._depthBuffer = null;\r\n        }\r\n\r\n        this.textures[0]._dispose();\r\n        this.textures = [];\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/framebuffers/RenderTarget.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/framebuffers/ShaderPass.js":
/*!*****************************************************************!*\
  !*** ../node_modules/curtainsjs/src/framebuffers/ShaderPass.js ***!
  \*****************************************************************/
/*! exports provided: ShaderPass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShaderPass\", function() { return ShaderPass; });\n/* harmony import */ var _core_DOMMesh_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/DOMMesh.js */ \"../node_modules/curtainsjs/src/core/DOMMesh.js\");\n/* harmony import */ var _RenderTarget_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RenderTarget.js */ \"../node_modules/curtainsjs/src/framebuffers/RenderTarget.js\");\n/* harmony import */ var _core_Texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/Texture.js */ \"../node_modules/curtainsjs/src/core/Texture.js\");\n\r\n\r\n\r\n\r\n/*** SHADERPASS CLASS ***/\r\n\r\n/***\r\n Here we create our ShaderPass object\r\n We will extend our DOMMesh class that handles all the WebGL part and basic HTML sizings\r\n ShaderPass class will add the frame buffer by creating a new RenderTarget class object\r\n\r\n params :\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n\r\n @Meshparams (object): see Mesh class object\r\n\r\n @depth (boolean, optionnal): whether the shader pass render target should use a depth buffer (see RenderTarget class object). Default to false.\r\n @clear (boolean, optional): whether the shader pass render target content should be cleared before being drawn (see RenderTarget class object). Default to true.\r\n @renderTarget (RenderTarget class object, optional): an already existing render target to use. Default to null.\r\n\r\n returns :\r\n @this: our ShaderPass element\r\n ***/\r\nclass ShaderPass extends _core_DOMMesh_js__WEBPACK_IMPORTED_MODULE_0__[\"DOMMesh\"] {\r\n    constructor(renderer, {\r\n        // Mesh params\r\n        shareProgram,\r\n        widthSegments,\r\n        heightSegments,\r\n        renderOrder,\r\n        depthTest,\r\n        cullFace,\r\n        uniforms,\r\n        vertexShaderID,\r\n        fragmentShaderID,\r\n        vertexShader,\r\n        fragmentShader,\r\n        texturesOptions,\r\n        crossOrigin,\r\n\r\n        // ShaderPass specific params\r\n        depth = false,\r\n        clear = true,\r\n        renderTarget,\r\n    } = {}) {\r\n        // force plane defintion to 1x1\r\n        widthSegments = 1;\r\n        heightSegments = 1;\r\n\r\n        // always cull back face\r\n        cullFace = \"back\";\r\n\r\n        // never share a program between shader passes\r\n        shareProgram = false;\r\n\r\n        // use the renderer container as our HTML element to create a DOMMesh object\r\n        super(renderer, renderer.container, \"ShaderPass\", {\r\n            shareProgram,\r\n            widthSegments,\r\n            heightSegments,\r\n            renderOrder,\r\n            depthTest,\r\n            cullFace,\r\n            uniforms,\r\n            vertexShaderID,\r\n            fragmentShaderID,\r\n            vertexShader,\r\n            fragmentShader,\r\n            texturesOptions,\r\n            crossOrigin\r\n        });\r\n\r\n        // default to scene pass\r\n        this._isScenePass = true;\r\n\r\n        this.index = this.renderer.shaderPasses.length;\r\n        this.renderOrder = 0;\r\n\r\n        this._depth = depth;\r\n\r\n        this._shouldClear = clear;\r\n\r\n        this.target = renderTarget;\r\n        if(this.target) {\r\n            // if there's a target defined it's not a scene pass\r\n            this._isScenePass = false;\r\n            // inherit clear param\r\n            this._shouldClear = this.target._shouldClear;\r\n        }\r\n\r\n        // if the program is valid, go on\r\n        if(this._program.compiled) {\r\n            this._initShaderPass();\r\n\r\n            // add shader pass to our renderer shaderPasses array\r\n            this.renderer.shaderPasses.push(this);\r\n\r\n            // wait one tick before adding our shader pass to the scene to avoid flickering black screen for one frame\r\n            this.renderer.nextRender.add(() => {\r\n                this.renderer.scene.addShaderPass(this);\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    /*** RESTORING CONTEXT ***/\r\n\r\n    /***\r\n     Used internally to handle context restoration after the program has been successfully compiled again\r\n     ***/\r\n    _programRestored() {\r\n        // we just need to re add the shader pass to the scene stack\r\n        if(this._isScenePass) {\r\n            this.renderer.scene.stacks.scenePasses.push(this.index);\r\n        }\r\n        else {\r\n            this.renderer.scene.stacks.renderPasses.push(this.index);\r\n        }\r\n\r\n        // restore the textures\r\n        for(let i = 0; i < this.textures.length; i++) {\r\n            this.textures[i]._parent = this;\r\n            this.textures[i]._restoreContext();\r\n        }\r\n\r\n        this._canDraw = true;\r\n    }\r\n\r\n\r\n    /***\r\n     Here we init additionnal shader pass planes properties\r\n     This mainly consists in creating our render texture and add a frame buffer object\r\n     ***/\r\n    _initShaderPass() {\r\n        // create our frame buffer\r\n        if(!this.target) {\r\n            this._createFrameBuffer();\r\n        }\r\n        else {\r\n            // set the render target\r\n            this.setRenderTarget(this.target);\r\n            this.target._shaderPass = this;\r\n        }\r\n\r\n        // create a texture from the render target texture\r\n        const texture = new _core_Texture_js__WEBPACK_IMPORTED_MODULE_2__[\"Texture\"](this.renderer, {\r\n            sampler: \"uRenderTexture\",\r\n            isFBOTexture: true,\r\n            fromTexture: this.target.getTexture(),\r\n        });\r\n\r\n        texture.addParent(this);\r\n\r\n        // onReady callback\r\n        this.loader._setLoaderSize(0);\r\n\r\n        this._canDraw = true;\r\n\r\n        // be sure we'll update the scene even if drawing is disabled\r\n        this.renderer.needRender();\r\n    }\r\n\r\n\r\n    /***\r\n     Here we create our frame buffer object\r\n     We're also adding a render buffer object to handle depth inside our shader pass\r\n     ***/\r\n    _createFrameBuffer() {\r\n        const target = new _RenderTarget_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderTarget\"](this.renderer, {\r\n            shaderPass: this,\r\n            clear: this._shouldClear,\r\n            depth: this._depth,\r\n            texturesOptions: this._texturesOptions,\r\n        });\r\n        this.setRenderTarget(target);\r\n    }\r\n\r\n\r\n    /*** DRAWING ***/\r\n\r\n    /***\r\n     Specific instructions for the Shader pass class to execute before drawing it\r\n     ***/\r\n    _startDrawing() {\r\n        // check if our plane is ready to draw\r\n        if(this._canDraw) {\r\n            // even if our plane should not be drawn we still execute its onRender callback and update its uniforms\r\n            if(this._onRenderCallback) {\r\n                this._onRenderCallback();\r\n            }\r\n\r\n            // to improve webgl pipeline performance, we might want to update each texture that needs an update here\r\n            // see https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#texImagetexSubImage_uploads_particularly_with_videos_can_cause_pipeline_flushes\r\n\r\n\r\n            if(this._isScenePass) {\r\n                // if this is a scene pass, check if theres one more coming next and eventually bind it\r\n                if(this.renderer.state.scenePassIndex + 1 < this.renderer.scene.stacks.scenePasses.length) {\r\n                    this.renderer.bindFrameBuffer(this.renderer.scene.stacks.scenePasses[this.renderer.state.scenePassIndex + 1].target);\r\n\r\n                    this.renderer.state.scenePassIndex++;\r\n                }\r\n                else {\r\n                    this.renderer.bindFrameBuffer(null);\r\n                }\r\n            }\r\n            else if(this.renderer.state.scenePassIndex === null) {\r\n                // we are rendering a bunch of planes inside a render target, unbind it\r\n                this.renderer.bindFrameBuffer(null);\r\n            }\r\n\r\n            // force attribute buffer bindings update\r\n            this.renderer.state.forceBufferUpdate = true;\r\n\r\n            // now check if we really need to draw it and its textures\r\n            this._draw();\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/framebuffers/ShaderPass.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/index.mjs":
/*!************************************************!*\
  !*** ../node_modules/curtainsjs/src/index.mjs ***!
  \************************************************/
/*! exports provided: Curtains, Plane, Texture, RenderTarget, ShaderPass, TextureLoader, Vec2, Vec3, Mat4, PingPongPlane, FXAAPass */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_Curtains_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/Curtains.js */ \"../node_modules/curtainsjs/src/core/Curtains.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Curtains\", function() { return _core_Curtains_js__WEBPACK_IMPORTED_MODULE_0__[\"Curtains\"]; });\n\n/* harmony import */ var _core_Plane_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/Plane.js */ \"../node_modules/curtainsjs/src/core/Plane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Plane\", function() { return _core_Plane_js__WEBPACK_IMPORTED_MODULE_1__[\"Plane\"]; });\n\n/* harmony import */ var _core_Texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/Texture.js */ \"../node_modules/curtainsjs/src/core/Texture.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Texture\", function() { return _core_Texture_js__WEBPACK_IMPORTED_MODULE_2__[\"Texture\"]; });\n\n/* harmony import */ var _framebuffers_RenderTarget_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./framebuffers/RenderTarget.js */ \"../node_modules/curtainsjs/src/framebuffers/RenderTarget.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RenderTarget\", function() { return _framebuffers_RenderTarget_js__WEBPACK_IMPORTED_MODULE_3__[\"RenderTarget\"]; });\n\n/* harmony import */ var _framebuffers_ShaderPass_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./framebuffers/ShaderPass.js */ \"../node_modules/curtainsjs/src/framebuffers/ShaderPass.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ShaderPass\", function() { return _framebuffers_ShaderPass_js__WEBPACK_IMPORTED_MODULE_4__[\"ShaderPass\"]; });\n\n/* harmony import */ var _loaders_TextureLoader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./loaders/TextureLoader.js */ \"../node_modules/curtainsjs/src/loaders/TextureLoader.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TextureLoader\", function() { return _loaders_TextureLoader_js__WEBPACK_IMPORTED_MODULE_5__[\"TextureLoader\"]; });\n\n/* harmony import */ var _math_Vec2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./math/Vec2.js */ \"../node_modules/curtainsjs/src/math/Vec2.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Vec2\", function() { return _math_Vec2_js__WEBPACK_IMPORTED_MODULE_6__[\"Vec2\"]; });\n\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./math/Vec3.js */ \"../node_modules/curtainsjs/src/math/Vec3.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Vec3\", function() { return _math_Vec3_js__WEBPACK_IMPORTED_MODULE_7__[\"Vec3\"]; });\n\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./math/Mat4.js */ \"../node_modules/curtainsjs/src/math/Mat4.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Mat4\", function() { return _math_Mat4_js__WEBPACK_IMPORTED_MODULE_8__[\"Mat4\"]; });\n\n/* harmony import */ var _extras_PingPongPlane_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extras/PingPongPlane.js */ \"../node_modules/curtainsjs/src/extras/PingPongPlane.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PingPongPlane\", function() { return _extras_PingPongPlane_js__WEBPACK_IMPORTED_MODULE_9__[\"PingPongPlane\"]; });\n\n/* harmony import */ var _extras_FXAAPass_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extras/FXAAPass.js */ \"../node_modules/curtainsjs/src/extras/FXAAPass.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FXAAPass\", function() { return _extras_FXAAPass_js__WEBPACK_IMPORTED_MODULE_10__[\"FXAAPass\"]; });\n\n// core\r\n\r\n\r\n\r\n\r\n// frame buffer objects\r\n\r\n\r\n\r\n// loader\r\n\r\n\r\n// math\r\n\r\n\r\n\r\n\r\n// extras\r\n// TODO TextTexture class?\r\n\r\n\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/index.mjs?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/loaders/PlaneTextureLoader.js":
/*!********************************************************************!*\
  !*** ../node_modules/curtainsjs/src/loaders/PlaneTextureLoader.js ***!
  \********************************************************************/
/*! exports provided: PlaneTextureLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PlaneTextureLoader\", function() { return PlaneTextureLoader; });\n/* harmony import */ var _TextureLoader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TextureLoader.js */ \"../node_modules/curtainsjs/src/loaders/TextureLoader.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n\r\n/*** PLANE TEXTURE LOADER CLASS ***/\r\n\r\n/***\r\n Extends our TextureLoader class to add sources loaded count, handle onComplete event\r\n Also adds the sources and textures to its defined parent\r\n\r\n params:\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n @parent (Plane or ShaderPass class object): The plane or shader pass that will use this loader\r\n\r\n @sourcesLoaded (int): Number of sources loaded\r\n @sourcesToLoad (int): Number of initial sources to load\r\n @complete (bool): Whether the loader has loaded all the initial sources\r\n @onComplete (function): Callback to execute when all the initial sources have been loaded\r\n\r\n returns :\r\n @this: our PlaneTextureLoader element\r\n ***/\r\nclass PlaneTextureLoader extends _TextureLoader_js__WEBPACK_IMPORTED_MODULE_0__[\"TextureLoader\"] {\r\n    constructor(renderer, parent, {\r\n        sourcesLoaded = 0,\r\n        sourcesToLoad = 0,\r\n        complete = false,\r\n\r\n        onComplete = () => {},\r\n    } = {}) {\r\n\r\n        super(renderer, parent.crossOrigin);\r\n        this.type = \"PlaneTextureLoader\";\r\n\r\n        this._parent = parent;\r\n        if(this._parent.type !== \"Plane\" && this._parent.type !== \"PingPongPlane\" && this._parent.type !== \"ShaderPass\") {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwWarning\"])(this.type + \": Wrong parent type assigned to this loader\");\r\n            this._parent = null;\r\n        }\r\n\r\n        this.sourcesLoaded = sourcesLoaded;\r\n        this.sourcesToLoad = sourcesToLoad;\r\n        this.complete = complete;\r\n\r\n        this.onComplete = onComplete;\r\n    }\r\n\r\n\r\n    /*** TRACK LOADING ***/\r\n\r\n    /***\r\n     Sets the total number of assets to load before firing the onComplete event\r\n\r\n     params:\r\n     @size (int): our curtains object OR our curtains renderer object\r\n     ***/\r\n    _setLoaderSize(size) {\r\n        this.sourcesToLoad = size;\r\n\r\n        if(this.sourcesToLoad === 0) {\r\n            this.complete = true;\r\n            this.renderer.nextRender.add(() => this.onComplete && this.onComplete());\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Increment the number of sources loaded\r\n     ***/\r\n    _increment() {\r\n        this.sourcesLoaded++;\r\n        if(this.sourcesLoaded >= this.sourcesToLoad && !this.complete) {\r\n            this.complete = true;\r\n            this.renderer.nextRender.add(() => this.onComplete && this.onComplete());\r\n        }\r\n    }\r\n\r\n\r\n    /*** UPDATE PARENT SOURCES AND TEXTURES ARAYS ***/\r\n\r\n    /***\r\n     Adds the source to the correct parent assets array\r\n\r\n     params:\r\n     @source (html element): html image, video or canvas element that has been loaded\r\n     @sourceType (string): either \"image\", \"video\" or \"canvas\"\r\n     ***/\r\n    _addSourceToParent(source, sourceType) {\r\n        // add the source if it is not already in the correct parent assets array\r\n        if(sourceType === \"image\") {\r\n            const parentAssetArray = this._parent[\"images\"];\r\n            const isInParent = parentAssetArray.find((element) => element.src === source.src);\r\n            !isInParent && parentAssetArray.push(source);\r\n        }\r\n        else if(sourceType === \"video\") {\r\n            const parentAssetArray = this._parent[\"videos\"];\r\n            const isInParent = parentAssetArray.find((element) => element.src === source.src);\r\n            !isInParent && parentAssetArray.push(source);\r\n        }\r\n        else if(sourceType === \"canvas\") {\r\n            const parentAssetArray = this._parent[\"canvases\"];\r\n            const isInParent = parentAssetArray.find((element) => element.isEqualNode(source));\r\n            !isInParent && parentAssetArray.push(source);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Adds the loader parent to the newly created texture\r\n     Also adds the source to the correct parent assets array\r\n\r\n     params:\r\n     @texture (Texture class object): our newly created texture\r\n     @source (html element): html image, video or canvas element that has been loaded\r\n     @sourceType (string): either \"image\", \"video\" or \"canvas\"\r\n     ***/\r\n    _addToParent(texture, source, sourceType) {\r\n        this._addSourceToParent(source, sourceType);\r\n\r\n        // add the texture to the parent\r\n        this._parent && texture.addParent(this._parent);\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/loaders/PlaneTextureLoader.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/loaders/TextureLoader.js":
/*!***************************************************************!*\
  !*** ../node_modules/curtainsjs/src/loaders/TextureLoader.js ***!
  \***************************************************************/
/*! exports provided: TextureLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextureLoader\", function() { return TextureLoader; });\n/* harmony import */ var _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Texture.js */ \"../node_modules/curtainsjs/src/core/Texture.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.js */ \"../node_modules/curtainsjs/src/utils/utils.js\");\n\r\n\r\n\r\n/*** TEXTURE LOADER CLASS ***/\r\n\r\n/***\r\n An asset loader that handles images, videos and canvas loading\r\n Load the assets and create a Texture class object that will use those assets as sources\r\n\r\n params:\r\n @renderer (Curtains or Renderer class object): our curtains object OR our curtains renderer object\r\n @crossOrigin (string, optional): crossorigin policy to use\r\n\r\n returns :\r\n @this: our TextureLoader element\r\n ***/\r\n\r\n// TODO create a new Image or Video element for each of this sources (allows to set crossorigin before src to avois CORS issues)?\r\n// TODO load assets with a web worker?\r\n\r\nclass TextureLoader {\r\n    constructor(\r\n        renderer,\r\n        crossOrigin = \"anonymous\",\r\n    ) {\r\n        this.type = \"TextureLoader\";\r\n\r\n        // we could pass our curtains object OR our curtains renderer object\r\n        renderer = renderer && renderer.renderer || renderer;\r\n\r\n        // throw warning if no renderer or webgl context\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwError\"])(this.type + \": Renderer not passed as first argument\", renderer);\r\n        }\r\n        else if(!renderer.gl) {\r\n            Object(_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"throwError\"])(this.type + \": Renderer WebGL context is undefined\", renderer);\r\n        }\r\n\r\n        // renderer and webgl context\r\n        this.renderer = renderer;\r\n        this.gl = this.renderer.gl;\r\n\r\n        // crossorigin policy to apply\r\n        this.crossOrigin = crossOrigin;\r\n\r\n        // keep a track of all sources loaded via this loader\r\n        this.elements = [];\r\n    }\r\n\r\n\r\n    /***\r\n     Keep a track of all sources loaded via this loader with an els array\r\n     This allows to get clean refs to the event listeners to be able to remove them later\r\n\r\n     params:\r\n     @source (html element): html image, video or canvas element that has been loaded\r\n     @texture (Texture class object): our newly created texture that will use that source\r\n     @successCallback (function): reference to our success callback\r\n     @errorCallback (function): reference to our error callback\r\n     ***/\r\n    _addElement(source, texture, successCallback, errorCallback) {\r\n        const el = {\r\n            source,\r\n            texture,\r\n            load: this._sourceLoaded.bind(this, source, texture, successCallback),\r\n            error: this._sourceLoadError.bind(this, source, errorCallback),\r\n        };\r\n\r\n        this.elements.push(el);\r\n\r\n        return el;\r\n    }\r\n\r\n\r\n    /***\r\n     Handles media loading errors\r\n\r\n     params:\r\n     @source (html element): html image or video element that has failed to load\r\n     @callback (function): function to execute\r\n     @error (object): loading error\r\n     ***/\r\n    _sourceLoadError(source, callback, error) {\r\n        // execute callback\r\n        if(callback) {\r\n            callback(source, error);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Handles media loading success\r\n\r\n     params:\r\n     @source (html element): html image, video or canvas element that has been loaded\r\n     @texture (Texture class object): our newly created texture that will use that source\r\n     @callback (function): function to execute\r\n     ***/\r\n    _sourceLoaded(source, texture, callback) {\r\n        // execute only once\r\n        if (!texture._sourceLoaded) {\r\n            texture._onSourceLoaded(source);\r\n\r\n            // if this loader has a parent (means its a PlaneTextureLoader)\r\n            if(this._parent) {\r\n                // increment plane texture loader\r\n                this._increment && this._increment();\r\n\r\n                this.renderer.nextRender.add(() => this._parent._onLoadingCallback && this._parent._onLoadingCallback(texture));\r\n            }\r\n        }\r\n\r\n        // execute callback\r\n        if(callback) {\r\n            callback(texture);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Get the source type based on its file extension if it's a string or it's tag name if its a HTML element\r\n\r\n     params:\r\n     @source (html element or string): html image, video, canvas element or source url\r\n\r\n     returns :\r\n     @sourceType (string): either \"image\", \"video\", \"canvas\" or null if source type cannot be determined\r\n     ***/\r\n    _getSourceType(source) {\r\n        let sourceType;\r\n\r\n        if(typeof source === \"string\") {\r\n            // from https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Supported_image_formats\r\n            if(source.match(/\\.(jpeg|jpg|jfif|pjpeg|pjp|gif|bmp|png|webp|svg)$/) !== null) {\r\n                sourceType = \"image\";\r\n            }\r\n            else if(source.match(/\\.(webm|mp4|ogg|mov)$/) !== null) {\r\n                sourceType = \"video\";\r\n            }\r\n        }\r\n        else {\r\n            if(source.tagName.toUpperCase() === \"IMG\") {\r\n                sourceType = \"image\";\r\n            }\r\n            else if(source.tagName.toUpperCase() === \"VIDEO\") {\r\n                sourceType = \"video\";\r\n            }\r\n            else if(source.tagName.toUpperCase() === \"CANVAS\") {\r\n                sourceType = \"canvas\";\r\n            }\r\n        }\r\n\r\n        return sourceType;\r\n    }\r\n\r\n\r\n    /***\r\n     Create an image HTML element based on an image source url\r\n\r\n     params:\r\n     @source (string): source url\r\n\r\n     returns :\r\n     @image (HTML image element): an HTML image element\r\n     ***/\r\n    _createImage(source) {\r\n        const image = new Image();\r\n        image.crossOrigin = this.crossOrigin;\r\n        image.src = source;\r\n\r\n        return image;\r\n    }\r\n\r\n\r\n    /***\r\n     Create a video HTML element based on a video source url\r\n\r\n     params:\r\n     @source (string): source url\r\n\r\n     returns :\r\n     @video (HTML video element): an HTML video element\r\n     ***/\r\n    _createVideo(source) {\r\n        const video = document.createElement('video');\r\n        video.crossOrigin = this.crossOrigin;\r\n        video.src = source;\r\n\r\n        return video;\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads one source\r\n     It checks what type of source it is then use the right loader\r\n\r\n     params:\r\n     @source (html element): html image, video or canvas element\r\n     @textureOptions (object): parameters to apply to the textures, such as sampler name, repeat wrapping, filters, anisotropy...\r\n     @successCallback (function): function to execute when the source has been loaded\r\n     @errorCallback (function): function to execute if the source fails to load\r\n     ***/\r\n    loadSource(\r\n        source,\r\n        textureOptions,\r\n        successCallback,\r\n        errorCallback\r\n    ) {\r\n        // get source type to use the right loader\r\n        const sourceType = this._getSourceType(source);\r\n\r\n        switch(sourceType) {\r\n            case \"image\":\r\n                this.loadImage(source, textureOptions, successCallback, errorCallback);\r\n                break;\r\n            case \"video\":\r\n                this.loadVideo(source, textureOptions, successCallback, errorCallback);\r\n                break;\r\n            case \"canvas\":\r\n                this.loadCanvas(source, textureOptions, successCallback);\r\n                break;\r\n            default:\r\n                this._sourceLoadError(source, errorCallback, \"this source could not be converted into a texture: \" + source);\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads an array of sources by calling loadSource() for each one of them\r\n\r\n     params:\r\n     @sources (array of html elements / sources url): array of html images, videos, canvases element or sources url\r\n     @texturesOptions (object): parameters to apply to the textures, such as sampler name, repeat wrapping, filters, anisotropy...\r\n     @successCallback (function): function to execute when each source has been loaded\r\n     @errorCallback (function): function to execute if a source fails to load\r\n     ***/\r\n    loadSources(\r\n        sources,\r\n        texturesOptions,\r\n        successCallback,\r\n        errorCallback\r\n    ) {\r\n        for(let i = 0; i < sources.length; i++) {\r\n            this.loadSource(sources[i], texturesOptions, successCallback, errorCallback);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads an image\r\n     Creates a new texture object right away and once the image is loaded it uses it as our WebGL texture\r\n\r\n     params:\r\n     @source (image): html image element\r\n     @textureOptions (object): parameters to apply to the textures, such as sampler name, repeat wrapping, filters, anisotropy...\r\n     @successCallback (function): function to execute when the source has been loaded\r\n     @errorCallback (function): function to execute if the source fails to load\r\n     ***/\r\n    loadImage(\r\n        source,\r\n        textureOptions = {},\r\n        successCallback,\r\n        errorCallback\r\n    ) {\r\n        if(typeof source === \"string\") {\r\n            source = this._createImage(source);\r\n        }\r\n\r\n        source.crossOrigin = this.crossOrigin;\r\n\r\n        // merge texture options with its parent textures options if needed\r\n        if(this._parent) {\r\n            textureOptions = Object.assign(textureOptions, this._parent._texturesOptions);\r\n        }\r\n\r\n        // check for cache\r\n        const cachedTexture = this.renderer.cache.getTextureFromSource(source);\r\n\r\n        if(cachedTexture) {\r\n            const texture = new _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"](this.renderer, {\r\n                loader: this,\r\n                fromTexture: cachedTexture,\r\n\r\n                sampler: textureOptions.sampler || source.getAttribute(\"data-sampler\"),\r\n                premultiplyAlpha: textureOptions.premultiplyAlpha,\r\n                anisotropy: textureOptions.anisotropy,\r\n                generateMipmap: textureOptions.generateMipmap,\r\n                wrapS: textureOptions.wrapS,\r\n                wrapT: textureOptions.wrapT,\r\n                minFilter: textureOptions.minFilter,\r\n                magFilter: textureOptions.magFilter,\r\n            });\r\n\r\n            // execute sucess callback directly\r\n            if(successCallback) {\r\n                successCallback(texture);\r\n            }\r\n\r\n            // if there's a parent (PlaneTextureLoader) add texture and source to it\r\n            this._parent && this._addToParent(texture, source, \"image\");\r\n\r\n            // that's all!\r\n            return;\r\n        }\r\n\r\n        // create a new texture that will use our image later\r\n        const texture = new _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"](this.renderer, {\r\n            loader: this,\r\n\r\n            sampler: textureOptions.sampler || source.getAttribute(\"data-sampler\"),\r\n            premultiplyAlpha: textureOptions.premultiplyAlpha,\r\n            anisotropy: textureOptions.anisotropy,\r\n            generateMipmap: textureOptions.generateMipmap,\r\n            wrapS: textureOptions.wrapS,\r\n            wrapT: textureOptions.wrapT,\r\n            minFilter: textureOptions.minFilter,\r\n            magFilter: textureOptions.magFilter,\r\n        });\r\n\r\n        // add a new entry in our elements array\r\n        const el = this._addElement(source, texture, successCallback, errorCallback);\r\n\r\n        // If the image is in the cache of the browser,\r\n        // the 'load' event might have been triggered\r\n        // before we registered the event handler.\r\n        if(source.complete) {\r\n            this._sourceLoaded(source, texture, successCallback);\r\n        }\r\n        else if(source.decode) {\r\n            source.decode().then(this._sourceLoaded.bind(this, source, texture, successCallback)).catch(() => {\r\n                // fallback to classic load & error events\r\n                source.addEventListener('load', el.load, false);\r\n                source.addEventListener('error', el.error, false);\r\n            });\r\n        }\r\n        else {\r\n            source.addEventListener('load', el.load, false);\r\n            source.addEventListener('error', el.error, false);\r\n        }\r\n\r\n        // if there's a parent (PlaneTextureLoader) add texture and source to it\r\n        this._parent && this._addToParent(texture, source,  \"image\");\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads an array of images by calling loadImage() for each one of them\r\n\r\n     params:\r\n     @sources (array of images / images url): array of html images elements or images url\r\n     @texturesOptions (object): parameters to apply to the textures, such as sampler name, repeat wrapping, filters, anisotropy...\r\n     @successCallback (function): function to execute when each source has been loaded\r\n     @errorCallback (function): function to execute if a source fails to load\r\n     ***/\r\n    loadImages(\r\n        sources,\r\n        texturesOptions,\r\n        successCallback,\r\n        errorCallback\r\n    ) {\r\n        for(let i = 0; i < sources.length; i++) {\r\n            this.loadImage(sources[i], texturesOptions, successCallback, errorCallback);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads a video\r\n     Creates a new texture object right away and once the video has enough data it uses it as our WebGL texture\r\n\r\n     params:\r\n     @source (video): html video element\r\n     @textureOptions (object): parameters to apply to the textures, such as sampler name, repeat wrapping, filters, anisotropy...\r\n     @successCallback (function): function to execute when the source has been loaded\r\n     @errorCallback (function): function to execute if the source fails to load\r\n     ***/\r\n    loadVideo(\r\n        source,\r\n        textureOptions = {},\r\n        successCallback,\r\n        errorCallback\r\n    ) {\r\n        if(typeof source === \"string\") {\r\n            source = this._createVideo(source);\r\n        }\r\n\r\n        source.preload = true;\r\n        source.muted = true;\r\n        source.loop = true;\r\n        source.playsinline = true;\r\n\r\n        source.crossOrigin = this.crossOrigin;\r\n\r\n        // merge texture options with its parent textures options if needed\r\n        if(this._parent) {\r\n            textureOptions = Object.assign(textureOptions, this._parent._texturesOptions);\r\n        }\r\n\r\n        // create a new texture that will use our video later\r\n        const texture = new _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"](this.renderer, {\r\n            loader: this,\r\n            sampler: textureOptions.sampler || source.getAttribute(\"data-sampler\"),\r\n            premultiplyAlpha: textureOptions.premultiplyAlpha,\r\n            anisotropy: textureOptions.anisotropy,\r\n            generateMipmap: textureOptions.generateMipmap,\r\n            wrapS: textureOptions.wrapS,\r\n            wrapT: textureOptions.wrapT,\r\n            minFilter: textureOptions.minFilter,\r\n            magFilter: textureOptions.magFilter,\r\n        });\r\n\r\n        // add a new entry in our elements array\r\n        const el = this._addElement(source, texture, successCallback, errorCallback);\r\n\r\n        // handle our loaded data event inside the texture and tell our plane when the video is ready to play\r\n        source.addEventListener('canplaythrough', el.load, false);\r\n        source.addEventListener('error', el.error, false);\r\n\r\n        // If the video is in the cache of the browser,\r\n        // the 'canplaythrough' event might have been triggered\r\n        // before we registered the event handler.\r\n        if(source.readyState >= source.HAVE_FUTURE_DATA && successCallback) {\r\n            this._sourceLoaded(source, texture, successCallback);\r\n        }\r\n\r\n        // start loading our video\r\n        source.load();\r\n\r\n        // if there's a parent (PlaneTextureLoader) add texture and source to it\r\n        this._addToParent && this._addToParent(texture, source, \"video\");\r\n\r\n        // if requestVideoFrameCallback exist, use it to update our video texture\r\n        if('requestVideoFrameCallback' in HTMLVideoElement.prototype) {\r\n            el.videoFrameCallback = texture._videoFrameCallback.bind(texture);\r\n            texture._videoFrameCallbackID = source.requestVideoFrameCallback(el.videoFrameCallback);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads an array of images by calling loadVideo() for each one of them\r\n\r\n     params:\r\n     @sources (array of videos / videos url): array of html videos elements or videos url\r\n     @texturesOptions (object): parameters to apply to the textures, such as sampler name, repeat wrapping, filters, anisotropy...\r\n     @successCallback (function): function to execute when each source has been loaded\r\n     @errorCallback (function): function to execute if a source fails to load\r\n     ***/\r\n    loadVideos(\r\n        sources,\r\n        texturesOptions,\r\n        successCallback,\r\n        errorCallback\r\n    ) {\r\n        for(let i = 0; i < sources.length; i++) {\r\n            this.loadVideo(sources[i], texturesOptions, successCallback, errorCallback);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads a canvas\r\n     Creates a new texture object right away and uses the canvas as our WebGL texture\r\n\r\n     params:\r\n     @source (canvas): html canvas element\r\n     @textureOptions (object): parameters to apply to the textures, such as sampler name, repeat wrapping, filters, anisotropy...\r\n     @successCallback (function): function to execute when the source has been loaded\r\n     ***/\r\n    loadCanvas(\r\n        source,\r\n        textureOptions = {},\r\n        successCallback\r\n    ) {\r\n        // merge texture options with its parent textures options if needed\r\n        if(this._parent) {\r\n            textureOptions = Object.assign(textureOptions, this._parent._texturesOptions);\r\n        }\r\n\r\n        // create a new texture that will use our source later\r\n        const texture = new _core_Texture_js__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"](this.renderer, {\r\n            loader: this,\r\n            sampler: textureOptions.sampler || source.getAttribute(\"data-sampler\"),\r\n            premultiplyAlpha: textureOptions.premultiplyAlpha,\r\n            anisotropy: textureOptions.anisotropy,\r\n            generateMipmap: textureOptions.generateMipmap,\r\n            wrapS: textureOptions.wrapS,\r\n            wrapT: textureOptions.wrapT,\r\n            minFilter: textureOptions.minFilter,\r\n            magFilter: textureOptions.magFilter,\r\n        });\r\n\r\n        // add a new entry in our elements array\r\n        this._addElement(source, texture, successCallback, null);\r\n\r\n        // canvas are directly loaded\r\n        this._sourceLoaded(source, texture, successCallback);\r\n\r\n        // if there's a parent (PlaneTextureLoader) add texture and source to it\r\n        this._parent && this._addToParent(texture, source, \"canvas\");\r\n    }\r\n\r\n\r\n    /***\r\n     This method loads an array of images by calling loadCanvas() for each one of them\r\n\r\n     params:\r\n     @sources (array of canvas): array of html canvases elements\r\n     @texturesOptions (object): parameters to apply to the textures, such as sampler name, repeat wrapping, filters, anisotropy...\r\n     @successCallback (function): function to execute when each source has been loaded\r\n     ***/\r\n    loadCanvases(\r\n        sources,\r\n        texturesOptions,\r\n        successCallback,\r\n    ) {\r\n        for(let i = 0; i < sources.length; i++) {\r\n            this.loadCanvas(sources[i], texturesOptions, successCallback);\r\n        }\r\n    }\r\n\r\n\r\n    /*** REMOVING EVENT LISTENERS ***/\r\n\r\n    /***\r\n     Cleanly removes a texture source by removing its associated event listeners\r\n\r\n     params:\r\n     @texture (Texture class object): The texture that contains our source\r\n     ***/\r\n    _removeSource(texture) {\r\n        // find our reference el in our els array\r\n        const el = this.elements.find((element) => element.texture.uuid === texture.uuid);\r\n\r\n        // if we have an element, remove its associated event listeners\r\n        if(el) {\r\n            if(texture.sourceType === \"image\") {\r\n                el.source.removeEventListener(\"load\", el.load, false);\r\n            }\r\n            else if(texture.sourceType === \"video\") {\r\n                // cancel video frame callback\r\n                if(el.videoFrameCallback && texture._videoFrameCallbackID) {\r\n                    el.source.cancelVideoFrameCallback(texture._videoFrameCallbackID);\r\n                }\r\n\r\n                el.source.removeEventListener(\"canplaythrough\", el.load, false);\r\n                // empty source to properly delete video element and free the memory\r\n                el.source.pause();\r\n                el.source.removeAttribute(\"src\");\r\n                el.source.load();\r\n            }\r\n\r\n            el.source.removeEventListener(\"error\", el.error, false);\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/loaders/TextureLoader.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/math/Mat4.js":
/*!***************************************************!*\
  !*** ../node_modules/curtainsjs/src/math/Mat4.js ***!
  \***************************************************/
/*! exports provided: Mat4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mat4\", function() { return Mat4; });\n/***\r\n Here we create a Mat4 class object\r\n This is a really basic Matrix4 class used for matrix calculations\r\n Highly based on https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js and http://glmatrix.net/docs/mat4.js.html\r\n\r\n params :\r\n @elements (Float32Array of length 16): our matrix array. Default to identity matrix.\r\n\r\n returns :\r\n @this: our Mat4 class object\r\n ***/\r\n\r\n// TODO lot of (unused at the time) methods are missing\r\n\r\nclass Mat4 {\r\n    constructor(\r\n        elements = new Float32Array([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ]),\r\n    ) {\r\n        this.type = \"Mat4\";\r\n        this.elements = elements;\r\n    }\r\n\r\n    /***\r\n     Sets the matrix values from an array\r\n\r\n     params:\r\n     @array (array): an array of at least 16 elements\r\n\r\n     returns:\r\n     @this (Mat4 class object): this matrix after being set\r\n     ***/\r\n    setFromArray(array) {\r\n        for(let i = 0; i < this.elements.length; i++) {\r\n            this.elements[i] = array[i];\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     Copy another Mat4\r\n\r\n     params:\r\n     @matrix (Mat4 class object): matrix to copy\r\n\r\n     returns:\r\n     @this (Mat4 class object): this matrix after copy\r\n     ***/\r\n    copy(matrix) {\r\n        const array = matrix.elements;\r\n        this.elements[0] = array[0];\r\n        this.elements[1] = array[1];\r\n        this.elements[2] = array[2];\r\n        this.elements[3] = array[3];\r\n        this.elements[4] = array[4];\r\n        this.elements[5] = array[5];\r\n        this.elements[6] = array[6];\r\n        this.elements[7] = array[7];\r\n        this.elements[8] = array[8];\r\n        this.elements[9] = array[9];\r\n        this.elements[10] = array[10];\r\n        this.elements[11] = array[11];\r\n        this.elements[12] = array[12];\r\n        this.elements[13] = array[13];\r\n        this.elements[14] = array[14];\r\n        this.elements[15] = array[15];\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Clone a matrix\r\n\r\n     returns:\r\n     @clonedMatrix (Mat4 object): cloned matrix\r\n     ***/\r\n    clone() {\r\n        return new Mat4().copy(this);\r\n    }\r\n\r\n    /***\r\n     Simple matrix multiplication helper\r\n\r\n     params:\r\n     @matrix (Mat4 class object): Mat4 to multiply with\r\n\r\n     returns:\r\n     @result (Mat4 class object): Mat4 after multiplication\r\n     ***/\r\n    multiply(matrix) {\r\n        const a = this.elements;\r\n        const b = matrix.elements;\r\n\r\n        let result = new Mat4();\r\n\r\n        result.elements[0] = b[0] * a[0] + b[1] * a[4] + b[2] * a[8] + b[3] * a[12];\r\n        result.elements[1] = b[0] * a[1] + b[1] * a[5] + b[2] * a[9] + b[3] * a[13];\r\n        result.elements[2] = b[0] * a[2] + b[1] * a[6] + b[2] * a[10] + b[3] * a[14];\r\n        result.elements[3] = b[0] * a[3] + b[1] * a[7] + b[2] * a[11] + b[3] * a[15];\r\n\r\n        result.elements[4] = b[4] * a[0] + b[5] * a[4] + b[6] * a[8] + b[7] * a[12];\r\n        result.elements[5] = b[4] * a[1] + b[5] * a[5] + b[6] * a[9] + b[7] * a[13];\r\n        result.elements[6] = b[4] * a[2] + b[5] * a[6] + b[6] * a[10] + b[7] * a[14];\r\n        result.elements[7] = b[4] * a[3] + b[5] * a[7] + b[6] * a[11] + b[7] * a[15];\r\n\r\n        result.elements[8] = b[8] * a[0] + b[9] * a[4] + b[10] * a[8] + b[11] * a[12];\r\n        result.elements[9] = b[8] * a[1] + b[9] * a[5] + b[10] * a[9] + b[11] * a[13];\r\n        result.elements[10] = b[8] * a[2] + b[9] * a[6] + b[10] * a[10] + b[11] * a[14];\r\n        result.elements[11] = b[8] * a[3] + b[9] * a[7] + b[10] * a[11] + b[11] * a[15];\r\n\r\n        result.elements[12] = b[12] * a[0] + b[13] * a[4] + b[14] * a[8] + b[15] * a[12];\r\n        result.elements[13] = b[12] * a[1] + b[13] * a[5] + b[14] * a[9] + b[15] * a[13];\r\n        result.elements[14] = b[12] * a[2] + b[13] * a[6] + b[14] * a[10] + b[15] * a[14];\r\n        result.elements[15] = b[12] * a[3] + b[13] * a[7] + b[14] * a[11] + b[15] * a[15];\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    /***\r\n     Get matrix inverse\r\n\r\n     returns:\r\n     @result (Mat4 class object): inverted Mat4\r\n     ***/\r\n    getInverse() {\r\n        const te = this.elements;\r\n        const out = new Mat4();\r\n        const oe = out.elements;\r\n\r\n        let a00 = te[0],\r\n            a01 = te[1],\r\n            a02 = te[2],\r\n            a03 = te[3];\r\n\r\n        let a10 = te[4],\r\n            a11 = te[5],\r\n            a12 = te[6],\r\n            a13 = te[7];\r\n\r\n        let a20 = te[8],\r\n            a21 = te[9],\r\n            a22 = te[10],\r\n            a23 = te[11];\r\n\r\n        let a30 = te[12],\r\n            a31 = te[13],\r\n            a32 = te[14],\r\n            a33 = te[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1 / det;\r\n\r\n        oe[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        oe[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        oe[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        oe[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        oe[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        oe[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        oe[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        oe[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        oe[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        oe[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        oe[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        oe[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        oe[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        oe[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        oe[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        oe[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return out;\r\n    }\r\n\r\n\r\n    /***\r\n     Simple Mat4 scaling helper\r\n\r\n     params :\r\n     @vector (Vec3 class object): Vec3 representing scale along X, Y and Z axis\r\n\r\n     returns :\r\n     @result (Mat4 class object): Mat4 after scaling\r\n     ***/\r\n    scale(vector) {\r\n        let a = this.elements;\r\n        let result = new Mat4();\r\n\r\n        result.elements[0] = vector.x * a[0 * 4 + 0];\r\n        result.elements[1] = vector.x * a[0 * 4 + 1];\r\n        result.elements[2] = vector.x * a[0 * 4 + 2];\r\n        result.elements[3] = vector.x * a[0 * 4 + 3];\r\n        result.elements[4] = vector.y * a[1 * 4 + 0];\r\n        result.elements[5] = vector.y * a[1 * 4 + 1];\r\n        result.elements[6] = vector.y * a[1 * 4 + 2];\r\n        result.elements[7] = vector.y * a[1 * 4 + 3];\r\n        result.elements[8] = vector.z * a[2 * 4 + 0];\r\n        result.elements[9] = vector.z * a[2 * 4 + 1];\r\n        result.elements[10] = vector.z * a[2 * 4 + 2];\r\n        result.elements[11] = vector.z * a[2 * 4 + 3];\r\n\r\n        if(a !== result.elements) {\r\n            result.elements[12] = a[12];\r\n            result.elements[13] = a[13];\r\n            result.elements[14] = a[14];\r\n            result.elements[15] = a[15];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    /***\r\n     Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n     Equivalent for applying translation, rotation and scale matrices but much faster\r\n     Source code from: http://glmatrix.net/docs/mat4.js.html\r\n\r\n     params :\r\n     @translation (Vec3 class object): translation vector\r\n     @quaternion (Quat class object): rotation quaternion\r\n     @scale (Vec3 class object): scale vector\r\n     @origin (Vec3 class object): origin vector around which to scale and rotate\r\n\r\n     returns :\r\n     @this (Mat4 class object): matrix after transformations\r\n     ***/\r\n    composeFromOrigin(translation, quaternion, scale, origin) {\r\n        let matrix = this.elements;\r\n\r\n        // Quaternion math\r\n        const x = quaternion.elements[0], y = quaternion.elements[1], z = quaternion.elements[2], w = quaternion.elements[3];\r\n\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z; // scale along Z is always equal to 1 anyway\r\n\r\n        const ox = origin.x;\r\n        const oy = origin.y;\r\n        const oz = origin.z;\r\n\r\n        const out0 = (1 - (yy + zz)) * sx;\r\n        const out1 = (xy + wz) * sx;\r\n        const out2 = (xz - wy) * sx;\r\n        const out4 = (xy - wz) * sy;\r\n        const out5 = (1 - (xx + zz)) * sy;\r\n        const out6 = (yz + wx) * sy;\r\n        const out8 = (xz + wy) * sz;\r\n        const out9 = (yz - wx) * sz;\r\n        const out10 = (1 - (xx + yy)) * sz;\r\n\r\n        matrix[0] = out0;\r\n        matrix[1] = out1;\r\n        matrix[2] = out2;\r\n        matrix[3] = 0;\r\n        matrix[4] = out4;\r\n        matrix[5] = out5;\r\n        matrix[6] = out6;\r\n        matrix[7] = 0;\r\n        matrix[8] = out8;\r\n        matrix[9] = out9;\r\n        matrix[10] = out10;\r\n        matrix[11] = 0;\r\n        matrix[12] = translation.x + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n        matrix[13] = translation.y + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n        matrix[14] = translation.z + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n        matrix[15] = 1;\r\n\r\n        return this;\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/math/Mat4.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/math/Quat.js":
/*!***************************************************!*\
  !*** ../node_modules/curtainsjs/src/math/Quat.js ***!
  \***************************************************/
/*! exports provided: Quat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Quat\", function() { return Quat; });\n/***\r\n Here we create a Quat class object\r\n This is a really basic Quaternion class used for rotation calculations\r\n Highly based on https://github.com/mrdoob/three.js/blob/dev/src/math/Quaternion.js\r\n\r\n params :\r\n @elements (Float32Array of length 4): our quaternion array. Default to identity quaternion.\r\n\r\n returns :\r\n @this: our Quat class object\r\n ***/\r\n\r\n// TODO lot of (unused at the time) methods are missing\r\n\r\nclass Quat {\r\n    constructor(\r\n        elements = new Float32Array([0, 0, 0, 1]),\r\n        axisOrder = \"XYZ\"\r\n    ) {\r\n        this.type = \"Quat\";\r\n        this.elements = elements;\r\n        // rotation axis order\r\n        this.axisOrder = axisOrder;\r\n    }\r\n\r\n    /***\r\n     Sets the quaternion values from an array\r\n\r\n     params:\r\n     @array (array): an array of at least 4 elements\r\n\r\n     returns:\r\n     @this (Quat class object): this quaternion after being set\r\n     ***/\r\n    setFromArray(array) {\r\n        this.elements[0] = array[0];\r\n        this.elements[1] = array[1];\r\n        this.elements[2] = array[2];\r\n        this.elements[3] = array[3];\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     Sets the quaternion axis order\r\n\r\n     params:\r\n     @axisOrder (string): an array of at least 4 elements\r\n\r\n     returns:\r\n     @this (Quat class object): this quaternion after axis order has been set\r\n     ***/\r\n    setAxisOrder(axisOrder) {\r\n        // force uppercase for strict equality tests\r\n        axisOrder = axisOrder.toUpperCase();\r\n\r\n        switch (axisOrder) {\r\n            case \"XYZ\" :\r\n            case \"YXZ\" :\r\n            case \"ZXY\" :\r\n            case \"ZYX\" :\r\n            case \"YZX\" :\r\n            case \"XZY\" :\r\n                this.axisOrder = axisOrder;\r\n                break;\r\n            default :\r\n                // apply a default axis order\r\n                this.axisOrder = \"XYZ\";\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Copy a quaternion into this quaternion\r\n\r\n     params:\r\n     @vector (Quat): quaternion to copy\r\n\r\n     returns:\r\n     @this (Quat): this quaternion after copy\r\n     ***/\r\n    copy(quaternion) {\r\n        this.elements = quaternion.elements;\r\n        this.axisOrder = quaternion.axisOrder;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Clone a quaternion\r\n\r\n     returns:\r\n     @clonedQuaternion (Quat): cloned quaternion\r\n     ***/\r\n    clone() {\r\n        return new Quat().copy(this);\r\n    }\r\n\r\n\r\n    /***\r\n     Checks if 2 quaternions are equal\r\n\r\n     returns:\r\n     @isEqual (bool): whether the quaternions are equals or not\r\n     ***/\r\n    equals(quaternion) {\r\n        return this.elements[0] === quaternion.elements[0]\r\n            && this.elements[1] === quaternion.elements[1]\r\n            && this.elements[2] === quaternion.elements[2]\r\n            && this.elements[3] === quaternion.elements[3]\r\n            && this.axisOrder === quaternion.axisOrder;\r\n    }\r\n\r\n    /***\r\n     Sets a rotation quaternion using Euler angles and its axis order\r\n\r\n     params:\r\n     @vector (Vec3 class object): rotation vector to set our quaternion from\r\n\r\n     returns :\r\n     @this (Quat class object): quaternion after having applied the rotation\r\n     ***/\r\n    setFromVec3(vector) {\r\n        const ax = vector.x * 0.5;\r\n        const ay = vector.y * 0.5;\r\n        const az = vector.z * 0.5;\r\n\r\n        const cosx = Math.cos(ax);\r\n        const cosy = Math.cos(ay);\r\n        const cosz = Math.cos(az);\r\n        const sinx = Math.sin(ax);\r\n        const siny = Math.sin(ay);\r\n        const sinz = Math.sin(az);\r\n\r\n        // XYZ order\r\n        if(this.axisOrder === \"XYZ\") {\r\n            this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"YXZ\") {\r\n            this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"ZXY\") {\r\n            this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"ZYX\") {\r\n            this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"YZX\") {\r\n            this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"XZY\") {\r\n            this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/math/Quat.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/math/Vec2.js":
/*!***************************************************!*\
  !*** ../node_modules/curtainsjs/src/math/Vec2.js ***!
  \***************************************************/
/*! exports provided: Vec2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vec2\", function() { return Vec2; });\n/***\r\n Here we create a Vec2 class object\r\n This is a really basic Vector2 class used for vector calculations\r\n Highly based on https://github.com/mrdoob/three.js/blob/dev/src/math/Vector2.js and http://glmatrix.net/docs/vec2.js.html\r\n\r\n params :\r\n @x (float): X component of our vector\r\n @y (float): Y component of our vector\r\n\r\n returns :\r\n @this: our Vec2 class object\r\n ***/\r\n\r\n// TODO lot of (unused at the time) methods are missing\r\n\r\nclass Vec2 {\r\n    constructor(\r\n        x = 0,\r\n        y = 0,\r\n    ) {\r\n        this.type = \"Vec2\";\r\n        this.set(x, y);\r\n    }\r\n\r\n    /***\r\n     Sets the vector from values\r\n\r\n     params:\r\n     @x (float): X component of our vector\r\n     @y (float): Y component of our vector\r\n\r\n     returns:\r\n     @this (Vec2): this vector after being set\r\n     ***/\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     Adds a vector to this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector to add\r\n\r\n     returns:\r\n     @this (Vec2): this vector after addition\r\n     ***/\r\n    add(vector) {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Adds a scalar to this vector\r\n\r\n     params:\r\n     @value (float): number to add\r\n\r\n     returns:\r\n     @this (Vec2): this vector after addition\r\n     ***/\r\n    addScalar(value) {\r\n        this.x += value;\r\n        this.y += value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Subtracts a vector from this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector to use for subtraction\r\n\r\n     returns:\r\n     @this (Vec2): this vector after subtraction\r\n     ***/\r\n    sub(vector) {\r\n        this.x -= vector.x;\r\n        this.y -= vector.y;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Subtracts a scalar to this vector\r\n\r\n     params:\r\n     @value (float): number to use for subtraction\r\n\r\n     returns:\r\n     @this (Vec2): this vector after subtraction\r\n     ***/\r\n    subScalar(value) {\r\n        this.x -= value;\r\n        this.y -= value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Multiplies a vector with this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector to use for multiplication\r\n\r\n     returns:\r\n     @this (Vec2): this vector after multiplication\r\n     ***/\r\n    multiply(vector) {\r\n        this.x *= vector.x;\r\n        this.y *= vector.y;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Multiplies a scalar with this vector\r\n\r\n     params:\r\n     @value (float): number to use for multiplication\r\n\r\n     returns:\r\n     @this (Vec2): this vector after multiplication\r\n     ***/\r\n    multiplyScalar(value) {\r\n        this.x *= value;\r\n        this.y *= value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Copy a vector into this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector to copy\r\n\r\n     returns:\r\n     @this (Vec2): this vector after copy\r\n     ***/\r\n    copy(vector) {\r\n        this.x = vector.x;\r\n        this.y = vector.y;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Clone this vector\r\n\r\n     returns:\r\n     @vector (Vec2): cloned vector\r\n     ***/\r\n    clone() {\r\n        return new Vec2(this.x, this.y);\r\n    }\r\n\r\n\r\n    /***\r\n     Merges this vector with a vector when values are NaN. Mostly used internally.\r\n\r\n     params:\r\n     @vector (Vec2): vector to use for sanitization\r\n\r\n     returns:\r\n     @vector (Vec2): sanitized vector\r\n     ***/\r\n    sanitizeNaNValuesWith(vector) {\r\n        this.x = isNaN(this.x) ? vector.x : parseFloat(this.x);\r\n        this.y = isNaN(this.y) ? vector.y : parseFloat(this.y);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply max values to this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector representing max values\r\n\r\n     returns:\r\n     @vector (Vec2): vector with max values applied\r\n     ***/\r\n    max(vector) {\r\n        this.x = Math.max(this.x, vector.x);\r\n        this.y = Math.max(this.y, vector.y);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply min values to this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector representing min values\r\n\r\n     returns:\r\n     @vector (Vec2): vector with min values applied\r\n     ***/\r\n    min(vector) {\r\n        this.x = Math.min(this.x, vector.x);\r\n        this.y = Math.min(this.y, vector.y);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Checks if 2 vectors are equal\r\n\r\n     params:\r\n     @vector (Vec2): vector to compare\r\n\r\n     returns:\r\n     @isEqual (bool): whether the vectors are equals or not\r\n     ***/\r\n    equals(vector) {\r\n        return this.x === vector.x && this.y === vector.y;\r\n    }\r\n\r\n\r\n    /***\r\n     Normalize this vector\r\n\r\n     returns:\r\n     @this (Vec2): normalized vector\r\n     ***/\r\n    normalize() {\r\n        // normalize\r\n        let len = this.x * this.x + this.y * this.y;\r\n        if (len > 0) {\r\n            len = 1 / Math.sqrt(len);\r\n        }\r\n        this.x *= len;\r\n        this.y *= len;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Calculates the dot product of 2 vectors\r\n\r\n     params:\r\n     @vector (Vec2): vector to use for dot product\r\n\r\n     returns:\r\n     @dotProduct (float): dot product of the 2 vectors\r\n     ***/\r\n    dot(vector) {\r\n        return this.x * vector.x + this.y * vector.y;\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/math/Vec2.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/math/Vec3.js":
/*!***************************************************!*\
  !*** ../node_modules/curtainsjs/src/math/Vec3.js ***!
  \***************************************************/
/*! exports provided: Vec3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vec3\", function() { return Vec3; });\n/***\r\n Here we create a Vec3 class object\r\n This is a really basic Vector3 class used for vector calculations\r\n Highly based on https://github.com/mrdoob/three.js/blob/dev/src/math/Vector3.js and http://glmatrix.net/docs/vec3.js.html\r\n\r\n params :\r\n @x (float): X component of our vector\r\n @y (float): Y component of our vector\r\n @z (float): Z component of our vector\r\n\r\n returns :\r\n @this: our Vec3 class object\r\n ***/\r\n\r\n// TODO lot of (unused at the time) methods are missing\r\n\r\nclass Vec3 {\r\n    constructor(\r\n        x = 0,\r\n        y = 0,\r\n        z = 0,\r\n    ) {\r\n        this.type = \"Vec3\";\r\n        this.set(x, y, z);\r\n    }\r\n\r\n    /***\r\n     Sets the vector from values\r\n\r\n     params:\r\n     @x (float): X component of our vector\r\n     @y (float): Y component of our vector\r\n     @z (float): Z component of our vector\r\n\r\n     returns:\r\n     @this (Vec2): this vector after being set\r\n     ***/\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Adds a vector to this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector to add\r\n\r\n     returns:\r\n     @this (Vec3): this vector after addition\r\n     ***/\r\n    add(vector) {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n        this.z += vector.z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Adds a scalar to this vector\r\n\r\n     params:\r\n     @value (float): number to add\r\n\r\n     returns:\r\n     @this (Vec3): this vector after addition\r\n     ***/\r\n    addScalar(value) {\r\n        this.x += value;\r\n        this.y += value;\r\n        this.z += value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Subtracts a vector from this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector to use for subtraction\r\n\r\n     returns:\r\n     @this (Vec3): this vector after subtraction\r\n     ***/\r\n    sub(vector) {\r\n        this.x -= vector.x;\r\n        this.y -= vector.y;\r\n        this.z -= vector.z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Subtracts a scalar to this vector\r\n\r\n     params:\r\n     @value (float): number to use for subtraction\r\n\r\n     returns:\r\n     @this (Vec3): this vector after subtraction\r\n     ***/\r\n    subScalar(value) {\r\n        this.x -= value;\r\n        this.y -= value;\r\n        this.z -= value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Multiplies a vector with this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector to use for multiplication\r\n\r\n     returns:\r\n     @this (Vec3): this vector after multiplication\r\n     ***/\r\n    multiply(vector) {\r\n        this.x *= vector.x;\r\n        this.y *= vector.y;\r\n        this.z *= vector.z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Multiplies a scalar with this vector\r\n\r\n     params:\r\n     @value (float): number to use for multiplication\r\n\r\n     returns:\r\n     @this (Vec3): this vector after multiplication\r\n     ***/\r\n    multiplyScalar(value) {\r\n        this.x *= value;\r\n        this.y *= value;\r\n        this.z *= value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Copy a vector into this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector to copy\r\n\r\n     returns:\r\n     @this (Vec3): this vector after copy\r\n     ***/\r\n    copy(vector) {\r\n        this.x = vector.x;\r\n        this.y = vector.y;\r\n        this.z = vector.z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Clone this vector\r\n\r\n     returns:\r\n     @vector (Vec3): cloned vector\r\n     ***/\r\n    clone() {\r\n        return new Vec3(this.x, this.y, this.z);\r\n    }\r\n\r\n\r\n    /***\r\n     Merges this vector with a vector when values are NaN. Mostly used internally.\r\n\r\n     params:\r\n     @vector (Vec3): vector to use for sanitization\r\n\r\n     returns:\r\n     @vector (Vec3): sanitized vector\r\n     ***/\r\n    sanitizeNaNValuesWith(vector) {\r\n        this.x = isNaN(this.x) ? vector.x : parseFloat(this.x);\r\n        this.y = isNaN(this.y) ? vector.y : parseFloat(this.y);\r\n        this.z = isNaN(this.z) ? vector.z : parseFloat(this.z);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply max values to this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector representing max values\r\n\r\n     returns:\r\n     @vector (Vec3): vector with max values applied\r\n     ***/\r\n    max(vector) {\r\n        this.x = Math.max(this.x, vector.x);\r\n        this.y = Math.max(this.y, vector.y);\r\n        this.z = Math.max(this.z, vector.z);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply min values to this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector representing min values\r\n\r\n     returns:\r\n     @vector (Vec3): vector with min values applied\r\n     ***/\r\n    min(vector) {\r\n        this.x = Math.min(this.x, vector.x);\r\n        this.y = Math.min(this.y, vector.y);\r\n        this.z = Math.min(this.z, vector.z);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Checks if 2 vectors are equal\r\n\r\n     returns:\r\n     @isEqual (bool): whether the vectors are equals or not\r\n     ***/\r\n    equals(vector) {\r\n        return this.x === vector.x && this.y === vector.y && this.z === vector.z;\r\n    }\r\n\r\n\r\n    /***\r\n     Normalize this vector\r\n\r\n     returns:\r\n     @this (Vec3): normalized vector\r\n     ***/\r\n    normalize() {\r\n        // normalize\r\n        let len = this.x * this.x + this.y * this.y + this.z * this.z;\r\n        if (len > 0) {\r\n            len = 1 / Math.sqrt(len);\r\n        }\r\n        this.x *= len;\r\n        this.y *= len;\r\n        this.z *= len;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Calculates the dot product of 2 vectors\r\n\r\n     returns:\r\n     @dotProduct (float): dot product of the 2 vectors\r\n     ***/\r\n    dot(vector) {\r\n        return this.x * vector.x + this.y * vector.y + this.z * vector.z;\r\n    }\r\n\r\n    /***\r\n     Apply a matrix 4 to a point (vec3)\r\n     Useful to convert a point position from plane local world to webgl space using projection view matrix for example\r\n     Source code from: http://glmatrix.net/docs/vec3.js.html\r\n\r\n     params :\r\n     @matrix (array): 4x4 matrix used\r\n\r\n     returns :\r\n     @this (Vec3): this vector after matrix application\r\n     ***/\r\n    applyMat4(matrix) {\r\n        const x = this.x, y = this.y, z = this.z;\r\n        const mArray = matrix.elements;\r\n\r\n        let w = mArray[3] * x + mArray[7] * y + mArray[11] * z + mArray[15];\r\n        w = w || 1;\r\n\r\n        this.x = (mArray[0] * x + mArray[4] * y + mArray[8] * z + mArray[12]) / w;\r\n        this.y = (mArray[1] * x + mArray[5] * y + mArray[9] * z + mArray[13]) / w;\r\n        this.z = (mArray[2] * x + mArray[6] * y + mArray[10] * z + mArray[14]) / w;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply a quaternion (rotation in 3D space) to this vector\r\n\r\n     params :\r\n     @quaternion (Quat): quaternion to use\r\n\r\n     returns :\r\n     @this (Vec3): this vector after applying the transformation\r\n     ***/\r\n    applyQuat(quaternion) {\r\n        const x = this.x, y = this.y, z = this.z;\r\n        const qx = quaternion.elements[0], qy = quaternion.elements[1], qz = quaternion.elements[2], qw = quaternion.elements[3];\r\n\r\n        // calculate quat * vector\r\n\r\n        const ix = qw * x + qy * z - qz * y;\r\n        const iy = qw * y + qz * x - qx * z;\r\n        const iz = qw * z + qx * y - qy * x;\r\n        const iw = - qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse quat\r\n\r\n        this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n        this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n        this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Project 3D coordinate to 2D point\r\n\r\n     params:\r\n     @camera (Camera): camera to use for projection\r\n     ***/\r\n    project(camera) {\r\n        this.applyMat4(camera.viewMatrix).applyMat4(camera.projectionMatrix);\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Unproject 2D point to 3D coordinate\r\n\r\n     params:\r\n     @camera (Camera): camera to use for projection\r\n     ***/\r\n    unproject(camera) {\r\n        this.applyMat4(camera.projectionMatrix.getInverse()).applyMat4(camera.worldMatrix);\r\n        return this;\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/math/Vec3.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/shaders/chunks/default.attributes.glsl.js":
/*!********************************************************************************!*\
  !*** ../node_modules/curtainsjs/src/shaders/chunks/default.attributes.glsl.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst defaultAttributes = `\r\nattribute vec3 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n`;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (defaultAttributes.replace(/\\n/g, ''));\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/shaders/chunks/default.attributes.glsl.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/shaders/chunks/default.varyings.glsl.js":
/*!******************************************************************************!*\
  !*** ../node_modules/curtainsjs/src/shaders/chunks/default.varyings.glsl.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst defaultVaryings = `\r\nvarying vec3 vVertexPosition;\r\nvarying vec2 vTextureCoord;\r\n`;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (defaultVaryings.replace(/\\n/g, ''));\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/shaders/chunks/default.varyings.glsl.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/shaders/chunks/precision.medium.glsl.js":
/*!******************************************************************************!*\
  !*** ../node_modules/curtainsjs/src/shaders/chunks/precision.medium.glsl.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst precisionMedium = `\r\nprecision mediump float;\r\n`;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (precisionMedium.replace(/\\n/g, ''));\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/shaders/chunks/precision.medium.glsl.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/shaders/plane.fragment.glsl.js":
/*!*********************************************************************!*\
  !*** ../node_modules/curtainsjs/src/shaders/plane.fragment.glsl.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _chunks_precision_medium_glsl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/precision.medium.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/precision.medium.glsl.js\");\n/* harmony import */ var _chunks_default_varyings_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/default.varyings.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/default.varyings.glsl.js\");\n\r\n\r\n\r\nconst planeFS = _chunks_precision_medium_glsl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] + _chunks_default_varyings_glsl_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] + `\r\nvoid main() {\r\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n}\r\n`;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (planeFS.replace(/\\n/g, ''));\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/shaders/plane.fragment.glsl.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/shaders/plane.vertex.glsl.js":
/*!*******************************************************************!*\
  !*** ../node_modules/curtainsjs/src/shaders/plane.vertex.glsl.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _chunks_precision_medium_glsl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/precision.medium.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/precision.medium.glsl.js\");\n/* harmony import */ var _chunks_default_attributes_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/default.attributes.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/default.attributes.glsl.js\");\n/* harmony import */ var _chunks_default_varyings_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks/default.varyings.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/default.varyings.glsl.js\");\n\r\n\r\n\r\n\r\nconst planeVS = _chunks_precision_medium_glsl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] + _chunks_default_attributes_glsl_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] + _chunks_default_varyings_glsl_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] + `\r\nuniform mat4 uMVMatrix;\r\nuniform mat4 uPMatrix;\r\n\r\nvoid main() {\r\n    vTextureCoord = aTextureCoord;\r\n    vVertexPosition = aVertexPosition;\r\n    \r\n    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\r\n}\r\n`;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (planeVS.replace(/\\n/g, ''));\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/shaders/plane.vertex.glsl.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/shaders/shaderpass.fragment.glsl.js":
/*!**************************************************************************!*\
  !*** ../node_modules/curtainsjs/src/shaders/shaderpass.fragment.glsl.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _chunks_precision_medium_glsl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/precision.medium.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/precision.medium.glsl.js\");\n/* harmony import */ var _chunks_default_varyings_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/default.varyings.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/default.varyings.glsl.js\");\n\r\n\r\n\r\nconst shaderPassFS = _chunks_precision_medium_glsl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] + _chunks_default_varyings_glsl_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] + `\r\nuniform sampler2D uRenderTexture;\r\n\r\nvoid main() {\r\n    gl_FragColor = texture2D(uRenderTexture, vTextureCoord);\r\n}\r\n`;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (shaderPassFS.replace(/\\n/g, ''));\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/shaders/shaderpass.fragment.glsl.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/shaders/shaderpass.vertex.glsl.js":
/*!************************************************************************!*\
  !*** ../node_modules/curtainsjs/src/shaders/shaderpass.vertex.glsl.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _chunks_precision_medium_glsl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/precision.medium.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/precision.medium.glsl.js\");\n/* harmony import */ var _chunks_default_attributes_glsl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/default.attributes.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/default.attributes.glsl.js\");\n/* harmony import */ var _chunks_default_varyings_glsl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks/default.varyings.glsl.js */ \"../node_modules/curtainsjs/src/shaders/chunks/default.varyings.glsl.js\");\n\r\n\r\n\r\n\r\nconst shaderPassVS = _chunks_precision_medium_glsl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] + _chunks_default_attributes_glsl_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] + _chunks_default_varyings_glsl_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] + `\r\nvoid main() {\r\n    vTextureCoord = aTextureCoord;\r\n    vVertexPosition = aVertexPosition;\r\n    \r\n    gl_Position = vec4(aVertexPosition, 1.0);\r\n}\r\n`;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (shaderPassVS.replace(/\\n/g, ''));\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/shaders/shaderpass.vertex.glsl.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/utils/CacheManager.js":
/*!************************************************************!*\
  !*** ../node_modules/curtainsjs/src/utils/CacheManager.js ***!
  \************************************************************/
/*! exports provided: CacheManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CacheManager\", function() { return CacheManager; });\n/***\r\n Here we create a CacheManager class object\r\n This will store geometries attributes arrays, textures and WebGL programs in arrays\r\n This helps speed up slow synchronous CPU operations such as WebGL shaders compilations, images decoding, etc.\r\n\r\n returns :\r\n @this: our CacheManager class object\r\n ***/\r\nclass CacheManager {\r\n    constructor() {\r\n        // never clear cached geometries\r\n        this.geometries = [];\r\n\r\n        this.clear();\r\n    }\r\n\r\n    /***\r\n     Clear WebGL context depending cache arrays (used on init and context restoration)\r\n     ***/\r\n    clear() {\r\n        // only cache images textures for now\r\n        this.textures = [];\r\n\r\n        // cached programs\r\n        this.programs = [];\r\n    }\r\n\r\n\r\n    /*** GEOMETRIES ***/\r\n\r\n    /***\r\n     Check if this geometry is already in our cached geometries array\r\n\r\n     params:\r\n     @definitionID (integer): the geometry ID\r\n     ***/\r\n    getGeometryFromID(definitionID) {\r\n        return this.geometries.find(element => element.id === definitionID);\r\n    }\r\n\r\n    /***\r\n     Add a geometry to our cache if not already in it\r\n\r\n     params:\r\n     @definitionID  (integer): the geometry ID to add to our cache\r\n     @vertices (array): vertices coordinates array to add to our cache\r\n     @uvs (array): uvs coordinates array to add to our cache\r\n     ***/\r\n    addGeometry(definitionID, vertices, uvs) {\r\n        this.geometries.push({\r\n            id: definitionID,\r\n            vertices: vertices,\r\n            uvs: uvs\r\n        });\r\n    }\r\n\r\n\r\n    /*** PROGRAMS ***/\r\n\r\n    /***\r\n     Compare two shaders strings to detect whether they are equal or not\r\n\r\n     params:\r\n     @firstShader (string): shader code\r\n     @secondShader (string): shader code\r\n\r\n     returns:\r\n     @isSameShader (bool): whether both shaders are equal or not\r\n     ***/\r\n    isSameShader(firstShader, secondShader) {\r\n        return firstShader.localeCompare(secondShader) === 0;\r\n    }\r\n\r\n    /***\r\n     Returns a program from our cache if this program's vertex and fragment shaders code are the same as the one provided\r\n\r\n     params:\r\n     @vsCode (string): vertex shader code\r\n     @fsCode (string): fragment shader code\r\n\r\n     returns:\r\n     @program (Program class object or null): our program if it has been found\r\n     ***/\r\n    getProgramFromShaders(vsCode, fsCode) {\r\n        return this.programs.find((element) => {\r\n            return this.isSameShader(element.vsCode, vsCode) && this.isSameShader(element.fsCode, fsCode);\r\n        });\r\n    }\r\n\r\n    /***\r\n     Add a program to our cache\r\n\r\n     params :\r\n     @program (Program class object) : program to add to our cache\r\n     ***/\r\n    addProgram(program) {\r\n        this.programs.push(program);\r\n    }\r\n\r\n\r\n    /*** TEXTURES ***/\r\n\r\n    /***\r\n     Check if this source is already in our cached textures array\r\n\r\n     params :\r\n     @source (HTML element) : html image, video or canvas element (only images for now)\r\n     ***/\r\n    getTextureFromSource(source) {\r\n        // return the texture if the source is the same and if it's not the same texture\r\n        return this.textures.find(element => element.source && element.source.src === source.src && element.uuid !== element.uuid);\r\n    }\r\n\r\n    /***\r\n     Add a texture to our cache if not already in it\r\n\r\n     params :\r\n     @texture (Texture class object) : texture to add to our cache\r\n     ***/\r\n    addTexture(texture) {\r\n        const cachedTexture = this.getTextureFromSource(texture.source);\r\n\r\n        if(!cachedTexture) {\r\n            this.textures.push(texture);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Removes a texture from the cache array\r\n\r\n     params :\r\n     @texture (Texture class object) : texture to remove from our cache\r\n     ***/\r\n    removeTexture(texture) {\r\n        // remove from our textures array\r\n        this.textures = this.textures.filter(element => element.uuid !== texture.uuid);\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/utils/CacheManager.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/utils/CallbackQueueManager.js":
/*!********************************************************************!*\
  !*** ../node_modules/curtainsjs/src/utils/CallbackQueueManager.js ***!
  \********************************************************************/
/*! exports provided: CallbackQueueManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CallbackQueueManager\", function() { return CallbackQueueManager; });\n/***\r\n Here we create a CallbackQueueManager class object\r\n This allows to store callbacks in a queue array with a timeout of 0 to be executed on next render call\r\n\r\n returns:\r\n @this: our CallbackQueueManager class object\r\n ***/\r\nclass CallbackQueueManager {\r\n    constructor() {\r\n        this.clear();\r\n    }\r\n\r\n    /***\r\n     Clears our queue array (used on init)\r\n     ***/\r\n    clear() {\r\n        this.queue = [];\r\n    }\r\n\r\n    /***\r\n     Adds a callback to our queue list with a timeout of 0\r\n\r\n     params:\r\n     @callback (function): the callback to execute on next render call\r\n     @keep (bool): whether to keep calling that callback on each rendering call or not (act as a setInterval). Default to false\r\n\r\n     returns:\r\n     @queueItem: the queue item. Allows to keep a track of it and set its keep property to false when needed\r\n     ***/\r\n    add(callback, keep = false) {\r\n        const queueItem = {\r\n            callback,\r\n            keep,\r\n            timeout: null, // keep a reference to the timeout so we can safely delete if afterwards\r\n        };\r\n        queueItem.timeout = setTimeout(() => {\r\n            this.queue.push(queueItem);\r\n        }, 0);\r\n\r\n        return queueItem;\r\n    }\r\n\r\n    /***\r\n     Executes all callbacks in the queue and remove the ones that have their keep property set to false.\r\n     Called at the beginning of each render call\r\n     ***/\r\n    execute() {\r\n        // execute queue callbacks list\r\n        this.queue.map((entry) => {\r\n            if(entry.callback) {\r\n                entry.callback();\r\n            }\r\n\r\n            // clear our timeout\r\n            clearTimeout(this.queue.timeout);\r\n        });\r\n\r\n        // remove all items that have their keep property set to false\r\n        this.queue = this.queue.filter((entry) => entry.keep);\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/utils/CallbackQueueManager.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/utils/ScrollManager.js":
/*!*************************************************************!*\
  !*** ../node_modules/curtainsjs/src/utils/ScrollManager.js ***!
  \*************************************************************/
/*! exports provided: ScrollManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScrollManager\", function() { return ScrollManager; });\n/***\r\n Here we create a ScrollManager class object\r\n This keeps track of our scroll position, scroll deltas and triggers an onScroll callback\r\n Could either listen to the native scroll event or be hooked to any scroll (natural or virtual) scroll event\r\n\r\n params:\r\n @xOffset (float): scroll along X axis\r\n @yOffset (float): scroll along Y axis\r\n @lastXDelta (float): last scroll delta along X axis\r\n @lastYDelta (float): last scroll delta along Y axis\r\n\r\n @shouldWatch (bool): if the scroll manager should listen to the scroll event or not. Default to true.\r\n\r\n @onScroll (function): callback to execute each time the scroll values changed\r\n\r\n returns:\r\n @this: our ScrollManager class object\r\n ***/\r\nclass ScrollManager {\r\n    constructor({\r\n        xOffset = 0,\r\n        yOffset = 0,\r\n        lastXDelta = 0,\r\n        lastYDelta = 0,\r\n\r\n        shouldWatch = true,\r\n\r\n        onScroll = () => {},\r\n    } = {}) {\r\n        this.xOffset = xOffset;\r\n        this.yOffset = yOffset;\r\n        this.lastXDelta = lastXDelta;\r\n        this.lastYDelta = lastYDelta;\r\n        this.shouldWatch = shouldWatch;\r\n\r\n        this.onScroll = onScroll;\r\n\r\n        // keep a ref to our scroll event\r\n        this.handler = this.scroll.bind(this, true);\r\n        if(this.shouldWatch) {\r\n            window.addEventListener(\"scroll\", this.handler, {\r\n                passive: true\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Called by the scroll event listener\r\n     ***/\r\n    scroll() {\r\n        this.updateScrollValues(window.pageXOffset, window.pageYOffset)\r\n    }\r\n\r\n\r\n    /***\r\n     Updates the scroll manager X and Y scroll values as well as last X and Y deltas\r\n     Internally called by the scroll handler\r\n     Could be called externally as well if the user wants to handle the scroll by himself\r\n\r\n     params:\r\n     @x (float): scroll value along X axis\r\n     @y (float): scroll value along Y axis\r\n     ***/\r\n    updateScrollValues(x, y) {\r\n        // get our scroll delta values\r\n        const lastScrollXValue = this.xOffset;\r\n        this.xOffset = x;\r\n        this.lastXDelta = lastScrollXValue - this.xOffset;\r\n\r\n        const lastScrollYValue = this.yOffset;\r\n        this.yOffset = y;\r\n        this.lastYDelta = lastScrollYValue - this.yOffset;\r\n\r\n        if(this.onScroll) {\r\n            this.onScroll(this.lastXDelta, this.lastYDelta);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Dispose our scroll manager (just remove our event listner if it had been added previously)\r\n     ***/\r\n    dispose() {\r\n        if(this.shouldWatch) {\r\n            window.removeEventListener(\"scroll\", this.handler, {\r\n                passive: true\r\n            });\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/utils/ScrollManager.js?");

/***/ }),

/***/ "../node_modules/curtainsjs/src/utils/utils.js":
/*!*****************************************************!*\
  !*** ../node_modules/curtainsjs/src/utils/utils.js ***!
  \*****************************************************/
/*! exports provided: throwWarning, throwError, generateUUID, isPowerOf2, lerp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"throwWarning\", function() { return throwWarning; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"throwError\", function() { return throwError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateUUID\", function() { return generateUUID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isPowerOf2\", function() { return isPowerOf2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/***\r\n Throw a console warning with the passed arguments\r\n ***/\r\n\r\nlet warningThrown = 0;\r\n\r\nfunction throwWarning() {\r\n    if(warningThrown > 100) {\r\n        return;\r\n    }\r\n    else if(warningThrown === 100) {\r\n        console.warn(\"Curtains: too many warnings thrown, stop logging.\");\r\n    }\r\n    else {\r\n        const args = Array.prototype.slice.call(arguments);\r\n        console.warn.apply(console, args);\r\n    }\r\n\r\n    warningThrown++;\r\n}\r\n\r\n\r\n/***\r\n Throw a console error with the passed arguments\r\n ***/\r\nfunction throwError() {\r\n    const args = Array.prototype.slice.call(arguments);\r\n    console.error.apply(console, args);\r\n}\r\n\r\n\r\n/***\r\n Generates an universal unique identifier\r\n ***/\r\nfunction generateUUID() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16).toUpperCase();\r\n    });\r\n}\r\n\r\n\r\n/***\r\n Check whether a number is power of 2\r\n\r\n params:\r\n @value (float): number to check\r\n ***/\r\nfunction isPowerOf2(value) {\r\n    return (value & (value - 1)) === 0;\r\n}\r\n\r\n\r\n/***\r\n Linear interpolation between two numbers\r\n\r\n params:\r\n @start (float): value to lerp\r\n @end (float): end value to use for lerp\r\n @amount (float): amount of lerp\r\n ***/\r\nfunction lerp(start, end, amount) {\r\n    return (1 - amount) * start + amount * end;\r\n}\n\n//# sourceURL=webpack:///../node_modules/curtainsjs/src/utils/utils.js?");

/***/ }),

/***/ "./assets/js/app.js":
/*!**************************!*\
  !*** ./assets/js/app.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var curtainsjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! curtainsjs */ \"../node_modules/curtainsjs/src/index.mjs\");\n/* harmony import */ var _vender_matchMedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vender/_matchMedia */ \"./assets/js/vender/_matchMedia.js\");\n/* harmony import */ var _vender_ua__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vender/_ua */ \"./assets/js/vender/_ua.js\");\n\n\n\nwindow.addEventListener(\"load\", function () {\n  // track the mouse positions to send it to the shaders\n  var mousePosition = new curtainsjs__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](); // we will keep track of the last position in order to calculate the movement strength/delta\n\n  var mouseLastPosition = new curtainsjs__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"]();\n  var deltas = {\n    max: 0,\n    applied: 0\n  }; // set up our WebGL context and append the canvas to our wrapper\n\n  var curtains = new curtainsjs__WEBPACK_IMPORTED_MODULE_0__[\"Curtains\"]({\n    container: \"canvas\",\n    watchScroll: false,\n    // no need to listen for the scroll in this example\n    pixelRatio: Math.min(1.5, window.devicePixelRatio) // limit pixel ratio for performance\n\n  }); // handling errors\n\n  curtains.onError(function () {\n    // we will add a class to the document body to display original images\n    document.body.classList.add(\"no-curtains\");\n  }).onContextLost(function () {\n    // on context lost, try to restore the context\n    curtains.restoreContext();\n  }); // get our plane element\n\n  var planeElements = document.getElementsByClassName(\"curtain\");\n  var vs = \"\\n        precision mediump float;\\n\\n        // default mandatory variables\\n        attribute vec3 aVertexPosition;\\n        attribute vec2 aTextureCoord;\\n\\n        uniform mat4 uMVMatrix;\\n        uniform mat4 uPMatrix;\\n\\n        // our texture matrix uniform\\n        uniform mat4 simplePlaneTextureMatrix;\\n\\n        // custom variables\\n        varying vec3 vVertexPosition;\\n        varying vec2 vTextureCoord;\\n\\n        uniform float uTime;\\n        uniform vec2 uResolution;\\n        uniform vec2 uMousePosition;\\n        uniform float uMouseMoveStrength;\\n\\n\\n        void main() {\\n\\n            vec3 vertexPosition = aVertexPosition;\\n\\n            // get the distance between our vertex and the mouse position\\n            float distanceFromMouse = distance(uMousePosition, vec2(vertexPosition.x, vertexPosition.y));\\n\\n            // calculate our wave effect\\n            float waveSinusoid = cos(5.0 * (distanceFromMouse - (uTime / 75.0)));\\n\\n            // attenuate the effect based on mouse distance\\n            float distanceStrength = (0.4 / (distanceFromMouse + 0.4));\\n\\n            // calculate our distortion effect\\n            float distortionEffect = distanceStrength * waveSinusoid * uMouseMoveStrength;\\n\\n            // apply it to our vertex position\\n            vertexPosition.z +=  distortionEffect / 30.0;\\n            vertexPosition.x +=  (distortionEffect / 30.0 * (uResolution.x / uResolution.y) * (uMousePosition.x - vertexPosition.x));\\n            vertexPosition.y +=  distortionEffect / 30.0 * (uMousePosition.y - vertexPosition.y);\\n\\n            gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\\n\\n            // varyings\\n            vTextureCoord = (simplePlaneTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;\\n            vVertexPosition = vertexPosition;\\n        }\\n    \";\n  var fs = \"\\n        precision mediump float;\\n\\n        varying vec3 vVertexPosition;\\n        varying vec2 vTextureCoord;\\n\\n        uniform sampler2D simplePlaneTexture;\\n\\n        void main() {\\n            // apply our texture\\n            vec4 finalColor = texture2D(simplePlaneTexture, vTextureCoord);\\n\\n            // fake shadows based on vertex position along Z axis\\n            finalColor.rgb -= clamp(-vVertexPosition.z, 0.0, 1.0);\\n            // fake lights based on vertex position along Z axis\\n            finalColor.rgb += clamp(vVertexPosition.z, 0.0, 1.0);\\n\\n            // handling premultiplied alpha (useful if we were using a png with transparency)\\n            finalColor = vec4(finalColor.rgb * finalColor.a, finalColor.a);\\n\\n            gl_FragColor = finalColor;\\n        }\\n    \"; // some basic parameters\n\n  var params = {\n    vertexShader: vs,\n    fragmentShader: fs,\n    widthSegments: 20,\n    heightSegments: 20,\n    uniforms: {\n      resolution: {\n        // resolution of our plane\n        name: \"uResolution\",\n        type: \"2f\",\n        // notice this is an length 2 array of floats\n        value: [planeElements[0].clientWidth, planeElements[0].clientHeight]\n      },\n      time: {\n        // time uniform that will be updated at each draw call\n        name: \"uTime\",\n        type: \"1f\",\n        value: 0\n      },\n      mousePosition: {\n        // our mouse position\n        name: \"uMousePosition\",\n        type: \"2f\",\n        // again an array of floats\n        value: mousePosition\n      },\n      mouseMoveStrength: {\n        // the mouse move strength\n        name: \"uMouseMoveStrength\",\n        type: \"1f\",\n        value: 0\n      }\n    }\n  }; // create our plane\n\n  var simplePlane = new curtainsjs__WEBPACK_IMPORTED_MODULE_0__[\"Plane\"](curtains, planeElements[0], params); // if there has been an error during init, simplePlane will be null\n\n  simplePlane.onReady(function () {\n    // set a fov of 35 to reduce perspective (we could have used the fov init parameter)\n    simplePlane.setPerspective(35); // apply a little effect once everything is ready\n\n    deltas.max = 2; // now that our plane is ready we can listen to mouse move event\n\n    var wrapper = document.getElementById(\"page-wrap\");\n    wrapper.addEventListener(\"mousemove\", function (e) {\n      handleMovement(e, simplePlane);\n    });\n    wrapper.addEventListener(\"touchmove\", function (e) {\n      handleMovement(e, simplePlane);\n    }, {\n      passive: true\n    });\n  }).onRender(function () {\n    // increment our time uniform\n    simplePlane.uniforms.time.value++; // decrease both deltas by damping : if the user doesn't move the mouse, effect will fade away\n\n    deltas.applied += (deltas.max - deltas.applied) * 0.02;\n    deltas.max += (0 - deltas.max) * 0.01; // send the new mouse move strength value\n\n    simplePlane.uniforms.mouseMoveStrength.value = deltas.applied;\n  }).onAfterResize(function () {\n    var planeBoundingRect = simplePlane.getBoundingRect();\n    simplePlane.uniforms.resolution.value = [planeBoundingRect.width, planeBoundingRect.height];\n  }).onError(function () {\n    // we will add a class to the document body to display original images\n    document.body.classList.add(\"no-curtains\");\n  }); // handle the mouse move event\n\n  function handleMovement(e, plane) {\n    // update mouse last pos\n    mouseLastPosition.copy(mousePosition);\n    var mouse = new curtainsjs__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](); // touch event\n\n    if (e.targetTouches) {\n      mouse.set(e.targetTouches[0].clientX, e.targetTouches[0].clientY);\n    } // mouse event\n    else {\n        mouse.set(e.clientX, e.clientY);\n      } // lerp the mouse position a bit to smoothen the overall effect\n\n\n    mousePosition.set(curtains.lerp(mousePosition.x, mouse.x, 0.3), curtains.lerp(mousePosition.y, mouse.y, 0.3)); // convert our mouse/touch position to coordinates relative to the vertices of the plane and update our uniform\n\n    plane.uniforms.mousePosition.value = plane.mouseToPlaneCoords(mousePosition); // calculate the mouse move strength\n\n    if (mouseLastPosition.x && mouseLastPosition.y) {\n      var delta = Math.sqrt(Math.pow(mousePosition.x - mouseLastPosition.x, 2) + Math.pow(mousePosition.y - mouseLastPosition.y, 2)) / 30;\n      delta = Math.min(4, delta); // update max delta only if it increased\n\n      if (delta >= deltas.max) {\n        deltas.max = delta;\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack:///./assets/js/app.js?");

/***/ }),

/***/ "./assets/js/vender/_matchMedia.js":
/*!*****************************************!*\
  !*** ./assets/js/vender/_matchMedia.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _MatchMedia; });\nvar _MatchMedia = function _MatchMedia(_PC, _TAB, _SP) {\n  var _this = this;\n\n  this._PC = _PC;\n  this._TAB = _TAB;\n  this._SP = _SP;\n  this.matchSP = window.matchMedia('(max-width: 478px)');\n  this.matchTabMax = window.matchMedia('(max-width: 1200px)');\n  this.matchTabMin = window.matchMedia('(min-width: 479px)');\n  this.matchLandscape = window.matchMedia('(orientation: portrait)');\n\n  var breakpoint = function breakpoint() {\n    if (_this.matchSP.matches) {\n      _this._SP();\n    } else if (_this.matchTabMin.matches && _this.matchTabMax.matches) {\n      _this._TAB();\n    } else {\n      _this._PC();\n    }\n  };\n\n  this.matchSP.addListener(breakpoint);\n  this.matchTabMax.addListener(breakpoint);\n  this.matchTabMin.addListener(breakpoint);\n  this.matchLandscape.addListener(breakpoint);\n  window.addEventListener('orientationchange', function () {\n    location.reload();\n  });\n  breakpoint();\n};\n\n\n\n//# sourceURL=webpack:///./assets/js/vender/_matchMedia.js?");

/***/ }),

/***/ "./assets/js/vender/_ua.js":
/*!*********************************!*\
  !*** ./assets/js/vender/_ua.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _UA; });\n/* harmony import */ var _matchMedia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_matchMedia */ \"./assets/js/vender/_matchMedia.js\");\n\n\nvar _UA =\n/*#__PURE__*/\nfunction () {\n  function _UA() {\n    var _this = this;\n\n    this.CLASS_DESKTOP = 'device-desktop';\n    this.CLASS_TOUCH = 'device-touch';\n    this.$body = document.querySelector('html');\n    this.SP = 736;\n\n    this._touchDevice();\n\n    var pc = function pc() {\n      _this.$body.classList.remove('is-sp');\n\n      _this.$body.classList.remove('is-tab');\n\n      _this.$body.classList.add('is-pc');\n    };\n\n    var tab = function tab() {\n      _this.$body.classList.remove('is-sp');\n\n      _this.$body.classList.remove('is-pc');\n\n      _this.$body.classList.add('is-tab');\n    };\n\n    var sp = function sp() {\n      _this.$body.classList.remove('is-pc');\n\n      _this.$body.classList.remove('is-tab');\n\n      _this.$body.classList.add('is-sp');\n    };\n\n    var breakpoint = new _matchMedia__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pc, tab, sp);\n    var useragent = window.navigator.userAgent.toLowerCase();\n\n    if (useragent.indexOf('msie') !== -1 || useragent.indexOf('trident') !== -1) {\n      this.$body.classList.add('browser-msie');\n    } else if (useragent.indexOf('edge') !== -1) {\n      this.$body.classList.add('browser-edge');\n    } else if (useragent.indexOf('chrome') !== -1) {\n      this.$body.classList.add('browser-chrome');\n    } else if (useragent.indexOf('safari') !== -1) {\n      this.$body.classList.add('browser-safari');\n    } else if (useragent.indexOf('firefox') !== -1) {\n      this.$body.classList.add('browser-firefox');\n    } else if (useragent.indexOf('opera') !== -1) {\n      this.$body.classList.add('browser-opera');\n    }\n  }\n\n  var _proto = _UA.prototype;\n\n  _proto._touchDevice = function _touchDevice() {\n    var flag = window.ontouchstart === null ? true : false;\n\n    if (flag) {\n      this.$body.classList.add(this.CLASS_TOUCH);\n    } else {\n      this.$body.classList.add(this.CLASS_DESKTOP);\n    }\n\n    return flag;\n  };\n\n  _proto._PC = function _PC() {\n    var flag = this.$body.classList.contains('is-pc') ? true : false;\n    return flag;\n  };\n\n  _proto._TAB = function _TAB() {\n    var flag = this.$body.classList.contains('is-tab') ? true : false;\n    return flag;\n  };\n\n  _proto._SP = function _SP() {\n    var flag = this.$body.classList.contains('is-sp') ? true : false;\n    return flag;\n  };\n\n  return _UA;\n}();\n\n\n\n//# sourceURL=webpack:///./assets/js/vender/_ua.js?");

/***/ })

/******/ });